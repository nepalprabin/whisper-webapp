{"text": " Okay, so now we'd better get going with the lecture. Okay, so we're now at week eight, second half of week four. So the agenda today is that I first of all go into finish off the last pieces of attention that I didn't talk about last time. But the main topic today is to talk about final projects and that all consists of sort of grab bag of different things. I've talked about the final projects and finding research topics and finding data and doing research. I'll give a very brief introduction to reading compension and question answering, which is our default final project. But we get a whole lecture on that at the beginning of week six. So this is just to give you a little bit of what it's about and if you're thinking about doing the default final project. In some sense, this lecture is also a rare chance in this course to cause regret because you know, really we've got to happen up until now, being having the fire hose going full stream ahead, spraying you with new facts and approaches, algorithms and models and linguistic things. So this is a brief respite from that. So if you have any questions, if you've been wondering about for weeks, today's lecture could be a good time to ask them because after today's lecture in week five, we'll turn the fire hose right back on and we'll have a lot of new information about transformers and large pre-trained language models, which become a huge part of modern neural NLP, as I already mentioned, a little bit of laser into this class. Okay, so this is where we left things last time, basically. So I sort of talk through the rough idea that what we're going to do for this new attention model is that we are going to use the encoder justice before. And then once we're running the decoder at each time step, we're going to compute a new hidden representation using the same time of sequence model as we had before. But now we're going to use that hidden representation of the decoder to look back at the encoder. And it's going to then work out, respectively, some kind of function of similarity between the code of hidden states and decoder hidden states. And based on those, it's going to work out what are called attention scores. And attention scores are actually probability weights as to how much it likes different elements. And based on those attention scores, we're going to compute an attention distribution. So this is our probability distribution. And then based on that, what we do is compute a weighted average of the encoder and then hidden states weighted by the attention distribution. And so that's going to give us a new attention output vector, which is like the hidden state vector of the decoder. So that is an extra hidden vector. And so we're going to use both of them to then generate our next output, which is going to be here, the word pi at the end of the sequence. So let's start off now by doing that with some equations. So before you move on, there's a good question here. And then we'll go back to the question, which is why is the encoder and decoder both required as opposed to just the same arn and for both. I think it's. Okay, I'll address that. So maybe there are a couple of still possible interpretations to that, but I'll say something about it. So, you know, this the basic case that we've been doing here is this case on the machine translation, where we've got a source in code, which is in the target language. So since these two seem. Different languages, it makes sense to have separate sequence models with different RNN parameters for each one. And at that point, it's just a fact about what we want to do with machine translation, which is that. Well, we actually want to look back at the source to try and decide what extra words to put into the translation. So it makes sense to attend back from the source to the translation. But what you might be asking is, well, why do we only do that? Why don't we also consider doing attention from here back into the decoder RNN? And if that's what you were thinking about, that's a great suggestion. And actually very quickly after these attention models were developed, that's exactly what people started doing. They decided that well, actually we could start using more forms of attention. And we could also use attention that books back in the decoder sequence. And that often gets referred to as self attention and self attention has proven to be an extremely powerful concept. And indeed that then leads into the transformer models that we're going to see next week. But going in on things, I think a self attention wasn't quite as much an obviously needed idea, like from this initial translation motivation, which was where attention was developed. And fairly clear that when you're running the decoder RNN that as a conditional language model, it gets some information about the source fed into its initial state. And it seemed pretty clear you were losing a lot of information about the details of what was in the source sentence. And therefore, it'd be really, really useful to have this idea of attention. So you could directly look at it as you proceed into translate in a way it's a little bit less obvious that you need that for the decoder RNN because after all last week, we introduced those really clever LSTM's and the whole argument of the LSTM was actually there pretty good at maintaining history of a sequence through quite a bunch of time periods. And to be extent that the LSTM is doing a perfect job, maybe you shouldn't really need self attention in your decoder. But actually precisely what's being shown is that this mechanism of attention is a much more effective method again of selectively addressing elements of your past state. And it's sort of lighter weight rather than having to kind of cook up the parameters that realize the M so it's carrying just the right information forward all the time. You provide you carry only enough information that the model knows where to look back to you can then kind of grab more information from past states when you want to. So that's actually a great approach, but I won't talk about it more now and that will come up more next week. Okay, the equations, hopefully these won't actually seem difficult. So what we have is we have our hidden our coding in the states which are vectors. And then the time set T we have a decoder hidden state, which is also a vector of the hidden state to mention. And then what we want to do is get attention scores as to for ST how much attention it played it pays to each of the hidden states of encoder. Easiest way to do that is just to use dot products between the source and the first sorry, not the source, the dot products between the decoder hidden state s and the encoders hidden state age. So these give us a bunch of numbers that might be negative or positive for their attention scores. And so you are just like we did right from the first lecture with word vectors we then put those to a softmax distribution and then we get a probability distribution over the time steps of the encoder. Okay, so now we've got that probability distribution we can construct a new vector by creating a weighted sum of the encoder hidden states based on these attention distribution probabilities and that gives us. So to make use of that and generating the outboard we're going to calculate the attention outboard with the decoder hidden state s t. So now that's something of size to age. And then we're going to proceed as with a non attention model with them put that through another softmax to generate a probability distribution of the output words and then with some word. Hopefully that sort of a fairly obvious implementation of what we have here. So we've got our vectors with encoder and decoder with game dot products of ST with each one softmax those and your probability we take the weighted average of the ones in red to get the attention out board we combine that with the. The ST decoder's getting state and then we put it through another softmax and we can sell for pie. Okay, so. I sort of almost can't stress enough attention is great. So the very first modern neural machine translation program was done in 2014 at Google by Julia, since Gabriel and they had a straight board encoder decoder to LSTM's and by a bunch of tricks of having very deep LSTM's. Huge amount of data huge amount of training other tricks that I don't want to go into now they were actually able to get good results by just putting together a straight seek to see new machine translation system. But very soon after that, in fact, later this same year, a group from Montreal, Dima, but now can you show your show of end you introduce sequence the sequence model with attention and it was just obviously better so attention significantly improved your machine translation performance and that sort of makes sense. That allows the decoder to focus on parts of the source sentence. So I think about us giving you a much more human like model of doing machine translation because you know exactly what a human translator would do is you read the source sentence you've got an idea of what's about you start writing the first couple of words of translation and then what you do is is you look back to see what exactly it said as the sort of modifiers of the nouns. Translate the next few words. Technically people think of it as solving the bottleneck problem because attention now allows us full access to the entire source in the state and we can get any information that we need. It's not the case that all information has to be encoded in the final hidden state. It also helps with the vanishing gradient problem. So effectively now we have shortcuts back to every hidden state of the encoder. And so therefore there's always a short path with gradient flow and that greatly mitigates the vanishing gradient problem. The final neat thing is that attention provides some effective interpretability to sequence the sequence models because by looking at the tension distribution we can see what the code was focusing on. So in a softballistic way we get the free through the operation of the model a soft alignment as to which words translate which words. So in this example of the French sentence is being translated as he hit me with a pie where there's sort of a single verb here in the French, which is kind of like a English sometimes people on play day use pie. So the words are sort of like saying he the pie that the model is getting that eilers translators he the most being translators me and essentially on tarte is being translated as it with a pie. The amazing thing is you know the model was never told about any of these alignments there was no explicit separate model which was trying to learn these alignments as in the earliest statistical phrase based systems we just built a sequence the secret model with the tension and said here are a lot of translating sentences start running back back prop and try and get the sentences and it doesn't learn by itself in deciding where it's best to pay attention what is a good alignment between the source and the target languages. Okay so that's the basic idea of attention I want to go a bit more into the complex unit of attention since it's such an important idea that will see a lot as we continue now of the course right so there are several attention variance but first of all you know what's the common part so we have some value. Values some vectors that we're going to be sort of using as our memory and we have a query vector so attention always involves that we calculate the attention stores and turn those into a probability distribution with a softmax and we use attention distribution to calculate and weighted some of the elements in our memory giving us an attention output. So the main place where you're immediately seen variation and attention is how do you compute these attention stores. So let's go through some of the ways that that's done so the simplest most obvious way to do it is to say let's just take the dot product between the given the current in state of the decoder and all the vectors here the source and code of vectors that we are putting attention over and you know that sort of makes sense right this is dot product is our most basic similarity store but it seems like there's something wrong with this and that is you know it seems wrong for you to want to think that the entirety of the source hidden states and the entirety of the target hidden states is all having information about where to attend to because really these LSTMs are doing multiple things so the LSTMs are carrying forward information along their own sequence to help you know record information about the past so it can be used in the future they have information in the hidden state to tell you which output you should generate next and perhaps they're encoding some information that will serve as a kind of a query key for getting out information by attention from the source hidden states so it seems like probably we only want to use some of the information in them to calculate our attention store and so that's the kind of approach that was taken very quickly in subsequent work. So the next year, Tang Luang working with me explore this ideas now normally called multi picket of attention so for multi picket of attention we put an extra matrix in the middle of our dot product so this gives us a matrix of learnable parameters and so effectively inside this matrix we can learn what parts of S to pay attention to and what parts of each to pay attention to when calculating the similarity and hence the attention store between the source hidden states and then depot it and say so that was a is a good thing which in general works much better but there's perhaps a problem with that which is you know maybe this W matrix has too many parameters you know because we've got these two vectors which in the simple case of both of the same dimension D that they don't have to keep the same and you know we're now putting in D square new parameters for the matrix W and that sort of feels like it's too many because you know arguably it seems like we should only have about 2D parameters you know one D saying how much attention to pay different parts of S and the other one how much attention to pay the parts of age. You know there's a reason for more by having a whole matrix here you're not only doing the scoring element wise right you can have any element of S being combined with any element of the H vector and see that as a useful part of your similarity store but there's still a lot of parameters so bit after that. People here well maybe thing with less parameters so if you have a matrix W and you'd like it to have less parameters the obvious linear algebra thing to do is to say okay we can model W as you transpose the where you and the low ranks skinny matrices so we can choose some number K for how skinny these matrices are going to be. And they can be K times D matrices and then we're getting a sort of a reduced rank matrix here and so we have a lot let we end up with the D by D matrix but it has a lot less parameters in it. And so people explore that and you know at that point if you just do a little bit of basic linear algebra what we have here is exactly the same source in vector and the decoder in vector and projecting each of them with a low rank linear projection and then taking the dot product of the of the projections. And if you remember this equation here to next Tuesday's lecture you'll see that that's actually exactly what's happening in transform models. And none of these were actually the original form of attention that was suggested by button now at our but button now. And how suggested is the way we could calculate an attention score is by taking the two vectors multiply each by a matrix putting and adding them putting to a 10 H function giving us another vector which we then dot product with yet another vector. And we get out of weight so in the literature compares attention variance this one is normally referred to as added of attention I've always thought that's a really lazy name. And at least it never made sense to me because really what you're doing here is that you're using a neural net layer that calculates an attention score right this looks just like the kind of neural net layers that we use when we wanted to calculate scores such as when we're doing simple sort of speed for networks of the beginning and we wanted to calculate scores. And in a assignment for which you should look at really soon if you haven't looked at it yet actually one of the things in the written problems of assignment for is thinking about these different attention variance. Okay, yeah, so I've only presented this idea of attention as something good for machine translation to use between the source of the target sequence models except for that when when I tried to answer the question but really this is a general deep learning technique. Right so it's not only great for that application you can use it in many architectures not just sequence sequence and you can use it for many tasks not just for machine translation so anytime that you have a bunch of vector values and you have some other vector that you can regards a query attention as a technique to compute a value form. That you can have the query attend to the values. And so you know once you think about it like that you can think about attention as a kind of memory access mechanism that the weight and some that attention calculates gives you a kind of selective summary of some of the information contained in the values. And the query tells you which values to pay attention to so on the one hand you could say this is a good general technique anytime you have a whole bunch of vectors and you want to just get one vector out well you know the dumbest thing you can do is just average them all or do max pooling take the element wise max of each element. This gives you a much more flexible way to combine them together in as to a single vector and so you can think of it as actually giving us an operation that's sort of much more like a conventional computer and it's memory access. So we can think of as like our RAM and have a feel like an associate of memory right we have a query vector and the query vector access a sort of associate of memory pointer that says how much weight to put on different parts of RAM and then we sort of proportionally retrieve those bits of RAM to get a new value. Another cool thing about attention that i'll just mention here is that. You know attention is actually a genuinely new deep learning idea from the last decade middle of the last decade there's sort of a slightly depressing fact about deep learning that a lot of what's been done and deep learning in recent years wasn't actually new ideas there are ideas that were developed in the 80s and 90s is just people were able to get much use of them then because. The computers were too small on the amount of data they had was too small and they were sort of reinvented in the two while not reinvented but they were given you life in the 2010s where attention is genuinely new idea from the 2010s and we'll see sort of next next week how it sort of then turns into this huge idea of transforms it all. Okay so that's all I wanted to say about attention and now i'm going to get on and go and talk about final projects and all this stuff about that so am I good to start on to other stuff. Okay so this is a quick reminder so don't forget this is about coursework so you're right in the middle or past halfway almost going through the assignments and there were about half the grade but the other half of the grade comes from the final project which i'm going to talk about today and that gets without. So there's a project proposal which we've handed out instructions for today it's worth 5% there's a milestone that's worth 5% in the middle and there's a report at the end which is the big part which is worth 30% and then we also want to have a represent patient of your project with people can easily browse so in. In normal years when there are people on campus we had a post-desessions in the class which is seems like we just can't use what you do in the current world we want to put up a website where there's sort of descriptions each project some nice picture of what you've done and then we can link to your project right up and so you also then get 3% for that that's mainly just to make sure you deliver it comes down to it. And yeah so I should just mention again as we go along the on a code that's important also for the final projects so just to be clear on that so for the final projects in a lot of cases you're going to use a lot of stuff that already exists that you may well be using some model that you can just download from the GitHub repository or similar places. You may well be taking various ideas you know it's fine for the final project to use any amount of existing stuff but you have to make sure that you acknowledge what you're using and document it and in terms of evaluating your projects what will be interested in as the value add in terms of what you did not what you're able to download from other people. So for the final project you can have teams of one to three in almost every case every member of the team gets the same score but we do ask for a group statement of the work done by each team may and if it's clear that there was sort of some egregious imbalance in sort of one in a hundred cases we do do something about that. Okay so for the final project you've essentially got two choikers you can either do our default final project where we give you the scaffolding and send you pointed in some direction or you can propose a custom final project which we then need to approve as a suitable final project for the course and i'm going to talk a bit about both of those in this class. So you can work in teams of one to three if you have a bigger team we expect you to do more sometimes people use the same project for multiple classes so that it might also use others. So it's sort of the same general rule right so that they have two of you and you're using the project for two classes each that's sort of like it should be four persons worth of work that is being done and so we expect you know projects that are bigger that you know if you just one of you we can be totally satisfied with something compact and small you know it sort of has to be done. But it can be compact and small whereas if there are three of you we sort of feel like well you really sort of have enough time to actually implement a variant model and see if that works better. You can use any framework the language you want the final project but in practice basically people go on using high torch and then finally i've got to mention on the default final project i'll get back to this in a minute but actually this year new thing we've got two some variants of the default final project and you can choose one or the other. So for custom final projects i'm really happy to talk to people about final projects that this is problem and and you'll encourage us to sign up for an office hours slide but this is problem that there's only one of me so also encourage you to talk to the TAs about final project many of the TAs have experience for all sorts of things and we tried to sort of summarize some of what they have experience. So we're going to talk about the final projects we make sure everyone has some kind of mentor and the mentor can either be TIO instructor in this class or it could be somebody else and for somebody else option well you know if there's someone you know it's standard and there's some cool project they have you know whatever it is that's something you know in the political science of understanding documents or in the med school doing something. So you can have them as your mentor or we then also collected some projects from people in the stamp and NLP group and community and we're going to be distributing a list of those so you can try and sort of sign up to be doing one of those projects and make them be a mentor so in that case the other person we expect to be the mentor that's keeping an eye on the project and telling you to do something sort of sensible but it's one of the. The TAs in the class will be grading your various pieces of the work of class. Okay, so these are the details of the two default final projects and the handouts for them that sort of can also pay to handouts, reach one out on the web now so there are so both of them involved question answering which I'll mention a bit at the end and there are sort of two variants. One is for you to actually build a question answering architecture by yourself and I describe this as as from scratch but it's not really from scratch because we give you a baseline question answering system and the start code but you're working doing all the work of what else could I add to the model how can I add extra layers different attention and other things to make it better using the squad data set. But one of the things that's happened in NLP which is really then the topic of next week's classes in the last few years in NLP has been this revolution in using large pre trained language models with names like birth, and other, and other, which have just been sort of fantastically good for doing natural language problems so the other choice is to make use of those models and so then effectively the model and the model architecture as a starting point is given to you. And what we're hoping to have people focus on is how to build a robust question answering system which works across different data sets and domains so a huge problem with a lot of NLP models is if you train them on say with the PDF data they work great on with the PDF data but then as soon as you try and use them on something else whether it's customer support questions or web questions that their performance. He grades greatly despite the fact that the fact of the human being it seems like you're doing. So the building or a bus QA system track we're then going to be sort of training or fine tuning free train language models on several data sets and your goal is to produce something that then forms well on different data sets. So for this topic of question answering i'm going to say a few minutes on it at the end but on Tuesday of week six and the entire lecturers on question answering so there will be a lot of content there on the different kinds of models for really getting up to speed. Good stuff to know even if you're not doing the final projects and some major application of NLP but even better stuff to know if you are doing the final project so look out for that but just to give you one example this is the kind of thing we have a question answering problem so question answering is taking paragraph of text but I only put one sentence in my slides short. Bill Aiken adopted by mixed and movie actress and we've there my yoga grew up in the neighboring town of the dead Madera and his song chronicled up or what the question is in what town did Bill Aiken grew up this doesn't actually seem so hard I presume all of you could have done this when you're in sixth grade in school or something like that the answer should be Madera. But somehow Google's book model fails to find that answer and have seen us partly because there's extra stuff in the middle there adopted by next to movie actress and so it says no this sentence doesn't answer the question so you can hope to do better than that. Okay so this is choice about doing either the default or custom vinyl project and you know the overall stats have been that about half the people do each so there's no sort of clear winner of the choice in terms of thinking about what you should choose I mean I think the default final project is great if you have limited experience with doing these certain things. If you don't have any clear idea of what you would want to do as a custom final project if you think of be good have you know guidance and the clear goal towards work towards indeed we give you a leader board so you can compete against the other people doing the final project then you should do the default final project gives you guidance scaffolding clear goal post. I mean and in particular just the sort of try and give us sharp edge to this I mean you know the fact of the matter is every year there are a few people who do a custom final project and when we're grading when we look at this custom final project and we say you know this just looks pretty lame compared to what people are doing in the default final project. And that's a bad state to be in right if you're doing the custom final project you want to have a sort of a clear thing that you thought out that is interesting so it will seem has all more interesting and the default final project and if you don't think you've got such a thing you actually better off doing the default final project. Why should you do the custom final project well if you have some research project possibly something you've already been working on or any rate something that you think all this would be great to do which there are two requirements for our project it has to supplement we involve human language and it has to subsequently involve your networks so that doesn't mean it has to be for without those if you want to do a language division project that's fine or if you want to compare your networks versus other machine learning methods on some problem that's fine but you do have to in your project subsequently use both of those things. Yeah so if you'd like to sort of design your own thing and come up with something different on your own or just you don't like question answering or what if you basically want more experience of going through the whole process of trying to find a good research goal finding data and tools to explore it working out on your own then doing the custom final project is a great choice. Either way the steps that you go through are the following so the first thing which you've gone to 516 or is to write a project proposal which is three. So you know how some of the details vary on the kind of project so you need to decide on the research topic for your project which is kind of easy if you're doing the final project that's either a or b but we then want you to choose one research paper that's relevant to your final project read it and then learn some stuff from that that you can write about. And we want you to write about what your plan is as to what you're going to do about the final project and that will include describing things as neither such as the data and the evaluation and again this is especially important for custom final projects might be kind of obvious if you're doing the final project. And so typically if you're doing the final project this should be three pages and if you're doing a custom final project this should be four pages. And there are two parts of it the first part of it is writing about the paper you read and so that part is two pages and so we there are longer form of instructions but we want you to sort of read and think about this paper you know what are its novel contributions is that an idea to be employed in other ways are there things that didn't really do well. How does it compare to other ways that people have approached this problem does it sort of subject even though it did things one way does it actually suggest ideas that really could do things a different way that might even be better and so. We want you to write this two page paper summary which we will grade and effectively we're going to grade that on how good a job you do at thinking about analyzing and having critical comments on this paper so then the other half which might be longer a shorter depending on its custom or the fold is to propose what you're going to do. And really this part is formative so formative means we're not going to grade it harshly we want you to write it so we can help you. So we want you to sort of thought through what you're going to do and the past have an opportunity to say no that's unrealistically large or that sounds insufficiently ambitious or this isn't going to work unless you can get more data than you actually have and things like that. So this is mainly just a feedback but you know on the things to think about you know project plans that are lacking they're generally just lacking concreteness in nuts and bolts ways which are essential to being able to do a good final project and short amount of time so. You need to have found good data or have a realistic plan so that should be planned a realistic plan to be able to collect that you need to have a realistic way that you can evaluate your work you need to have thought about what kinds of experiments you can run so you can show whether your model is working well or badly and will be sort of looking to see whether you've done those things. Okay so then a couple of weeks after that is the project milestone which is again from everyone this is a progress report and this is again just meant to help keep you on track so you should be more and halfway done. You should have been able to in nearly all cases I'll talk about more about this in a minute in nearly all cases you should already have been able to implement some baseline system and have some initial experimental results to show you know might still be working on your main model and have nothing to show for it but hopefully you've at least said and of this simple baseline to know how well it works is this thing and I've got that and I have some numbers and then we're watching update. I'm how you plan to spend the rest of your time and again a lot of this is about us giving you more feedback as to what are the best things you can do for the final two weeks of a class and then at the end there's writing up the final project and so for this you know the quality of your right up is really really important to your grade right you know by and then you can do it. Right you know by and large going to evaluate how good your project is by reading the right up so make sure you budget sufficient time to actually do a good job. Right now I do you could look at good projects from past years they're all up on the CF24N website 2020 was kind of a mess because of the start of the pandemic so possibly should look at 2019's is even better models of what you should do so you know the details very but this is sort of a picture to have in mind and normally what them right up looks like so you know eight pages you want to have an abstract. Introductions of paper you want to talk about related prior work you want to present the model you're using you want to talk about the data you're using talk about your experiments what the results are what you learned about that you know the details may be very you know some papers there's less to say about model and there's more to say about the experiment so you can sort of move things around a bit but roughly something like this. Okay so I now want to kind of go on and say a bit about research and practical things that we need to do a lot of these things are relevant to everybody at any rate there are things that you should know a little bit about the very first one is finding research topics which is sort of especially by all to custom final projects. So really for all of science there's sort of only two ways that you can have a research project that one way is doing domain science where you start with a problem of interest in the domain such as how can I build a decent charity to an English machine translation system and you work on finding ways to be able to do it better than people currently know how to do. Or to understand the problem better than people currently understand that and the other way is to take a methodological approach where you start off with some method or approach of interest and then you work out good ways to extend or improve that or you waste or fire and so basically you're doing one of those so there is effectively different kinds of projects you can do. This is non-explorced at list that most projects sort of fall into one of these buckets very non uniformly so the most common type as you find some application or task of interest and you explore how to approach and solve that as well as possible often that's using existing models and trying out different options and things like that. So the kind is you can take some relatively complex neural architecture i.e. it has to be something more complex than we built for assignments one through five you implement it and get something that works on some data. And you know by you're doing something fairly complex it's fine just to implement it and get it to work. But you know if there's some way that you can tweak it and try and do something different and see if that makes it even better or maybe it makes it worse and you can do experiments either way that sort of even better. There are then other kinds of projects that you can do so another kind of project is an analysis project so you can take some model that's an existing model and you can put at it and find out things about what it knows so you can take anything even as simple as word vectors and put at them and you can find out things like well how much the word vectors know about word sensors. And sometimes the same words both are now and a verb can you tell those are can you sort of get that different similarities out of the word vectors so analysis projects are perfectly fine often interesting and then all these five times the rareest kind of project we have a couple is a theoretical project. You know there's a lot of interesting deep learning theory is that how do these things work and why and what would it take to make it work better. And so you can work on sort of getting any kind of non trivial property or understanding of a deep learning model. And here are just quickly a couple of examples of some projects from class years of 2 24 and just give you a couple of examples of things like there so deep poetry. This was doing generation of Shakespearean sonnets so the way it was being generated was with the kind of last work with now for machine translation but have interest in differences because if you wanted to generate poetry you need to know about metrical structure and rhyme and so they were working out how to add components to a model that could do that. Here's someone who was implementing a complex new model so there's been a line of work at deep mind on trying to build general purpose computers of neural architectures and it's first of all new or chewing machines and then a subsequent model for the differential wall neural computer. They haven't released the code of those open source so Carol decided that she was going to implement your computers and get them to work. This was a very dangerous idea because you know we were in week 10 of the class and she still hadn't gone to work at all but luckily she got it together at the last moment and actually got her model working and it was able to run it and get results on some of the problems that deep mind. She was also shown results on and so she pulled the rabbit out of the hat and had an enormous success and we were very impressed that she managed to do that. So sometimes final projects have become papers. Here's a final project that became paper published at the top machine learning conference this is more a few years ago in 2017. It actually has a couple of fairly simple ideas but you know there are ideas that at that time people weren't using and these two people proved work to improve things and they got the conference paper out of it so I'll just mention one of them now. So if you think about our current neural network language models they have both and for words and encoding into distributed vectors that the other end you know the softmax matrix basically hides inside it just like for our word vectors a word vector for each word and then you're sort of. The siging the probabilities of generating different words based on similarities between the query vector in each of those words so their idea was look maybe we're actually able to build better language models if we tied together the word of that in matrix and the matrix used to project the RNN output. And actually they showed that you can get significant gains by doing that and so now you know it's basically sort of now become standard if you're wanting to build strong neural language models that you want to tie those two sets of parameters together so that was pretty cool. Here's a more systems the project so I'll mention this again later but you know something people have been interested in is how can you just wish your nets and make them small so you can run them on you know a regular laptop or a smaller device like a mobile phone and so these people worked on how could you do quantization of neural networks down sort of. One or two bits per parameter and still get good results so this is sort of an example has to involve neural nets and human language is sort of a way of which you could say this didn't involve human language at all because this was sort of really about quantizing neural nets but you know effectively where we draw the line is we say you will be allowed to do this for buying the task that you. The model you use to demonstrate success or failure is a natural language task and so they did both words similarity tasks and question answering tasks of seeing how all the system performed after doing the compression by quantization. How can you find a good place for a project if you don't have a good idea one place is the sort of look at recent papers so for most NLP papers they're here in the ACL and apology also look at major machine learning conferences most past two twenty four in projects up on the class website you can look through them there's just general archive dot or pre print. And so that's even better is looking for an interesting problem in the world so how very and as an economist was it. And he wrote this call paper that I often recommend to students of how to build an economic model in your spare time and the paper isn't really that economic models is about how to do research and what he says right at the beginning section one of the paper is called getting ideas and he writes. But where to get ideas that's the question most graduate students are convinced that the way you get ideas is to read journal papers that in my experience journals really have a good very good source of original ideas you can get lots of things from journal papers technique inside even true but most of the time you only get somebody else's ideas. And so he sort of talks about further about better ways of getting ideas by thinking about problems in the world. So for archivists this huge repository of papers it's hard to navigate there are various tools that can make it easier to navigate one of them is archive sanity preserver which is a website that was written by Andre Kapati who is the original person who constructed and taught the Seattle. The CS231 and costs still a good thing to use. There are lots of leaderboards for different tasks in NLP so a place you can find tasks and work on tasks is looking at leaderboards so papers with code and NLP progress are two good general sources of leaderboards. There are also then lots of more specialized ones for particular tasks. I wanted to then for research topics this material of these next four slides are brand new for this year. I wanted to sort of just say a few words about the kind of the funny somewhat different time that we're in where there's sort of all deep learning NLP and new deep learning and LP. In the early days of the deep learning revival which are called 2010 to 2018 because 2010's the year I started doing deep learning for NLP most of the work was in defining and exploring better deep learning architectures. The typical paper was I can improve a summarization system but not by not only using the kind of attention I just explained but I can add an extra kind of attention which I'll use as a copying mechanism. So I'll do additional attention calculations to work out source words which I could copy of a bait into the output rather than having to regenerate them through the stand and kind of softmax that's just one example of a millions but you are changing the architecture of the model and make things better. You know that's what a lot of good CS 224 in projects did to and in particular you know for one branch of the default final project the one where you start with the baseline squad question answering system and work out ways to make it better by adding more new architecture it's essentially doing this. But actually if you look out in the research world of the last couple of years the sad truth is that approach is dead love it's not actually dead I mean that's too strong but that's now much more difficult and rarer to do. So we look at the sort of last three years of NLP and this is true both for people who are implementing production NLP systems of companies and for people who are doing research and NLP that most work is more like this. There are these enormous enormously good big pre trained language models but gpt 2 reberta excel net t5 they exist on the web and you can download them with one python command and they give you a great basis for doing most NLP task will learn all about the next week. So you're not actually starting from scratch to find your own model architecture and playing with it variance you're saying I'm going to be using reberta. So this is like find further fine tuning it for your task doing domain adaptation and things like that. So you know this is sort of very quickly for 2021 NLP for all of your practical projects and industry needs this is basically the formula that which you should probably use. There's this enormously great library by the company hugging face you install it pip install transformers and then that gives you a great implementation of the transformers we learn about next week and then effectively what you're doing is something like my code below. This code doesn't quite run it's missing some pieces if you try it but you know sort of pieces are you load a bit pre trained language model so here I'm way loading the work based on case model turns out these models all hats have very special tokenizers you'll hear about those next week as well so we grab the tokenizer for it. Then we're going to find tune it for our task like maybe I'm going to be working with legal data so I want to take the general model and find tune it to understand legal data better. And then I've got something I want to do like question answering or perhaps here where I'm using birth for sequence classification maybe the task I want to do is label mentions of sections of legal code so at that point I'm then going to sort of find tune for that particular task and then run on that task. And so this is kind of what we're doing and we're just sort of doing stuff on top of a pre existing model so a lot of what is exciting now is problems that work within or around that world. So and you might sort of think about that and look at recent papers and things that could be done about that world well one of them and this is the other half of the default final project is we still have this problem of robustness to domain shift that these models are trained on normally one kind of text but we often want to use it for different kinds of text including often when you're talking about problem or application specific. Questions that are mains for you don't have much data how can you do that well. If you've got one of these big models on some sense they're good but are they actually you know robust that they work for all of the different things in the space should like them to work on so not only interested in basic accuracy but robustness. So this robustness gym was a very recently announced project by a PhD student Stanford current girl it's actually testing the robustness of NLP models and they've got some stuff built into it but there's lots of stuff that isn't built into it if someone would like to sort of choose some NLP problem whether it's dependency parsing or something else like summarization and build out robustness test for that could be kind of interesting to do. You know a bunch of other things you can look at issues whether there's bias embedding these models how can you explain what they're doing how can you use data augmentation has been an enormous amount of work on using data augmentation to improve model resources lots of different areas. I'll just mention two other things and then I'll go on so it's been a ton of work on scaling models up and down so these big pre train language models are already big so the fact of the matter is it's just not possible for the time and resources that you have in 224 and to be thinking I'm going to be. I'm going to apply myself big pre train models all you can do is use ones that already exist but you know on the other hand people are actually interested in can you but build very small models that still work pretty well and you know there are lots of examples but actually one that was done recently for question answering was that there was a bake off competition at the last Europe's which was called efficient QA and one of the divisions of this bake off was can you can you build a performance question answering system that will run in B and well you know that's actually a reasonable thing that you could attempt for a final project. Another thing people are being very interested in is wanting to explore more advanced learning capabilities in neural networks ideas like compositionality systematic generalization fast learning such as metal learning work and a lot of the time people have investigated these in small remains so here's a couple of examples that you go look at baby AI and G scan so those could be kind of interesting places you can look for a final project. Okay other stuff to know quickly probably I can't quite go through all of these slides and some of them you could just take home and look at you need data. Now we actually love it if people feel like they can collect their own data and sometimes a good ways to collect your own data and but you know the reality is a lot of the time the easiest way to get a fast start on a final project when you have a few weeks is to make use of an existing data set and there are lots of pre existing data sets so there's data from the linguistic data consortium which is licensed data we have licenses that stand there. You can look through their catalog and find all the things they have there are websites that have lots of data so if you want to machine translation tasks you can find lots of machine translation data on this website dependency parsing if you're keen on assignment three lots of data on the universal dependencies website there are now several websites that are collecting a lot of data sets so hugging faces also just recently actually now it's hugging the web site. And we actually now hugging face data sets which is sort of an index of data sets and the people with code people also have people with code data sets so you can look at those there are many more. Yeah. Here's just a quick summary of thinking about a research project so you know this is just one example right that's post you think summarization so that's sort of going from a longer piece of text or short summary of that so you know what you have to do you need to you know find the data set and well probably easiest thing to do is to sort of use an existing text summarization data set. You can find several online but you know this is where you can think of interesting ways to create your own data so something that you might have noticed if you look at Twitter is the journalist often promote their own stories by or their their newspaper or TV station does by putting out a tweet and so that's sort of like found data which is sort of self summaries could you collect some of those and try and learn to generate tweets for a new story. So I'll say a bit about data set hygiene you want to be careful about working things out so you have trains sets and test sets I'll say that in a minute you want some way to evaluate whether you're doing well as you build models and you pretty much need to have an automatic evaluation metric even though human evaluation is great since you want to train a bunch of models and see whether they're better or worse you normally want an automatic metric. You should make sure you have some kind of baseline that you want to have some sense of whether you're doing well and so commonly you first off want to implement some simple model like a logistic regression or just averaging word vectors or something and see how well that works because then you know if you're not doing better than that that you're actually making no progress whatsoever. So you can make some neural net model and see if you can that you think might be good and see if you can get that to work and have that work well. Make sure you keep looking at your data to see what kind of errors you're making and think about how you could change the model to avoid them and then hopefully you've got time to try out some model variance and see if they're better or worse and then that will help in having a good project. Yeah, so quickly what I call here pots of data so many public data sense come with a structure where they have trained dead and test and the idea is that you keep your test data until the end and you only sort of do test runs when development is complete or at least almost complete. And the thing you're more trained on the train data and you evaluate on the dev data sometimes you need even more data sets is sometimes you want to tune your parameters and you might need a train set a tune set a depth set and a test set. If the data set if doesn't come pre splitter it doesn't have enough pieces it's sort of your job to work out how to cut it into pieces and to get things working and the reason why you need to do this is. That it's necessary to have these different sets to get realistic measures of performance in fact ideally you're only actually testing on the test set once and at any rate very few times so if you're doing the default final project we limits you to three runs on the test set so remember that and save your three runs. The reason that we do that is that if you sort of mix up and over use these data sets the results just become invalid so you know when you train on data well you always build a model what does well on the training data so that's not exciting. And well if you want to tune hyper parameters if you tune them on the training data set you won't get good valid values for them because they're not tuned to good values for something that would work on different test data. But the subtlest part of it is you know I think a lot of people starting off think oh there's no harm in just keeping on testing on the test set every time I you know try out some variant I'll just see how it's going on the test set it's a really compelling thing that you want to do right you change your model you'd like to know whether they've the score on the test set go up or down but you know the truth is that if you do that. You're cheating because what you do is you're sort of slowly training on the test set because you keep every change that helps on the test set and you throw away every change that doesn't help on the test set all makes it worse and so you're learning about the test set and what things happen by chance to work on that particular test set so you're effectively slowly training on the test set and you get biased unrealistically high. Play at levels of performance. Okay. Let's see. I think there then sort of a bunch more slides on neural nets that I think I'm going to just skip for the moment but I think in general they use forward of scene maybe I've just sort of mentioned this one. So for the final projects you're much more on your own and you have to work out for yourself how to get your neural network to work. The first thing is you want to start with a positive attitude you know these neural nets are amazing they really want to learn they want to find any pattern they can anywhere and data. They really just do that it's in their DNA so if your neural network isn't learning it means you're doing something wrong that's preventing it from learning successfully. But you know at that point there's a grim reality there are all sorts of things that cause neural nets to not learn at all or more common case actually is they sort of learn a bit that they don't learn very well you know there are bugs in the code you're doing through by the wrong thing you've missing some connections in your network so nothing information is flowing from one place to another place you're calculating the gradients wrong and some layer there are all sorts of things that can go wrong. So you need to then work out how to find and fix them and the truth is that this debugging and tuning can often take way more time than I'm going to implement the model so in terms of thinking about how much you could get through you should be thinking okay I've coded up my model that doesn't mean that you're 75% and it's pretty frequent it means that you're only 20% done and there's still a lot of work to go to get things working. Okay so for the last minutes I just want to say a few minutes about the final projects and I've read like some idea about what this is about as an NLP problem. Okay so the problem is most commonly called question answering over documents but really what the part that we're doing is perhaps better called reading comprehension and so the idea of this is that you want to actually be able to answer questions based on documents. So here's an example of the question who was Australia's third prime minister and you know once upon a time when if you typed a question into Google all you got was web search and it returned to you list of pages with the implied promise that some of the ones right near the top probably had the answer the question. But if you do this now it gives you back an answer and so here's the answer John Christian Watson and the important thing to realize is that this kind of featured snippet you know Google has 101 or maybe a thousand one different pieces inside it but you know this feature snippet isn't coming from the Google knowledge graph structured data it's coming straight from a web page where some part of the Google search system has actually read this web page and decided what the answer is. So for this kind of system the most straightforward way to do it is you have two parts first you have a web search system that finds a page that probably has the answer and then you have a reading comprehension system that actually looks inside the text and works to extract this. And so it's looked through this piece of text and this sentence says was an Australian politician who served as the third prime minister of Australia that's why I'm asking for and slightly different wording Australia's third prime minister. So this answers the question and so it correctly says that the answer is John Christian Watson and so what we want to build in the default final project is systems that do that second part that given a piece of text and a question they can give the answer. So the simple motivation for why this is important is once we have massive full text document collections that you know simply we're saying here's a list of maybe relevant documents is of limited use that we really much prefer to get answers to our questions. And you know that's true in general but you know it's especially true if you're using your phone to try and look for information rather than sitting in front of a 27 inch monitor it's especially true if you're using a virtual assistant device like Alexa or Google assistant. That's the problem that's been worked on reading comprehension or question answering and so the squad data set which was built by front of Rajperker and personally and consists of passages taken from Wikipedia and questions which team one super bowl 50 and what you're meant to be able to do is read through this passage. And so the answer is the dead and the bonkers. And so there are 100,000 such examples and so the answer is always just taken to be a span of the passage and that's referred to as extractive question answering. So to let this data what was done was that people were shown passages asked several questions just like reading comprehension at school perhaps slightly simple questions and they're asked to choose a span that answered it. You know as in these examples show the they showed it to three human beings and they didn't always choose exactly the same span because sort of there's summer uncertainty as to how many words to include but roughly. They're answering the question in that way and so then we have a valuation measures and so there are two evaluation measures one is exact match whether you return exactly what one of the humans returned and the other one is the F1 measure which is. Is the overlap in words of your span to one of the humans roughly so for squad the initial. So we're going to do squad 2.0 which is just a little bit more complex because they make it a little bit trickier that some of the questions have no answers in the text so here's a piece of text about genghis Khan and the question is when did genghis Khan kill great Khan. Well if we sort of read through this text there's genghis Khan at the beginning and there's talk about different kinds and there's the person down here who became great Khan in 1251 then genghis Khan didn't kill great Khan it doesn't say that at all. But you know actually here's Microsoft and L net which is another strong question answering system and if you ask at this question it says 1234 so the reality is that a lot of these models have effectively heuristically behave like okay well this is asking for a year let me look for a year in this passage this near discussion of genghis Khan. And maybe weakening is somehow similar to killing i'm going to guess 1234 and that's sort of the wrong thing to have done here so this is a good reliability test for question answering models so that's an interesting add on problem to look at. Okay i'm going to stop there today good luck with your projects.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 14.0, "text": " Okay, so now we'd better get going with the lecture. Okay, so we're now at week eight,", "tokens": [1033, 11, 370, 586, 321, 1116, 1101, 483, 516, 365, 264, 7991, 13, 1033, 11, 370, 321, 434, 586, 412, 1243, 3180, 11], "temperature": 0.0, "avg_logprob": -0.2503318493182842, "compression_ratio": 1.5031446540880504, "no_speech_prob": 0.06474605947732925}, {"id": 1, "seek": 0, "start": 14.0, "end": 21.0, "text": " second half of week four. So the agenda today is that I first of all go into finish off", "tokens": [1150, 1922, 295, 1243, 1451, 13, 407, 264, 9829, 965, 307, 300, 286, 700, 295, 439, 352, 666, 2413, 766], "temperature": 0.0, "avg_logprob": -0.2503318493182842, "compression_ratio": 1.5031446540880504, "no_speech_prob": 0.06474605947732925}, {"id": 2, "seek": 0, "start": 21.0, "end": 25.0, "text": " the last pieces of attention that I didn't talk about last time.", "tokens": [264, 1036, 3755, 295, 3202, 300, 286, 994, 380, 751, 466, 1036, 565, 13], "temperature": 0.0, "avg_logprob": -0.2503318493182842, "compression_ratio": 1.5031446540880504, "no_speech_prob": 0.06474605947732925}, {"id": 3, "seek": 2500, "start": 25.0, "end": 31.0, "text": " But the main topic today is to talk about final projects and that all consists of", "tokens": [583, 264, 2135, 4829, 965, 307, 281, 751, 466, 2572, 4455, 293, 300, 439, 14689, 295], "temperature": 0.0, "avg_logprob": -0.16506367987328832, "compression_ratio": 1.7413793103448276, "no_speech_prob": 0.00042888030293397605}, {"id": 4, "seek": 2500, "start": 31.0, "end": 37.0, "text": " sort of grab bag of different things. I've talked about the final projects and finding research topics", "tokens": [1333, 295, 4444, 3411, 295, 819, 721, 13, 286, 600, 2825, 466, 264, 2572, 4455, 293, 5006, 2132, 8378], "temperature": 0.0, "avg_logprob": -0.16506367987328832, "compression_ratio": 1.7413793103448276, "no_speech_prob": 0.00042888030293397605}, {"id": 5, "seek": 2500, "start": 37.0, "end": 43.0, "text": " and finding data and doing research. I'll give a very brief introduction to reading", "tokens": [293, 5006, 1412, 293, 884, 2132, 13, 286, 603, 976, 257, 588, 5353, 9339, 281, 3760], "temperature": 0.0, "avg_logprob": -0.16506367987328832, "compression_ratio": 1.7413793103448276, "no_speech_prob": 0.00042888030293397605}, {"id": 6, "seek": 2500, "start": 43.0, "end": 47.0, "text": " compension and question answering, which is our default final project.", "tokens": [715, 3378, 293, 1168, 13430, 11, 597, 307, 527, 7576, 2572, 1716, 13], "temperature": 0.0, "avg_logprob": -0.16506367987328832, "compression_ratio": 1.7413793103448276, "no_speech_prob": 0.00042888030293397605}, {"id": 7, "seek": 2500, "start": 47.0, "end": 51.0, "text": " But we get a whole lecture on that at the beginning of week six.", "tokens": [583, 321, 483, 257, 1379, 7991, 322, 300, 412, 264, 2863, 295, 1243, 2309, 13], "temperature": 0.0, "avg_logprob": -0.16506367987328832, "compression_ratio": 1.7413793103448276, "no_speech_prob": 0.00042888030293397605}, {"id": 8, "seek": 5100, "start": 51.0, "end": 57.0, "text": " So this is just to give you a little bit of what it's about and if you're thinking about", "tokens": [407, 341, 307, 445, 281, 976, 291, 257, 707, 857, 295, 437, 309, 311, 466, 293, 498, 291, 434, 1953, 466], "temperature": 0.0, "avg_logprob": -0.22967844742995042, "compression_ratio": 1.5495049504950495, "no_speech_prob": 0.0007147475844249129}, {"id": 9, "seek": 5100, "start": 57.0, "end": 65.0, "text": " doing the default final project. In some sense, this lecture is also a rare chance in this course", "tokens": [884, 264, 7576, 2572, 1716, 13, 682, 512, 2020, 11, 341, 7991, 307, 611, 257, 5892, 2931, 294, 341, 1164], "temperature": 0.0, "avg_logprob": -0.22967844742995042, "compression_ratio": 1.5495049504950495, "no_speech_prob": 0.0007147475844249129}, {"id": 10, "seek": 5100, "start": 65.0, "end": 70.0, "text": " to cause regret because you know, really we've got to happen up until now,", "tokens": [281, 3082, 10879, 570, 291, 458, 11, 534, 321, 600, 658, 281, 1051, 493, 1826, 586, 11], "temperature": 0.0, "avg_logprob": -0.22967844742995042, "compression_ratio": 1.5495049504950495, "no_speech_prob": 0.0007147475844249129}, {"id": 11, "seek": 5100, "start": 70.0, "end": 74.0, "text": " being having the fire hose going full stream ahead,", "tokens": [885, 1419, 264, 2610, 20061, 516, 1577, 4309, 2286, 11], "temperature": 0.0, "avg_logprob": -0.22967844742995042, "compression_ratio": 1.5495049504950495, "no_speech_prob": 0.0007147475844249129}, {"id": 12, "seek": 7400, "start": 74.0, "end": 81.0, "text": " spraying you with new facts and approaches, algorithms and models and linguistic things.", "tokens": [36658, 291, 365, 777, 9130, 293, 11587, 11, 14642, 293, 5245, 293, 43002, 721, 13], "temperature": 0.0, "avg_logprob": -0.12058093070983887, "compression_ratio": 1.691358024691358, "no_speech_prob": 0.00022442932822741568}, {"id": 13, "seek": 7400, "start": 81.0, "end": 86.0, "text": " So this is a brief respite from that. So if you have any questions,", "tokens": [407, 341, 307, 257, 5353, 1597, 642, 490, 300, 13, 407, 498, 291, 362, 604, 1651, 11], "temperature": 0.0, "avg_logprob": -0.12058093070983887, "compression_ratio": 1.691358024691358, "no_speech_prob": 0.00022442932822741568}, {"id": 14, "seek": 7400, "start": 86.0, "end": 91.0, "text": " if you've been wondering about for weeks, today's lecture could be a good time to ask them", "tokens": [498, 291, 600, 668, 6359, 466, 337, 3259, 11, 965, 311, 7991, 727, 312, 257, 665, 565, 281, 1029, 552], "temperature": 0.0, "avg_logprob": -0.12058093070983887, "compression_ratio": 1.691358024691358, "no_speech_prob": 0.00022442932822741568}, {"id": 15, "seek": 7400, "start": 91.0, "end": 97.0, "text": " because after today's lecture in week five, we'll turn the fire hose right back on", "tokens": [570, 934, 965, 311, 7991, 294, 1243, 1732, 11, 321, 603, 1261, 264, 2610, 20061, 558, 646, 322], "temperature": 0.0, "avg_logprob": -0.12058093070983887, "compression_ratio": 1.691358024691358, "no_speech_prob": 0.00022442932822741568}, {"id": 16, "seek": 7400, "start": 97.0, "end": 103.0, "text": " and we'll have a lot of new information about transformers and large pre-trained", "tokens": [293, 321, 603, 362, 257, 688, 295, 777, 1589, 466, 4088, 433, 293, 2416, 659, 12, 17227, 2001], "temperature": 0.0, "avg_logprob": -0.12058093070983887, "compression_ratio": 1.691358024691358, "no_speech_prob": 0.00022442932822741568}, {"id": 17, "seek": 10300, "start": 103.0, "end": 108.0, "text": " language models, which become a huge part of modern neural NLP,", "tokens": [2856, 5245, 11, 597, 1813, 257, 2603, 644, 295, 4363, 18161, 426, 45196, 11], "temperature": 0.0, "avg_logprob": -0.1947737390344793, "compression_ratio": 1.5813953488372092, "no_speech_prob": 0.00027692478033713996}, {"id": 18, "seek": 10300, "start": 108.0, "end": 114.0, "text": " as I already mentioned, a little bit of laser into this class.", "tokens": [382, 286, 1217, 2835, 11, 257, 707, 857, 295, 12530, 666, 341, 1508, 13], "temperature": 0.0, "avg_logprob": -0.1947737390344793, "compression_ratio": 1.5813953488372092, "no_speech_prob": 0.00027692478033713996}, {"id": 19, "seek": 10300, "start": 114.0, "end": 118.0, "text": " Okay, so this is where we left things last time, basically.", "tokens": [1033, 11, 370, 341, 307, 689, 321, 1411, 721, 1036, 565, 11, 1936, 13], "temperature": 0.0, "avg_logprob": -0.1947737390344793, "compression_ratio": 1.5813953488372092, "no_speech_prob": 0.00027692478033713996}, {"id": 20, "seek": 10300, "start": 118.0, "end": 125.0, "text": " So I sort of talk through the rough idea that what we're going to do for this new", "tokens": [407, 286, 1333, 295, 751, 807, 264, 5903, 1558, 300, 437, 321, 434, 516, 281, 360, 337, 341, 777], "temperature": 0.0, "avg_logprob": -0.1947737390344793, "compression_ratio": 1.5813953488372092, "no_speech_prob": 0.00027692478033713996}, {"id": 21, "seek": 10300, "start": 125.0, "end": 130.0, "text": " attention model is that we are going to use the encoder justice before.", "tokens": [3202, 2316, 307, 300, 321, 366, 516, 281, 764, 264, 2058, 19866, 6118, 949, 13], "temperature": 0.0, "avg_logprob": -0.1947737390344793, "compression_ratio": 1.5813953488372092, "no_speech_prob": 0.00027692478033713996}, {"id": 22, "seek": 13000, "start": 130.0, "end": 136.0, "text": " And then once we're running the decoder at each time step,", "tokens": [400, 550, 1564, 321, 434, 2614, 264, 979, 19866, 412, 1184, 565, 1823, 11], "temperature": 0.0, "avg_logprob": -0.09303747718013934, "compression_ratio": 1.696774193548387, "no_speech_prob": 0.00011767227260861546}, {"id": 23, "seek": 13000, "start": 136.0, "end": 142.0, "text": " we're going to compute a new hidden representation using the same time of sequence model", "tokens": [321, 434, 516, 281, 14722, 257, 777, 7633, 10290, 1228, 264, 912, 565, 295, 8310, 2316], "temperature": 0.0, "avg_logprob": -0.09303747718013934, "compression_ratio": 1.696774193548387, "no_speech_prob": 0.00011767227260861546}, {"id": 24, "seek": 13000, "start": 142.0, "end": 148.0, "text": " as we had before. But now we're going to use that hidden representation", "tokens": [382, 321, 632, 949, 13, 583, 586, 321, 434, 516, 281, 764, 300, 7633, 10290], "temperature": 0.0, "avg_logprob": -0.09303747718013934, "compression_ratio": 1.696774193548387, "no_speech_prob": 0.00011767227260861546}, {"id": 25, "seek": 13000, "start": 148.0, "end": 153.0, "text": " of the decoder to look back at the encoder.", "tokens": [295, 264, 979, 19866, 281, 574, 646, 412, 264, 2058, 19866, 13], "temperature": 0.0, "avg_logprob": -0.09303747718013934, "compression_ratio": 1.696774193548387, "no_speech_prob": 0.00011767227260861546}, {"id": 26, "seek": 15300, "start": 153.0, "end": 160.0, "text": " And it's going to then work out, respectively, some kind of function of similarity", "tokens": [400, 309, 311, 516, 281, 550, 589, 484, 11, 25009, 11, 512, 733, 295, 2445, 295, 32194], "temperature": 0.0, "avg_logprob": -0.16075052155388725, "compression_ratio": 1.6825396825396826, "no_speech_prob": 5.305039303493686e-05}, {"id": 27, "seek": 15300, "start": 160.0, "end": 165.0, "text": " between the code of hidden states and decoder hidden states.", "tokens": [1296, 264, 3089, 295, 7633, 4368, 293, 979, 19866, 7633, 4368, 13], "temperature": 0.0, "avg_logprob": -0.16075052155388725, "compression_ratio": 1.6825396825396826, "no_speech_prob": 5.305039303493686e-05}, {"id": 28, "seek": 15300, "start": 165.0, "end": 170.0, "text": " And based on those, it's going to work out what are called attention scores.", "tokens": [400, 2361, 322, 729, 11, 309, 311, 516, 281, 589, 484, 437, 366, 1219, 3202, 13444, 13], "temperature": 0.0, "avg_logprob": -0.16075052155388725, "compression_ratio": 1.6825396825396826, "no_speech_prob": 5.305039303493686e-05}, {"id": 29, "seek": 15300, "start": 170.0, "end": 177.0, "text": " And attention scores are actually probability weights as to how much it likes different elements.", "tokens": [400, 3202, 13444, 366, 767, 8482, 17443, 382, 281, 577, 709, 309, 5902, 819, 4959, 13], "temperature": 0.0, "avg_logprob": -0.16075052155388725, "compression_ratio": 1.6825396825396826, "no_speech_prob": 5.305039303493686e-05}, {"id": 30, "seek": 17700, "start": 177.0, "end": 184.0, "text": " And based on those attention scores, we're going to compute an attention distribution.", "tokens": [400, 2361, 322, 729, 3202, 13444, 11, 321, 434, 516, 281, 14722, 364, 3202, 7316, 13], "temperature": 0.0, "avg_logprob": -0.1345778349991683, "compression_ratio": 1.9203980099502487, "no_speech_prob": 2.317269354534801e-05}, {"id": 31, "seek": 17700, "start": 184.0, "end": 187.0, "text": " So this is our probability distribution.", "tokens": [407, 341, 307, 527, 8482, 7316, 13], "temperature": 0.0, "avg_logprob": -0.1345778349991683, "compression_ratio": 1.9203980099502487, "no_speech_prob": 2.317269354534801e-05}, {"id": 32, "seek": 17700, "start": 187.0, "end": 193.0, "text": " And then based on that, what we do is compute a weighted average of the encoder", "tokens": [400, 550, 2361, 322, 300, 11, 437, 321, 360, 307, 14722, 257, 32807, 4274, 295, 264, 2058, 19866], "temperature": 0.0, "avg_logprob": -0.1345778349991683, "compression_ratio": 1.9203980099502487, "no_speech_prob": 2.317269354534801e-05}, {"id": 33, "seek": 17700, "start": 193.0, "end": 198.0, "text": " and then hidden states weighted by the attention distribution.", "tokens": [293, 550, 7633, 4368, 32807, 538, 264, 3202, 7316, 13], "temperature": 0.0, "avg_logprob": -0.1345778349991683, "compression_ratio": 1.9203980099502487, "no_speech_prob": 2.317269354534801e-05}, {"id": 34, "seek": 17700, "start": 198.0, "end": 201.0, "text": " And so that's going to give us a new attention output vector,", "tokens": [400, 370, 300, 311, 516, 281, 976, 505, 257, 777, 3202, 5598, 8062, 11], "temperature": 0.0, "avg_logprob": -0.1345778349991683, "compression_ratio": 1.9203980099502487, "no_speech_prob": 2.317269354534801e-05}, {"id": 35, "seek": 17700, "start": 201.0, "end": 205.0, "text": " which is like the hidden state vector of the decoder.", "tokens": [597, 307, 411, 264, 7633, 1785, 8062, 295, 264, 979, 19866, 13], "temperature": 0.0, "avg_logprob": -0.1345778349991683, "compression_ratio": 1.9203980099502487, "no_speech_prob": 2.317269354534801e-05}, {"id": 36, "seek": 20500, "start": 205.0, "end": 208.0, "text": " So that is an extra hidden vector.", "tokens": [407, 300, 307, 364, 2857, 7633, 8062, 13], "temperature": 0.0, "avg_logprob": -0.1137029767036438, "compression_ratio": 1.532258064516129, "no_speech_prob": 1.777291799953673e-05}, {"id": 37, "seek": 20500, "start": 208.0, "end": 215.0, "text": " And so we're going to use both of them to then generate our next output,", "tokens": [400, 370, 321, 434, 516, 281, 764, 1293, 295, 552, 281, 550, 8460, 527, 958, 5598, 11], "temperature": 0.0, "avg_logprob": -0.1137029767036438, "compression_ratio": 1.532258064516129, "no_speech_prob": 1.777291799953673e-05}, {"id": 38, "seek": 20500, "start": 215.0, "end": 220.0, "text": " which is going to be here, the word pi at the end of the sequence.", "tokens": [597, 307, 516, 281, 312, 510, 11, 264, 1349, 3895, 412, 264, 917, 295, 264, 8310, 13], "temperature": 0.0, "avg_logprob": -0.1137029767036438, "compression_ratio": 1.532258064516129, "no_speech_prob": 1.777291799953673e-05}, {"id": 39, "seek": 20500, "start": 220.0, "end": 225.0, "text": " So let's start off now by doing that with some equations.", "tokens": [407, 718, 311, 722, 766, 586, 538, 884, 300, 365, 512, 11787, 13], "temperature": 0.0, "avg_logprob": -0.1137029767036438, "compression_ratio": 1.532258064516129, "no_speech_prob": 1.777291799953673e-05}, {"id": 40, "seek": 20500, "start": 225.0, "end": 230.0, "text": " So before you move on, there's a good question here.", "tokens": [407, 949, 291, 1286, 322, 11, 456, 311, 257, 665, 1168, 510, 13], "temperature": 0.0, "avg_logprob": -0.1137029767036438, "compression_ratio": 1.532258064516129, "no_speech_prob": 1.777291799953673e-05}, {"id": 41, "seek": 23000, "start": 230.0, "end": 238.0, "text": " And then we'll go back to the question, which is why is the encoder and decoder both required as opposed to just the same arn and for both.", "tokens": [400, 550, 321, 603, 352, 646, 281, 264, 1168, 11, 597, 307, 983, 307, 264, 2058, 19866, 293, 979, 19866, 1293, 4739, 382, 8851, 281, 445, 264, 912, 594, 77, 293, 337, 1293, 13], "temperature": 0.0, "avg_logprob": -0.4293539717390731, "compression_ratio": 1.6653386454183268, "no_speech_prob": 4.53782340628095e-05}, {"id": 42, "seek": 23000, "start": 238.0, "end": 239.0, "text": " I think it's.", "tokens": [286, 519, 309, 311, 13], "temperature": 0.0, "avg_logprob": -0.4293539717390731, "compression_ratio": 1.6653386454183268, "no_speech_prob": 4.53782340628095e-05}, {"id": 43, "seek": 23000, "start": 239.0, "end": 242.0, "text": " Okay, I'll address that.", "tokens": [1033, 11, 286, 603, 2985, 300, 13], "temperature": 0.0, "avg_logprob": -0.4293539717390731, "compression_ratio": 1.6653386454183268, "no_speech_prob": 4.53782340628095e-05}, {"id": 44, "seek": 23000, "start": 242.0, "end": 248.0, "text": " So maybe there are a couple of still possible interpretations to that, but I'll say something about it.", "tokens": [407, 1310, 456, 366, 257, 1916, 295, 920, 1944, 37547, 281, 300, 11, 457, 286, 603, 584, 746, 466, 309, 13], "temperature": 0.0, "avg_logprob": -0.4293539717390731, "compression_ratio": 1.6653386454183268, "no_speech_prob": 4.53782340628095e-05}, {"id": 45, "seek": 23000, "start": 248.0, "end": 259.0, "text": " So, you know, this the basic case that we've been doing here is this case on the machine translation, where we've got a source in code,", "tokens": [407, 11, 291, 458, 11, 341, 264, 3875, 1389, 300, 321, 600, 668, 884, 510, 307, 341, 1389, 322, 264, 3479, 12853, 11, 689, 321, 600, 658, 257, 4009, 294, 3089, 11], "temperature": 0.0, "avg_logprob": -0.4293539717390731, "compression_ratio": 1.6653386454183268, "no_speech_prob": 4.53782340628095e-05}, {"id": 46, "seek": 25900, "start": 259.0, "end": 260.0, "text": " which is in the target language.", "tokens": [597, 307, 294, 264, 3779, 2856, 13], "temperature": 0.0, "avg_logprob": -0.2804691827119286, "compression_ratio": 1.4945054945054945, "no_speech_prob": 0.0001292208762606606}, {"id": 47, "seek": 25900, "start": 260.0, "end": 269.0, "text": " So since these two seem.", "tokens": [407, 1670, 613, 732, 1643, 13], "temperature": 0.0, "avg_logprob": -0.2804691827119286, "compression_ratio": 1.4945054945054945, "no_speech_prob": 0.0001292208762606606}, {"id": 48, "seek": 25900, "start": 269.0, "end": 280.0, "text": " Different languages, it makes sense to have separate sequence models with different RNN parameters for each one.", "tokens": [20825, 8650, 11, 309, 1669, 2020, 281, 362, 4994, 8310, 5245, 365, 819, 45702, 45, 9834, 337, 1184, 472, 13], "temperature": 0.0, "avg_logprob": -0.2804691827119286, "compression_ratio": 1.4945054945054945, "no_speech_prob": 0.0001292208762606606}, {"id": 49, "seek": 25900, "start": 280.0, "end": 288.0, "text": " And at that point, it's just a fact about what we want to do with machine translation, which is that.", "tokens": [400, 412, 300, 935, 11, 309, 311, 445, 257, 1186, 466, 437, 321, 528, 281, 360, 365, 3479, 12853, 11, 597, 307, 300, 13], "temperature": 0.0, "avg_logprob": -0.2804691827119286, "compression_ratio": 1.4945054945054945, "no_speech_prob": 0.0001292208762606606}, {"id": 50, "seek": 28800, "start": 288.0, "end": 296.0, "text": " Well, we actually want to look back at the source to try and decide what extra words to put into the translation.", "tokens": [1042, 11, 321, 767, 528, 281, 574, 646, 412, 264, 4009, 281, 853, 293, 4536, 437, 2857, 2283, 281, 829, 666, 264, 12853, 13], "temperature": 0.0, "avg_logprob": -0.11398494674498777, "compression_ratio": 1.6414141414141414, "no_speech_prob": 0.00024090084480121732}, {"id": 51, "seek": 28800, "start": 296.0, "end": 302.0, "text": " So it makes sense to attend back from the source to the translation.", "tokens": [407, 309, 1669, 2020, 281, 6888, 646, 490, 264, 4009, 281, 264, 12853, 13], "temperature": 0.0, "avg_logprob": -0.11398494674498777, "compression_ratio": 1.6414141414141414, "no_speech_prob": 0.00024090084480121732}, {"id": 52, "seek": 28800, "start": 302.0, "end": 307.0, "text": " But what you might be asking is, well, why do we only do that?", "tokens": [583, 437, 291, 1062, 312, 3365, 307, 11, 731, 11, 983, 360, 321, 787, 360, 300, 30], "temperature": 0.0, "avg_logprob": -0.11398494674498777, "compression_ratio": 1.6414141414141414, "no_speech_prob": 0.00024090084480121732}, {"id": 53, "seek": 28800, "start": 307.0, "end": 314.0, "text": " Why don't we also consider doing attention from here back into the decoder RNN?", "tokens": [1545, 500, 380, 321, 611, 1949, 884, 3202, 490, 510, 646, 666, 264, 979, 19866, 45702, 45, 30], "temperature": 0.0, "avg_logprob": -0.11398494674498777, "compression_ratio": 1.6414141414141414, "no_speech_prob": 0.00024090084480121732}, {"id": 54, "seek": 31400, "start": 314.0, "end": 320.0, "text": " And if that's what you were thinking about, that's a great suggestion.", "tokens": [400, 498, 300, 311, 437, 291, 645, 1953, 466, 11, 300, 311, 257, 869, 16541, 13], "temperature": 0.0, "avg_logprob": -0.1381670125325521, "compression_ratio": 1.6502463054187193, "no_speech_prob": 0.00022323938901536167}, {"id": 55, "seek": 31400, "start": 320.0, "end": 328.0, "text": " And actually very quickly after these attention models were developed, that's exactly what people started doing.", "tokens": [400, 767, 588, 2661, 934, 613, 3202, 5245, 645, 4743, 11, 300, 311, 2293, 437, 561, 1409, 884, 13], "temperature": 0.0, "avg_logprob": -0.1381670125325521, "compression_ratio": 1.6502463054187193, "no_speech_prob": 0.00022323938901536167}, {"id": 56, "seek": 31400, "start": 328.0, "end": 333.0, "text": " They decided that well, actually we could start using more forms of attention.", "tokens": [814, 3047, 300, 731, 11, 767, 321, 727, 722, 1228, 544, 6422, 295, 3202, 13], "temperature": 0.0, "avg_logprob": -0.1381670125325521, "compression_ratio": 1.6502463054187193, "no_speech_prob": 0.00022323938901536167}, {"id": 57, "seek": 31400, "start": 333.0, "end": 338.0, "text": " And we could also use attention that books back in the decoder sequence.", "tokens": [400, 321, 727, 611, 764, 3202, 300, 3642, 646, 294, 264, 979, 19866, 8310, 13], "temperature": 0.0, "avg_logprob": -0.1381670125325521, "compression_ratio": 1.6502463054187193, "no_speech_prob": 0.00022323938901536167}, {"id": 58, "seek": 33800, "start": 338.0, "end": 346.0, "text": " And that often gets referred to as self attention and self attention has proven to be an extremely powerful concept.", "tokens": [400, 300, 2049, 2170, 10839, 281, 382, 2698, 3202, 293, 2698, 3202, 575, 12785, 281, 312, 364, 4664, 4005, 3410, 13], "temperature": 0.0, "avg_logprob": -0.11915486653645833, "compression_ratio": 1.5036496350364963, "no_speech_prob": 0.0004155896313022822}, {"id": 59, "seek": 33800, "start": 346.0, "end": 355.0, "text": " And indeed that then leads into the transformer models that we're going to see next week.", "tokens": [400, 6451, 300, 550, 6689, 666, 264, 31782, 5245, 300, 321, 434, 516, 281, 536, 958, 1243, 13], "temperature": 0.0, "avg_logprob": -0.11915486653645833, "compression_ratio": 1.5036496350364963, "no_speech_prob": 0.0004155896313022822}, {"id": 60, "seek": 35500, "start": 355.0, "end": 372.0, "text": " But going in on things, I think a self attention wasn't quite as much an obviously needed idea, like from this initial translation motivation, which was where attention was developed.", "tokens": [583, 516, 294, 322, 721, 11, 286, 519, 257, 2698, 3202, 2067, 380, 1596, 382, 709, 364, 2745, 2978, 1558, 11, 411, 490, 341, 5883, 12853, 12335, 11, 597, 390, 689, 3202, 390, 4743, 13], "temperature": 0.0, "avg_logprob": -0.15626825430454352, "compression_ratio": 1.4076923076923078, "no_speech_prob": 5.447582952911034e-05}, {"id": 61, "seek": 37200, "start": 372.0, "end": 386.0, "text": " And fairly clear that when you're running the decoder RNN that as a conditional language model, it gets some information about the source fed into its initial state.", "tokens": [400, 6457, 1850, 300, 562, 291, 434, 2614, 264, 979, 19866, 45702, 45, 300, 382, 257, 27708, 2856, 2316, 11, 309, 2170, 512, 1589, 466, 264, 4009, 4636, 666, 1080, 5883, 1785, 13], "temperature": 0.0, "avg_logprob": -0.19475356443428699, "compression_ratio": 1.6589861751152073, "no_speech_prob": 6.574975122930482e-05}, {"id": 62, "seek": 37200, "start": 386.0, "end": 393.0, "text": " And it seemed pretty clear you were losing a lot of information about the details of what was in the source sentence.", "tokens": [400, 309, 6576, 1238, 1850, 291, 645, 7027, 257, 688, 295, 1589, 466, 264, 4365, 295, 437, 390, 294, 264, 4009, 8174, 13], "temperature": 0.0, "avg_logprob": -0.19475356443428699, "compression_ratio": 1.6589861751152073, "no_speech_prob": 6.574975122930482e-05}, {"id": 63, "seek": 37200, "start": 393.0, "end": 397.0, "text": " And therefore, it'd be really, really useful to have this idea of attention.", "tokens": [400, 4412, 11, 309, 1116, 312, 534, 11, 534, 4420, 281, 362, 341, 1558, 295, 3202, 13], "temperature": 0.0, "avg_logprob": -0.19475356443428699, "compression_ratio": 1.6589861751152073, "no_speech_prob": 6.574975122930482e-05}, {"id": 64, "seek": 39700, "start": 397.0, "end": 424.0, "text": " So you could directly look at it as you proceed into translate in a way it's a little bit less obvious that you need that for the decoder RNN because after all last week, we introduced those really clever LSTM's and the whole argument of the LSTM was actually there pretty good at maintaining history of a sequence through quite a bunch of time periods.", "tokens": [407, 291, 727, 3838, 574, 412, 309, 382, 291, 8991, 666, 13799, 294, 257, 636, 309, 311, 257, 707, 857, 1570, 6322, 300, 291, 643, 300, 337, 264, 979, 19866, 45702, 45, 570, 934, 439, 1036, 1243, 11, 321, 7268, 729, 534, 13494, 441, 6840, 44, 311, 293, 264, 1379, 6770, 295, 264, 441, 6840, 44, 390, 767, 456, 1238, 665, 412, 14916, 2503, 295, 257, 8310, 807, 1596, 257, 3840, 295, 565, 13804, 13], "temperature": 0.0, "avg_logprob": -0.12946961801263351, "compression_ratio": 1.5414847161572052, "no_speech_prob": 8.313547732541338e-05}, {"id": 65, "seek": 42400, "start": 424.0, "end": 432.0, "text": " And to be extent that the LSTM is doing a perfect job, maybe you shouldn't really need self attention in your decoder.", "tokens": [400, 281, 312, 8396, 300, 264, 441, 6840, 44, 307, 884, 257, 2176, 1691, 11, 1310, 291, 4659, 380, 534, 643, 2698, 3202, 294, 428, 979, 19866, 13], "temperature": 0.0, "avg_logprob": -0.1132597029209137, "compression_ratio": 1.4974093264248705, "no_speech_prob": 0.0002371568843955174}, {"id": 66, "seek": 42400, "start": 432.0, "end": 444.0, "text": " But actually precisely what's being shown is that this mechanism of attention is a much more effective method again of selectively addressing elements of your past state.", "tokens": [583, 767, 13402, 437, 311, 885, 4898, 307, 300, 341, 7513, 295, 3202, 307, 257, 709, 544, 4942, 3170, 797, 295, 3048, 3413, 14329, 4959, 295, 428, 1791, 1785, 13], "temperature": 0.0, "avg_logprob": -0.1132597029209137, "compression_ratio": 1.4974093264248705, "no_speech_prob": 0.0002371568843955174}, {"id": 67, "seek": 44400, "start": 444.0, "end": 454.0, "text": " And it's sort of lighter weight rather than having to kind of cook up the parameters that realize the M so it's carrying just the right information forward all the time.", "tokens": [400, 309, 311, 1333, 295, 11546, 3364, 2831, 813, 1419, 281, 733, 295, 2543, 493, 264, 9834, 300, 4325, 264, 376, 370, 309, 311, 9792, 445, 264, 558, 1589, 2128, 439, 264, 565, 13], "temperature": 0.0, "avg_logprob": -0.16991439130571154, "compression_ratio": 1.6551724137931034, "no_speech_prob": 7.355231355177239e-05}, {"id": 68, "seek": 44400, "start": 454.0, "end": 466.0, "text": " You provide you carry only enough information that the model knows where to look back to you can then kind of grab more information from past states when you want to.", "tokens": [509, 2893, 291, 3985, 787, 1547, 1589, 300, 264, 2316, 3255, 689, 281, 574, 646, 281, 291, 393, 550, 733, 295, 4444, 544, 1589, 490, 1791, 4368, 562, 291, 528, 281, 13], "temperature": 0.0, "avg_logprob": -0.16991439130571154, "compression_ratio": 1.6551724137931034, "no_speech_prob": 7.355231355177239e-05}, {"id": 69, "seek": 46600, "start": 466.0, "end": 478.0, "text": " So that's actually a great approach, but I won't talk about it more now and that will come up more next week.", "tokens": [407, 300, 311, 767, 257, 869, 3109, 11, 457, 286, 1582, 380, 751, 466, 309, 544, 586, 293, 300, 486, 808, 493, 544, 958, 1243, 13], "temperature": 0.0, "avg_logprob": -0.218038695199149, "compression_ratio": 1.4885057471264367, "no_speech_prob": 0.0001333656837232411}, {"id": 70, "seek": 46600, "start": 478.0, "end": 491.0, "text": " Okay, the equations, hopefully these won't actually seem difficult. So what we have is we have our hidden our coding in the states which are vectors.", "tokens": [1033, 11, 264, 11787, 11, 4696, 613, 1582, 380, 767, 1643, 2252, 13, 407, 437, 321, 362, 307, 321, 362, 527, 7633, 527, 17720, 294, 264, 4368, 597, 366, 18875, 13], "temperature": 0.0, "avg_logprob": -0.218038695199149, "compression_ratio": 1.4885057471264367, "no_speech_prob": 0.0001333656837232411}, {"id": 71, "seek": 49100, "start": 491.0, "end": 498.0, "text": " And then the time set T we have a decoder hidden state, which is also a vector of the hidden state to mention.", "tokens": [400, 550, 264, 565, 992, 314, 321, 362, 257, 979, 19866, 7633, 1785, 11, 597, 307, 611, 257, 8062, 295, 264, 7633, 1785, 281, 2152, 13], "temperature": 0.0, "avg_logprob": -0.23963810503482819, "compression_ratio": 1.65359477124183, "no_speech_prob": 6.10573188168928e-05}, {"id": 72, "seek": 49100, "start": 498.0, "end": 512.0, "text": " And then what we want to do is get attention scores as to for ST how much attention it played it pays to each of the hidden states of encoder.", "tokens": [400, 550, 437, 321, 528, 281, 360, 307, 483, 3202, 13444, 382, 281, 337, 4904, 577, 709, 3202, 309, 3737, 309, 10604, 281, 1184, 295, 264, 7633, 4368, 295, 2058, 19866, 13], "temperature": 0.0, "avg_logprob": -0.23963810503482819, "compression_ratio": 1.65359477124183, "no_speech_prob": 6.10573188168928e-05}, {"id": 73, "seek": 51200, "start": 512.0, "end": 528.0, "text": " Easiest way to do that is just to use dot products between the source and the first sorry, not the source, the dot products between the decoder hidden state s and the encoders hidden state age.", "tokens": [46879, 6495, 636, 281, 360, 300, 307, 445, 281, 764, 5893, 3383, 1296, 264, 4009, 293, 264, 700, 2597, 11, 406, 264, 4009, 11, 264, 5893, 3383, 1296, 264, 979, 19866, 7633, 1785, 262, 293, 264, 2058, 378, 433, 7633, 1785, 3205, 13], "temperature": 0.0, "avg_logprob": -0.22174985358055602, "compression_ratio": 1.6929824561403508, "no_speech_prob": 3.37194069288671e-05}, {"id": 74, "seek": 52800, "start": 528.0, "end": 550.0, "text": " So these give us a bunch of numbers that might be negative or positive for their attention scores. And so you are just like we did right from the first lecture with word vectors we then put those to a softmax distribution and then we get a probability distribution over the time steps of the encoder.", "tokens": [407, 613, 976, 505, 257, 3840, 295, 3547, 300, 1062, 312, 3671, 420, 3353, 337, 641, 3202, 13444, 13, 400, 370, 291, 366, 445, 411, 321, 630, 558, 490, 264, 700, 7991, 365, 1349, 18875, 321, 550, 829, 729, 281, 257, 2787, 41167, 7316, 293, 550, 321, 483, 257, 8482, 7316, 670, 264, 565, 4439, 295, 264, 2058, 19866, 13], "temperature": 0.0, "avg_logprob": -0.14753063023090363, "compression_ratio": 1.5706806282722514, "no_speech_prob": 1.2021352631563786e-05}, {"id": 75, "seek": 55000, "start": 550.0, "end": 571.0, "text": " Okay, so now we've got that probability distribution we can construct a new vector by creating a weighted sum of the encoder hidden states based on these attention distribution probabilities and that gives us.", "tokens": [1033, 11, 370, 586, 321, 600, 658, 300, 8482, 7316, 321, 393, 7690, 257, 777, 8062, 538, 4084, 257, 32807, 2408, 295, 264, 2058, 19866, 7633, 4368, 2361, 322, 613, 3202, 7316, 33783, 293, 300, 2709, 505, 13], "temperature": 0.0, "avg_logprob": -0.2578411329360235, "compression_ratio": 1.471830985915493, "no_speech_prob": 4.9047990614781156e-05}, {"id": 76, "seek": 57100, "start": 571.0, "end": 584.0, "text": " So to make use of that and generating the outboard we're going to calculate the attention outboard with the decoder hidden state s t. So now that's something of size to age.", "tokens": [407, 281, 652, 764, 295, 300, 293, 17746, 264, 484, 3787, 321, 434, 516, 281, 8873, 264, 3202, 484, 3787, 365, 264, 979, 19866, 7633, 1785, 262, 256, 13, 407, 586, 300, 311, 746, 295, 2744, 281, 3205, 13], "temperature": 0.0, "avg_logprob": -0.2786863821524161, "compression_ratio": 1.7403846153846154, "no_speech_prob": 2.7960415536654182e-05}, {"id": 77, "seek": 57100, "start": 584.0, "end": 597.0, "text": " And then we're going to proceed as with a non attention model with them put that through another softmax to generate a probability distribution of the output words and then with some word.", "tokens": [400, 550, 321, 434, 516, 281, 8991, 382, 365, 257, 2107, 3202, 2316, 365, 552, 829, 300, 807, 1071, 2787, 41167, 281, 8460, 257, 8482, 7316, 295, 264, 5598, 2283, 293, 550, 365, 512, 1349, 13], "temperature": 0.0, "avg_logprob": -0.2786863821524161, "compression_ratio": 1.7403846153846154, "no_speech_prob": 2.7960415536654182e-05}, {"id": 78, "seek": 59700, "start": 597.0, "end": 622.0, "text": " Hopefully that sort of a fairly obvious implementation of what we have here. So we've got our vectors with encoder and decoder with game dot products of ST with each one softmax those and your probability we take the weighted average of the ones in red to get the attention out board we combine that with the.", "tokens": [10429, 300, 1333, 295, 257, 6457, 6322, 11420, 295, 437, 321, 362, 510, 13, 407, 321, 600, 658, 527, 18875, 365, 2058, 19866, 293, 979, 19866, 365, 1216, 5893, 3383, 295, 4904, 365, 1184, 472, 2787, 41167, 729, 293, 428, 8482, 321, 747, 264, 32807, 4274, 295, 264, 2306, 294, 2182, 281, 483, 264, 3202, 484, 3150, 321, 10432, 300, 365, 264, 13], "temperature": 0.0, "avg_logprob": -0.26380328278043375, "compression_ratio": 1.5606060606060606, "no_speech_prob": 0.00021291016309987754}, {"id": 79, "seek": 62200, "start": 622.0, "end": 636.0, "text": " The ST decoder's getting state and then we put it through another softmax and we can sell for pie.", "tokens": [440, 4904, 979, 19866, 311, 1242, 1785, 293, 550, 321, 829, 309, 807, 1071, 2787, 41167, 293, 321, 393, 3607, 337, 1730, 13], "temperature": 0.0, "avg_logprob": -0.290354179613518, "compression_ratio": 1.1368421052631579, "no_speech_prob": 4.328478826209903e-05}, {"id": 80, "seek": 62200, "start": 636.0, "end": 639.0, "text": " Okay, so.", "tokens": [1033, 11, 370, 13], "temperature": 0.0, "avg_logprob": -0.290354179613518, "compression_ratio": 1.1368421052631579, "no_speech_prob": 4.328478826209903e-05}, {"id": 81, "seek": 63900, "start": 639.0, "end": 668.0, "text": " I sort of almost can't stress enough attention is great. So the very first modern neural machine translation program was done in 2014 at Google by Julia, since Gabriel and they had a straight board encoder decoder to LSTM's and by a bunch of tricks of having very deep LSTM's.", "tokens": [286, 1333, 295, 1920, 393, 380, 4244, 1547, 3202, 307, 869, 13, 407, 264, 588, 700, 4363, 18161, 3479, 12853, 1461, 390, 1096, 294, 8227, 412, 3329, 538, 18551, 11, 1670, 20985, 293, 436, 632, 257, 2997, 3150, 2058, 19866, 979, 19866, 281, 441, 6840, 44, 311, 293, 538, 257, 3840, 295, 11733, 295, 1419, 588, 2452, 441, 6840, 44, 311, 13], "temperature": 0.0, "avg_logprob": -0.31518794551040186, "compression_ratio": 1.4153846153846155, "no_speech_prob": 3.370883496245369e-05}, {"id": 82, "seek": 66800, "start": 668.0, "end": 685.0, "text": " Huge amount of data huge amount of training other tricks that I don't want to go into now they were actually able to get good results by just putting together a straight seek to see new machine translation system.", "tokens": [37043, 2372, 295, 1412, 2603, 2372, 295, 3097, 661, 11733, 300, 286, 500, 380, 528, 281, 352, 666, 586, 436, 645, 767, 1075, 281, 483, 665, 3542, 538, 445, 3372, 1214, 257, 2997, 8075, 281, 536, 777, 3479, 12853, 1185, 13], "temperature": 0.0, "avg_logprob": -0.22467286851671006, "compression_ratio": 1.4689655172413794, "no_speech_prob": 0.00023355263692792505}, {"id": 83, "seek": 68500, "start": 685.0, "end": 710.0, "text": " But very soon after that, in fact, later this same year, a group from Montreal, Dima, but now can you show your show of end you introduce sequence the sequence model with attention and it was just obviously better so attention significantly improved your machine translation performance and that sort of makes sense.", "tokens": [583, 588, 2321, 934, 300, 11, 294, 1186, 11, 1780, 341, 912, 1064, 11, 257, 1594, 490, 34180, 11, 413, 4775, 11, 457, 586, 393, 291, 855, 428, 855, 295, 917, 291, 5366, 8310, 264, 8310, 2316, 365, 3202, 293, 309, 390, 445, 2745, 1101, 370, 3202, 10591, 9689, 428, 3479, 12853, 3389, 293, 300, 1333, 295, 1669, 2020, 13], "temperature": 0.0, "avg_logprob": -0.3170384168624878, "compression_ratio": 1.572139303482587, "no_speech_prob": 2.7510719519341365e-05}, {"id": 84, "seek": 71000, "start": 710.0, "end": 739.0, "text": " That allows the decoder to focus on parts of the source sentence. So I think about us giving you a much more human like model of doing machine translation because you know exactly what a human translator would do is you read the source sentence you've got an idea of what's about you start writing the first couple of words of translation and then what you do is is you look back to see what exactly it said as the sort of modifiers of the nouns.", "tokens": [663, 4045, 264, 979, 19866, 281, 1879, 322, 3166, 295, 264, 4009, 8174, 13, 407, 286, 519, 466, 505, 2902, 291, 257, 709, 544, 1952, 411, 2316, 295, 884, 3479, 12853, 570, 291, 458, 2293, 437, 257, 1952, 35223, 576, 360, 307, 291, 1401, 264, 4009, 8174, 291, 600, 658, 364, 1558, 295, 437, 311, 466, 291, 722, 3579, 264, 700, 1916, 295, 2283, 295, 12853, 293, 550, 437, 291, 360, 307, 307, 291, 574, 646, 281, 536, 437, 2293, 309, 848, 382, 264, 1333, 295, 1072, 23463, 295, 264, 48184, 13], "temperature": 0.0, "avg_logprob": -0.2220238447189331, "compression_ratio": 1.7911646586345382, "no_speech_prob": 0.0001681602734606713}, {"id": 85, "seek": 73900, "start": 739.0, "end": 755.0, "text": " Translate the next few words. Technically people think of it as solving the bottleneck problem because attention now allows us full access to the entire source in the state and we can get any information that we need.", "tokens": [6531, 17593, 264, 958, 1326, 2283, 13, 42494, 561, 519, 295, 309, 382, 12606, 264, 44641, 547, 1154, 570, 3202, 586, 4045, 505, 1577, 2105, 281, 264, 2302, 4009, 294, 264, 1785, 293, 321, 393, 483, 604, 1589, 300, 321, 643, 13], "temperature": 0.0, "avg_logprob": -0.16474239861787254, "compression_ratio": 1.601063829787234, "no_speech_prob": 0.00040361128048971295}, {"id": 86, "seek": 73900, "start": 755.0, "end": 760.0, "text": " It's not the case that all information has to be encoded in the final hidden state.", "tokens": [467, 311, 406, 264, 1389, 300, 439, 1589, 575, 281, 312, 2058, 12340, 294, 264, 2572, 7633, 1785, 13], "temperature": 0.0, "avg_logprob": -0.16474239861787254, "compression_ratio": 1.601063829787234, "no_speech_prob": 0.00040361128048971295}, {"id": 87, "seek": 76000, "start": 760.0, "end": 771.0, "text": " It also helps with the vanishing gradient problem. So effectively now we have shortcuts back to every hidden state of the encoder.", "tokens": [467, 611, 3665, 365, 264, 3161, 3807, 16235, 1154, 13, 407, 8659, 586, 321, 362, 34620, 646, 281, 633, 7633, 1785, 295, 264, 2058, 19866, 13], "temperature": 0.0, "avg_logprob": -0.10759098746559836, "compression_ratio": 1.58125, "no_speech_prob": 0.00023742449411656708}, {"id": 88, "seek": 76000, "start": 771.0, "end": 779.0, "text": " And so therefore there's always a short path with gradient flow and that greatly mitigates the vanishing gradient problem.", "tokens": [400, 370, 4412, 456, 311, 1009, 257, 2099, 3100, 365, 16235, 3095, 293, 300, 14147, 15699, 1024, 264, 3161, 3807, 16235, 1154, 13], "temperature": 0.0, "avg_logprob": -0.10759098746559836, "compression_ratio": 1.58125, "no_speech_prob": 0.00023742449411656708}, {"id": 89, "seek": 77900, "start": 779.0, "end": 795.0, "text": " The final neat thing is that attention provides some effective interpretability to sequence the sequence models because by looking at the tension distribution we can see what the code was focusing on.", "tokens": [440, 2572, 10654, 551, 307, 300, 3202, 6417, 512, 4942, 7302, 2310, 281, 8310, 264, 8310, 5245, 570, 538, 1237, 412, 264, 8980, 7316, 321, 393, 536, 437, 264, 3089, 390, 8416, 322, 13], "temperature": 0.0, "avg_logprob": -0.15040171773810135, "compression_ratio": 1.4598540145985401, "no_speech_prob": 0.00019974149472545832}, {"id": 90, "seek": 79500, "start": 795.0, "end": 819.0, "text": " So in a softballistic way we get the free through the operation of the model a soft alignment as to which words translate which words. So in this example of the French sentence is being translated as he hit me with a pie where there's sort of a single verb here in the French, which is kind of like a English sometimes people on play day use pie.", "tokens": [407, 294, 257, 2787, 3129, 3142, 636, 321, 483, 264, 1737, 807, 264, 6916, 295, 264, 2316, 257, 2787, 18515, 382, 281, 597, 2283, 13799, 597, 2283, 13, 407, 294, 341, 1365, 295, 264, 5522, 8174, 307, 885, 16805, 382, 415, 2045, 385, 365, 257, 1730, 689, 456, 311, 1333, 295, 257, 2167, 9595, 510, 294, 264, 5522, 11, 597, 307, 733, 295, 411, 257, 3669, 2171, 561, 322, 862, 786, 764, 1730, 13], "temperature": 0.0, "avg_logprob": -0.29758724799522984, "compression_ratio": 1.6555023923444976, "no_speech_prob": 7.09419182385318e-05}, {"id": 91, "seek": 81900, "start": 819.0, "end": 839.0, "text": " So the words are sort of like saying he the pie that the model is getting that eilers translators he the most being translators me and essentially on tarte is being translated as it with a pie.", "tokens": [407, 264, 2283, 366, 1333, 295, 411, 1566, 415, 264, 1730, 300, 264, 2316, 307, 1242, 300, 308, 388, 433, 5105, 3391, 415, 264, 881, 885, 5105, 3391, 385, 293, 4476, 322, 256, 11026, 307, 885, 16805, 382, 309, 365, 257, 1730, 13], "temperature": 0.0, "avg_logprob": -0.5337402262586228, "compression_ratio": 1.5819672131147542, "no_speech_prob": 0.00021242118964437395}, {"id": 92, "seek": 83900, "start": 839.0, "end": 867.0, "text": " The amazing thing is you know the model was never told about any of these alignments there was no explicit separate model which was trying to learn these alignments as in the earliest statistical phrase based systems we just built a sequence the secret model with the tension and said here are a lot of translating sentences start running back back prop and try and get", "tokens": [440, 2243, 551, 307, 291, 458, 264, 2316, 390, 1128, 1907, 466, 604, 295, 613, 7975, 1117, 456, 390, 572, 13691, 4994, 2316, 597, 390, 1382, 281, 1466, 613, 7975, 1117, 382, 294, 264, 20573, 22820, 9535, 2361, 3652, 321, 445, 3094, 257, 8310, 264, 4054, 2316, 365, 264, 8980, 293, 848, 510, 366, 257, 688, 295, 35030, 16579, 722, 2614, 646, 646, 2365, 293, 853, 293, 483], "temperature": 0.0, "avg_logprob": -0.26185239685906303, "compression_ratio": 1.732394366197183, "no_speech_prob": 3.878373172483407e-05}, {"id": 93, "seek": 86700, "start": 867.0, "end": 883.0, "text": " the sentences and it doesn't learn by itself in deciding where it's best to pay attention what is a good alignment between the source and the target languages.", "tokens": [264, 16579, 293, 309, 1177, 380, 1466, 538, 2564, 294, 17990, 689, 309, 311, 1151, 281, 1689, 3202, 437, 307, 257, 665, 18515, 1296, 264, 4009, 293, 264, 3779, 8650, 13], "temperature": 0.0, "avg_logprob": -0.2833111354282924, "compression_ratio": 1.3706896551724137, "no_speech_prob": 0.0004538086068350822}, {"id": 94, "seek": 88300, "start": 883.0, "end": 912.0, "text": " Okay so that's the basic idea of attention I want to go a bit more into the complex unit of attention since it's such an important idea that will see a lot as we continue now of the course right so there are several attention variance but first of all you know what's the common part so we have some value.", "tokens": [1033, 370, 300, 311, 264, 3875, 1558, 295, 3202, 286, 528, 281, 352, 257, 857, 544, 666, 264, 3997, 4985, 295, 3202, 1670, 309, 311, 1270, 364, 1021, 1558, 300, 486, 536, 257, 688, 382, 321, 2354, 586, 295, 264, 1164, 558, 370, 456, 366, 2940, 3202, 21977, 457, 700, 295, 439, 291, 458, 437, 311, 264, 2689, 644, 370, 321, 362, 512, 2158, 13], "temperature": 0.0, "avg_logprob": -0.23564200470412988, "compression_ratio": 1.6363636363636365, "no_speech_prob": 4.126004932913929e-05}, {"id": 95, "seek": 91200, "start": 912.0, "end": 932.0, "text": " Values some vectors that we're going to be sort of using as our memory and we have a query vector so attention always involves that we calculate the attention stores and turn those into a probability distribution with a softmax", "tokens": [7188, 1247, 512, 18875, 300, 321, 434, 516, 281, 312, 1333, 295, 1228, 382, 527, 4675, 293, 321, 362, 257, 14581, 8062, 370, 3202, 1009, 11626, 300, 321, 8873, 264, 3202, 9512, 293, 1261, 729, 666, 257, 8482, 7316, 365, 257, 2787, 41167], "temperature": 0.0, "avg_logprob": -0.18680649615348655, "compression_ratio": 1.523489932885906, "no_speech_prob": 4.466352766030468e-05}, {"id": 96, "seek": 93200, "start": 932.0, "end": 945.0, "text": " and we use attention distribution to calculate and weighted some of the elements in our memory giving us an attention output.", "tokens": [293, 321, 764, 3202, 7316, 281, 8873, 293, 32807, 512, 295, 264, 4959, 294, 527, 4675, 2902, 505, 364, 3202, 5598, 13], "temperature": 0.0, "avg_logprob": -0.2012590875430983, "compression_ratio": 1.577922077922078, "no_speech_prob": 2.3547087039332837e-05}, {"id": 97, "seek": 93200, "start": 945.0, "end": 955.0, "text": " So the main place where you're immediately seen variation and attention is how do you compute these attention stores.", "tokens": [407, 264, 2135, 1081, 689, 291, 434, 4258, 1612, 12990, 293, 3202, 307, 577, 360, 291, 14722, 613, 3202, 9512, 13], "temperature": 0.0, "avg_logprob": -0.2012590875430983, "compression_ratio": 1.577922077922078, "no_speech_prob": 2.3547087039332837e-05}, {"id": 98, "seek": 95500, "start": 955.0, "end": 974.0, "text": " So let's go through some of the ways that that's done so the simplest most obvious way to do it is to say let's just take the dot product between the given the current in state of the decoder and all the vectors here the", "tokens": [407, 718, 311, 352, 807, 512, 295, 264, 2098, 300, 300, 311, 1096, 370, 264, 22811, 881, 6322, 636, 281, 360, 309, 307, 281, 584, 718, 311, 445, 747, 264, 5893, 1674, 1296, 264, 2212, 264, 2190, 294, 1785, 295, 264, 979, 19866, 293, 439, 264, 18875, 510, 264], "temperature": 0.0, "avg_logprob": -0.19791640875474462, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.00011950637417612597}, {"id": 99, "seek": 97400, "start": 974.0, "end": 1002.0, "text": " source and code of vectors that we are putting attention over and you know that sort of makes sense right this is dot product is our most basic similarity store but it seems like there's something wrong with this and that is you know it seems wrong for you to want to think that the entirety of the source hidden states and the entirety of the target hidden states is all", "tokens": [4009, 293, 3089, 295, 18875, 300, 321, 366, 3372, 3202, 670, 293, 291, 458, 300, 1333, 295, 1669, 2020, 558, 341, 307, 5893, 1674, 307, 527, 881, 3875, 32194, 3531, 457, 309, 2544, 411, 456, 311, 746, 2085, 365, 341, 293, 300, 307, 291, 458, 309, 2544, 2085, 337, 291, 281, 528, 281, 519, 300, 264, 31557, 295, 264, 4009, 7633, 4368, 293, 264, 31557, 295, 264, 3779, 7633, 4368, 307, 439], "temperature": 0.0, "avg_logprob": -0.1868612013365093, "compression_ratio": 1.8186274509803921, "no_speech_prob": 3.3194224670296535e-05}, {"id": 100, "seek": 100200, "start": 1002.0, "end": 1025.0, "text": " having information about where to attend to because really these LSTMs are doing multiple things so the LSTMs are carrying forward information along their own sequence to help you know record information about the past so it can be used in the future they have information in the hidden state to tell you which output you should", "tokens": [1419, 1589, 466, 689, 281, 6888, 281, 570, 534, 613, 441, 6840, 26386, 366, 884, 3866, 721, 370, 264, 441, 6840, 26386, 366, 9792, 2128, 1589, 2051, 641, 1065, 8310, 281, 854, 291, 458, 2136, 1589, 466, 264, 1791, 370, 309, 393, 312, 1143, 294, 264, 2027, 436, 362, 1589, 294, 264, 7633, 1785, 281, 980, 291, 597, 5598, 291, 820], "temperature": 0.0, "avg_logprob": -0.22359940455510066, "compression_ratio": 1.772972972972973, "no_speech_prob": 0.0006550890393555164}, {"id": 101, "seek": 102500, "start": 1025.0, "end": 1054.0, "text": " generate next and perhaps they're encoding some information that will serve as a kind of a query key for getting out information by attention from the source hidden states so it seems like probably we only want to use some of the information in them to calculate our attention store and so that's the kind of approach that was taken very quickly in subsequent work.", "tokens": [8460, 958, 293, 4317, 436, 434, 43430, 512, 1589, 300, 486, 4596, 382, 257, 733, 295, 257, 14581, 2141, 337, 1242, 484, 1589, 538, 3202, 490, 264, 4009, 7633, 4368, 370, 309, 2544, 411, 1391, 321, 787, 528, 281, 764, 512, 295, 264, 1589, 294, 552, 281, 8873, 527, 3202, 3531, 293, 370, 300, 311, 264, 733, 295, 3109, 300, 390, 2726, 588, 2661, 294, 19962, 589, 13], "temperature": 0.0, "avg_logprob": -0.15874502393934461, "compression_ratio": 1.6820276497695852, "no_speech_prob": 6.200776260811836e-05}, {"id": 102, "seek": 105400, "start": 1054.0, "end": 1083.0, "text": " So the next year, Tang Luang working with me explore this ideas now normally called multi picket of attention so for multi picket of attention we put an extra matrix in the middle of our dot product so this gives us a matrix of learnable parameters and so effectively inside this matrix we can learn what parts of S to pay attention to and what parts of", "tokens": [407, 264, 958, 1064, 11, 22063, 5047, 656, 1364, 365, 385, 6839, 341, 3487, 586, 5646, 1219, 4825, 1888, 302, 295, 3202, 370, 337, 4825, 1888, 302, 295, 3202, 321, 829, 364, 2857, 8141, 294, 264, 2808, 295, 527, 5893, 1674, 370, 341, 2709, 505, 257, 8141, 295, 1466, 712, 9834, 293, 370, 8659, 1854, 341, 8141, 321, 393, 1466, 437, 3166, 295, 318, 281, 1689, 3202, 281, 293, 437, 3166, 295], "temperature": 0.0, "avg_logprob": -0.31291934063560084, "compression_ratio": 1.7389162561576355, "no_speech_prob": 0.00012878578854724765}, {"id": 103, "seek": 108300, "start": 1083.0, "end": 1112.0, "text": " each to pay attention to when calculating the similarity and hence the attention store between the source hidden states and then depot it and say so that was a is a good thing which in general works much better but there's perhaps a problem with that which is you know maybe this W matrix has too many parameters you know because we've got", "tokens": [1184, 281, 1689, 3202, 281, 562, 28258, 264, 32194, 293, 16678, 264, 3202, 3531, 1296, 264, 4009, 7633, 4368, 293, 550, 1367, 310, 309, 293, 584, 370, 300, 390, 257, 307, 257, 665, 551, 597, 294, 2674, 1985, 709, 1101, 457, 456, 311, 4317, 257, 1154, 365, 300, 597, 307, 291, 458, 1310, 341, 343, 8141, 575, 886, 867, 9834, 291, 458, 570, 321, 600, 658], "temperature": 0.0, "avg_logprob": -0.25264819008963446, "compression_ratio": 1.661764705882353, "no_speech_prob": 7.021849160082638e-05}, {"id": 104, "seek": 111200, "start": 1112.0, "end": 1139.0, "text": " these two vectors which in the simple case of both of the same dimension D that they don't have to keep the same and you know we're now putting in D square new parameters for the matrix W and that sort of feels like it's too many because you know arguably it seems like we should only have about 2D parameters you know one D saying how much attention to pay different parts of S and the other one how much attention to pay the parts of age.", "tokens": [613, 732, 18875, 597, 294, 264, 2199, 1389, 295, 1293, 295, 264, 912, 10139, 413, 300, 436, 500, 380, 362, 281, 1066, 264, 912, 293, 291, 458, 321, 434, 586, 3372, 294, 413, 3732, 777, 9834, 337, 264, 8141, 343, 293, 300, 1333, 295, 3417, 411, 309, 311, 886, 867, 570, 291, 458, 26771, 309, 2544, 411, 321, 820, 787, 362, 466, 568, 35, 9834, 291, 458, 472, 413, 1566, 577, 709, 3202, 281, 1689, 819, 3166, 295, 318, 293, 264, 661, 472, 577, 709, 3202, 281, 1689, 264, 3166, 295, 3205, 13], "temperature": 0.0, "avg_logprob": -0.2161265697675882, "compression_ratio": 1.7886178861788617, "no_speech_prob": 0.0001968534052139148}, {"id": 105, "seek": 113900, "start": 1139.0, "end": 1163.0, "text": " You know there's a reason for more by having a whole matrix here you're not only doing the scoring element wise right you can have any element of S being combined with any element of the H vector and see that as a useful part of your similarity store but there's still a lot of parameters so bit after that.", "tokens": [509, 458, 456, 311, 257, 1778, 337, 544, 538, 1419, 257, 1379, 8141, 510, 291, 434, 406, 787, 884, 264, 22358, 4478, 10829, 558, 291, 393, 362, 604, 4478, 295, 318, 885, 9354, 365, 604, 4478, 295, 264, 389, 8062, 293, 536, 300, 382, 257, 4420, 644, 295, 428, 32194, 3531, 457, 456, 311, 920, 257, 688, 295, 9834, 370, 857, 934, 300, 13], "temperature": 0.0, "avg_logprob": -0.1691902104546042, "compression_ratio": 1.6157894736842104, "no_speech_prob": 0.0006553456769324839}, {"id": 106, "seek": 116300, "start": 1163.0, "end": 1192.0, "text": " People here well maybe thing with less parameters so if you have a matrix W and you'd like it to have less parameters the obvious linear algebra thing to do is to say okay we can model W as you transpose the where you and the low ranks skinny matrices so we can choose some number K for how skinny these matrices are going to be.", "tokens": [3432, 510, 731, 1310, 551, 365, 1570, 9834, 370, 498, 291, 362, 257, 8141, 343, 293, 291, 1116, 411, 309, 281, 362, 1570, 9834, 264, 6322, 8213, 21989, 551, 281, 360, 307, 281, 584, 1392, 321, 393, 2316, 343, 382, 291, 25167, 264, 689, 291, 293, 264, 2295, 21406, 25193, 32284, 370, 321, 393, 2826, 512, 1230, 591, 337, 577, 25193, 613, 32284, 366, 516, 281, 312, 13], "temperature": 0.0, "avg_logprob": -0.26220038202073837, "compression_ratio": 1.6616161616161615, "no_speech_prob": 0.00010494901653146371}, {"id": 107, "seek": 119200, "start": 1192.0, "end": 1208.0, "text": " And they can be K times D matrices and then we're getting a sort of a reduced rank matrix here and so we have a lot let we end up with the D by D matrix but it has a lot less parameters in it.", "tokens": [400, 436, 393, 312, 591, 1413, 413, 32284, 293, 550, 321, 434, 1242, 257, 1333, 295, 257, 9212, 6181, 8141, 510, 293, 370, 321, 362, 257, 688, 718, 321, 917, 493, 365, 264, 413, 538, 413, 8141, 457, 309, 575, 257, 688, 1570, 9834, 294, 309, 13], "temperature": 0.0, "avg_logprob": -0.11563227223415001, "compression_ratio": 1.4328358208955223, "no_speech_prob": 0.00010066690447274595}, {"id": 108, "seek": 120800, "start": 1208.0, "end": 1235.0, "text": " And so people explore that and you know at that point if you just do a little bit of basic linear algebra what we have here is exactly the same source in vector and the decoder in vector and projecting each of them with a low rank linear projection and then taking the dot product of the of the projections.", "tokens": [400, 370, 561, 6839, 300, 293, 291, 458, 412, 300, 935, 498, 291, 445, 360, 257, 707, 857, 295, 3875, 8213, 21989, 437, 321, 362, 510, 307, 2293, 264, 912, 4009, 294, 8062, 293, 264, 979, 19866, 294, 8062, 293, 43001, 1184, 295, 552, 365, 257, 2295, 6181, 8213, 22743, 293, 550, 1940, 264, 5893, 1674, 295, 264, 295, 264, 32371, 13], "temperature": 0.0, "avg_logprob": -0.15742247032396722, "compression_ratio": 1.7443181818181819, "no_speech_prob": 3.022569217137061e-05}, {"id": 109, "seek": 123500, "start": 1235.0, "end": 1248.0, "text": " And if you remember this equation here to next Tuesday's lecture you'll see that that's actually exactly what's happening in transform models.", "tokens": [400, 498, 291, 1604, 341, 5367, 510, 281, 958, 10017, 311, 7991, 291, 603, 536, 300, 300, 311, 767, 2293, 437, 311, 2737, 294, 4088, 5245, 13], "temperature": 0.0, "avg_logprob": -0.20718122297717678, "compression_ratio": 1.2566371681415929, "no_speech_prob": 0.00012721456005237997}, {"id": 110, "seek": 124800, "start": 1248.0, "end": 1258.0, "text": " And none of these were actually the original form of attention that was suggested by button now at our but button now.", "tokens": [400, 6022, 295, 613, 645, 767, 264, 3380, 1254, 295, 3202, 300, 390, 10945, 538, 2960, 586, 412, 527, 457, 2960, 586, 13], "temperature": 0.0, "avg_logprob": -0.34152206621671977, "compression_ratio": 1.7069767441860466, "no_speech_prob": 2.7498290364746936e-05}, {"id": 111, "seek": 124800, "start": 1258.0, "end": 1277.0, "text": " And how suggested is the way we could calculate an attention score is by taking the two vectors multiply each by a matrix putting and adding them putting to a 10 H function giving us another vector which we then dot product with yet another vector.", "tokens": [400, 577, 10945, 307, 264, 636, 321, 727, 8873, 364, 3202, 6175, 307, 538, 1940, 264, 732, 18875, 12972, 1184, 538, 257, 8141, 3372, 293, 5127, 552, 3372, 281, 257, 1266, 389, 2445, 2902, 505, 1071, 8062, 597, 321, 550, 5893, 1674, 365, 1939, 1071, 8062, 13], "temperature": 0.0, "avg_logprob": -0.34152206621671977, "compression_ratio": 1.7069767441860466, "no_speech_prob": 2.7498290364746936e-05}, {"id": 112, "seek": 127700, "start": 1277.0, "end": 1292.0, "text": " And we get out of weight so in the literature compares attention variance this one is normally referred to as added of attention I've always thought that's a really lazy name.", "tokens": [400, 321, 483, 484, 295, 3364, 370, 294, 264, 10394, 38334, 3202, 21977, 341, 472, 307, 5646, 10839, 281, 382, 3869, 295, 3202, 286, 600, 1009, 1194, 300, 311, 257, 534, 14847, 1315, 13], "temperature": 0.0, "avg_logprob": -0.25998497009277344, "compression_ratio": 1.3565891472868217, "no_speech_prob": 0.00018516593263484538}, {"id": 113, "seek": 129200, "start": 1292.0, "end": 1320.0, "text": " And at least it never made sense to me because really what you're doing here is that you're using a neural net layer that calculates an attention score right this looks just like the kind of neural net layers that we use when we wanted to calculate scores such as when we're doing simple sort of speed for networks of the beginning and we wanted to calculate scores.", "tokens": [400, 412, 1935, 309, 1128, 1027, 2020, 281, 385, 570, 534, 437, 291, 434, 884, 510, 307, 300, 291, 434, 1228, 257, 18161, 2533, 4583, 300, 4322, 1024, 364, 3202, 6175, 558, 341, 1542, 445, 411, 264, 733, 295, 18161, 2533, 7914, 300, 321, 764, 562, 321, 1415, 281, 8873, 13444, 1270, 382, 562, 321, 434, 884, 2199, 1333, 295, 3073, 337, 9590, 295, 264, 2863, 293, 321, 1415, 281, 8873, 13444, 13], "temperature": 0.0, "avg_logprob": -0.1941853312702922, "compression_ratio": 1.811881188118812, "no_speech_prob": 5.826048072776757e-05}, {"id": 114, "seek": 132000, "start": 1320.0, "end": 1335.0, "text": " And in a assignment for which you should look at really soon if you haven't looked at it yet actually one of the things in the written problems of assignment for is thinking about these different attention variance.", "tokens": [400, 294, 257, 15187, 337, 597, 291, 820, 574, 412, 534, 2321, 498, 291, 2378, 380, 2956, 412, 309, 1939, 767, 472, 295, 264, 721, 294, 264, 3720, 2740, 295, 15187, 337, 307, 1953, 466, 613, 819, 3202, 21977, 13], "temperature": 0.0, "avg_logprob": -0.21253906596790662, "compression_ratio": 1.5140845070422535, "no_speech_prob": 0.00014874309999868274}, {"id": 115, "seek": 133500, "start": 1335.0, "end": 1358.0, "text": " Okay, yeah, so I've only presented this idea of attention as something good for machine translation to use between the source of the target sequence models except for that when when I tried to answer the question but really this is a general deep learning technique.", "tokens": [1033, 11, 1338, 11, 370, 286, 600, 787, 8212, 341, 1558, 295, 3202, 382, 746, 665, 337, 3479, 12853, 281, 764, 1296, 264, 4009, 295, 264, 3779, 8310, 5245, 3993, 337, 300, 562, 562, 286, 3031, 281, 1867, 264, 1168, 457, 534, 341, 307, 257, 2674, 2452, 2539, 6532, 13], "temperature": 0.0, "avg_logprob": -0.17849501857051142, "compression_ratio": 1.4943820224719102, "no_speech_prob": 3.9407976146321744e-05}, {"id": 116, "seek": 135800, "start": 1358.0, "end": 1385.0, "text": " Right so it's not only great for that application you can use it in many architectures not just sequence sequence and you can use it for many tasks not just for machine translation so anytime that you have a bunch of vector values and you have some other vector that you can regards a query attention as a technique to compute a value form.", "tokens": [1779, 370, 309, 311, 406, 787, 869, 337, 300, 3861, 291, 393, 764, 309, 294, 867, 6331, 1303, 406, 445, 8310, 8310, 293, 291, 393, 764, 309, 337, 867, 9608, 406, 445, 337, 3479, 12853, 370, 13038, 300, 291, 362, 257, 3840, 295, 8062, 4190, 293, 291, 362, 512, 661, 8062, 300, 291, 393, 14258, 257, 14581, 3202, 382, 257, 6532, 281, 14722, 257, 2158, 1254, 13], "temperature": 0.0, "avg_logprob": -0.19539853216896594, "compression_ratio": 1.780104712041885, "no_speech_prob": 6.39751524431631e-05}, {"id": 117, "seek": 138500, "start": 1385.0, "end": 1393.0, "text": " That you can have the query attend to the values.", "tokens": [663, 291, 393, 362, 264, 14581, 6888, 281, 264, 4190, 13], "temperature": 0.0, "avg_logprob": -0.13859891891479492, "compression_ratio": 1.7542857142857142, "no_speech_prob": 9.026437328429893e-05}, {"id": 118, "seek": 138500, "start": 1393.0, "end": 1412.0, "text": " And so you know once you think about it like that you can think about attention as a kind of memory access mechanism that the weight and some that attention calculates gives you a kind of selective summary of some of the information contained in the values.", "tokens": [400, 370, 291, 458, 1564, 291, 519, 466, 309, 411, 300, 291, 393, 519, 466, 3202, 382, 257, 733, 295, 4675, 2105, 7513, 300, 264, 3364, 293, 512, 300, 3202, 4322, 1024, 2709, 291, 257, 733, 295, 33930, 12691, 295, 512, 295, 264, 1589, 16212, 294, 264, 4190, 13], "temperature": 0.0, "avg_logprob": -0.13859891891479492, "compression_ratio": 1.7542857142857142, "no_speech_prob": 9.026437328429893e-05}, {"id": 119, "seek": 141200, "start": 1412.0, "end": 1438.0, "text": " And the query tells you which values to pay attention to so on the one hand you could say this is a good general technique anytime you have a whole bunch of vectors and you want to just get one vector out well you know the dumbest thing you can do is just average them all or do max pooling take the element wise max of each element.", "tokens": [400, 264, 14581, 5112, 291, 597, 4190, 281, 1689, 3202, 281, 370, 322, 264, 472, 1011, 291, 727, 584, 341, 307, 257, 665, 2674, 6532, 13038, 291, 362, 257, 1379, 3840, 295, 18875, 293, 291, 528, 281, 445, 483, 472, 8062, 484, 731, 291, 458, 264, 10316, 377, 551, 291, 393, 360, 307, 445, 4274, 552, 439, 420, 360, 11469, 7005, 278, 747, 264, 4478, 10829, 11469, 295, 1184, 4478, 13], "temperature": 0.0, "avg_logprob": -0.11766990661621093, "compression_ratio": 1.6403940886699508, "no_speech_prob": 0.00014419606304727495}, {"id": 120, "seek": 143800, "start": 1438.0, "end": 1455.0, "text": " This gives you a much more flexible way to combine them together in as to a single vector and so you can think of it as actually giving us an operation that's sort of much more like a conventional computer and it's memory access.", "tokens": [639, 2709, 291, 257, 709, 544, 11358, 636, 281, 10432, 552, 1214, 294, 382, 281, 257, 2167, 8062, 293, 370, 291, 393, 519, 295, 309, 382, 767, 2902, 505, 364, 6916, 300, 311, 1333, 295, 709, 544, 411, 257, 16011, 3820, 293, 309, 311, 4675, 2105, 13], "temperature": 0.0, "avg_logprob": -0.12517398011450673, "compression_ratio": 1.4967320261437909, "no_speech_prob": 0.00014422170352190733}, {"id": 121, "seek": 145500, "start": 1455.0, "end": 1481.0, "text": " So we can think of as like our RAM and have a feel like an associate of memory right we have a query vector and the query vector access a sort of associate of memory pointer that says how much weight to put on different parts of RAM and then we sort of proportionally retrieve those bits of RAM to get a new value.", "tokens": [407, 321, 393, 519, 295, 382, 411, 527, 14561, 293, 362, 257, 841, 411, 364, 14644, 295, 4675, 558, 321, 362, 257, 14581, 8062, 293, 264, 14581, 8062, 2105, 257, 1333, 295, 14644, 295, 4675, 23918, 300, 1619, 577, 709, 3364, 281, 829, 322, 819, 3166, 295, 14561, 293, 550, 321, 1333, 295, 16068, 379, 30254, 729, 9239, 295, 14561, 281, 483, 257, 777, 2158, 13], "temperature": 0.0, "avg_logprob": -0.27130680084228515, "compression_ratio": 1.679144385026738, "no_speech_prob": 1.8054792235489003e-05}, {"id": 122, "seek": 148100, "start": 1481.0, "end": 1489.0, "text": " Another cool thing about attention that i'll just mention here is that.", "tokens": [3996, 1627, 551, 466, 3202, 300, 741, 603, 445, 2152, 510, 307, 300, 13], "temperature": 0.0, "avg_logprob": -0.20452740457322863, "compression_ratio": 1.0441176470588236, "no_speech_prob": 2.280761327710934e-05}, {"id": 123, "seek": 148900, "start": 1489.0, "end": 1515.0, "text": " You know attention is actually a genuinely new deep learning idea from the last decade middle of the last decade there's sort of a slightly depressing fact about deep learning that a lot of what's been done and deep learning in recent years wasn't actually new ideas there are ideas that were developed in the 80s and 90s is just people were able to get much use of them then because.", "tokens": [509, 458, 3202, 307, 767, 257, 17839, 777, 2452, 2539, 1558, 490, 264, 1036, 10378, 2808, 295, 264, 1036, 10378, 456, 311, 1333, 295, 257, 4748, 36355, 1186, 466, 2452, 2539, 300, 257, 688, 295, 437, 311, 668, 1096, 293, 2452, 2539, 294, 5162, 924, 2067, 380, 767, 777, 3487, 456, 366, 3487, 300, 645, 4743, 294, 264, 4688, 82, 293, 4289, 82, 307, 445, 561, 645, 1075, 281, 483, 709, 764, 295, 552, 550, 570, 13], "temperature": 0.0, "avg_logprob": -0.12590661460970654, "compression_ratio": 1.761467889908257, "no_speech_prob": 5.822582897963002e-05}, {"id": 124, "seek": 151500, "start": 1515.0, "end": 1543.0, "text": " The computers were too small on the amount of data they had was too small and they were sort of reinvented in the two while not reinvented but they were given you life in the 2010s where attention is genuinely new idea from the 2010s and we'll see sort of next next week how it sort of then turns into this huge idea of transforms it all.", "tokens": [440, 10807, 645, 886, 1359, 322, 264, 2372, 295, 1412, 436, 632, 390, 886, 1359, 293, 436, 645, 1333, 295, 33477, 292, 294, 264, 732, 1339, 406, 33477, 292, 457, 436, 645, 2212, 291, 993, 294, 264, 9657, 82, 689, 3202, 307, 17839, 777, 1558, 490, 264, 9657, 82, 293, 321, 603, 536, 1333, 295, 958, 958, 1243, 577, 309, 1333, 295, 550, 4523, 666, 341, 2603, 1558, 295, 35592, 309, 439, 13], "temperature": 0.0, "avg_logprob": -0.2293776970405083, "compression_ratio": 1.7512953367875648, "no_speech_prob": 0.00017660038429312408}, {"id": 125, "seek": 154300, "start": 1543.0, "end": 1561.0, "text": " Okay so that's all I wanted to say about attention and now i'm going to get on and go and talk about final projects and all this stuff about that so am I good to start on to other stuff.", "tokens": [1033, 370, 300, 311, 439, 286, 1415, 281, 584, 466, 3202, 293, 586, 741, 478, 516, 281, 483, 322, 293, 352, 293, 751, 466, 2572, 4455, 293, 439, 341, 1507, 466, 300, 370, 669, 286, 665, 281, 722, 322, 281, 661, 1507, 13], "temperature": 0.0, "avg_logprob": -0.19870043815450467, "compression_ratio": 1.4645669291338583, "no_speech_prob": 0.00017081336409319192}, {"id": 126, "seek": 156100, "start": 1561.0, "end": 1587.0, "text": " Okay so this is a quick reminder so don't forget this is about coursework so you're right in the middle or past halfway almost going through the assignments and there were about half the grade but the other half of the grade comes from the final project which i'm going to talk about today and that gets without.", "tokens": [1033, 370, 341, 307, 257, 1702, 13548, 370, 500, 380, 2870, 341, 307, 466, 1164, 1902, 370, 291, 434, 558, 294, 264, 2808, 420, 1791, 15461, 1920, 516, 807, 264, 22546, 293, 456, 645, 466, 1922, 264, 7204, 457, 264, 661, 1922, 295, 264, 7204, 1487, 490, 264, 2572, 1716, 597, 741, 478, 516, 281, 751, 466, 965, 293, 300, 2170, 1553, 13], "temperature": 0.0, "avg_logprob": -0.190187568095193, "compression_ratio": 1.6335078534031413, "no_speech_prob": 5.802018858958036e-05}, {"id": 127, "seek": 158700, "start": 1587.0, "end": 1608.0, "text": " So there's a project proposal which we've handed out instructions for today it's worth 5% there's a milestone that's worth 5% in the middle and there's a report at the end which is the big part which is worth 30% and then we also want to have a represent patient of your project with people can easily browse so in.", "tokens": [407, 456, 311, 257, 1716, 11494, 597, 321, 600, 16013, 484, 9415, 337, 965, 309, 311, 3163, 1025, 4, 456, 311, 257, 28048, 300, 311, 3163, 1025, 4, 294, 264, 2808, 293, 456, 311, 257, 2275, 412, 264, 917, 597, 307, 264, 955, 644, 597, 307, 3163, 2217, 4, 293, 550, 321, 611, 528, 281, 362, 257, 2906, 4537, 295, 428, 1716, 365, 561, 393, 3612, 31442, 370, 294, 13], "temperature": 0.0, "avg_logprob": -0.14241554930403427, "compression_ratio": 1.6578947368421053, "no_speech_prob": 0.00023317457817029208}, {"id": 128, "seek": 160800, "start": 1608.0, "end": 1636.0, "text": " In normal years when there are people on campus we had a post-desessions in the class which is seems like we just can't use what you do in the current world we want to put up a website where there's sort of descriptions each project some nice picture of what you've done and then we can link to your project right up and so you also then get 3% for that that's mainly just to make sure you deliver it comes down to it.", "tokens": [682, 2710, 924, 562, 456, 366, 561, 322, 4828, 321, 632, 257, 2183, 12, 14792, 9069, 294, 264, 1508, 597, 307, 2544, 411, 321, 445, 393, 380, 764, 437, 291, 360, 294, 264, 2190, 1002, 321, 528, 281, 829, 493, 257, 3144, 689, 456, 311, 1333, 295, 24406, 1184, 1716, 512, 1481, 3036, 295, 437, 291, 600, 1096, 293, 550, 321, 393, 2113, 281, 428, 1716, 558, 493, 293, 370, 291, 611, 550, 483, 805, 4, 337, 300, 300, 311, 8704, 445, 281, 652, 988, 291, 4239, 309, 1487, 760, 281, 309, 13], "temperature": 0.0, "avg_logprob": -0.2533370735719032, "compression_ratio": 1.6587301587301588, "no_speech_prob": 3.620356437750161e-05}, {"id": 129, "seek": 163600, "start": 1636.0, "end": 1663.0, "text": " And yeah so I should just mention again as we go along the on a code that's important also for the final projects so just to be clear on that so for the final projects in a lot of cases you're going to use a lot of stuff that already exists that you may well be using some model that you can just download from the GitHub repository or similar places.", "tokens": [400, 1338, 370, 286, 820, 445, 2152, 797, 382, 321, 352, 2051, 264, 322, 257, 3089, 300, 311, 1021, 611, 337, 264, 2572, 4455, 370, 445, 281, 312, 1850, 322, 300, 370, 337, 264, 2572, 4455, 294, 257, 688, 295, 3331, 291, 434, 516, 281, 764, 257, 688, 295, 1507, 300, 1217, 8198, 300, 291, 815, 731, 312, 1228, 512, 2316, 300, 291, 393, 445, 5484, 490, 264, 23331, 25841, 420, 2531, 3190, 13], "temperature": 0.0, "avg_logprob": -0.09117792202876164, "compression_ratio": 1.6875, "no_speech_prob": 0.000540213193744421}, {"id": 130, "seek": 166300, "start": 1663.0, "end": 1692.0, "text": " You may well be taking various ideas you know it's fine for the final project to use any amount of existing stuff but you have to make sure that you acknowledge what you're using and document it and in terms of evaluating your projects what will be interested in as the value add in terms of what you did not what you're able to download from other people.", "tokens": [509, 815, 731, 312, 1940, 3683, 3487, 291, 458, 309, 311, 2489, 337, 264, 2572, 1716, 281, 764, 604, 2372, 295, 6741, 1507, 457, 291, 362, 281, 652, 988, 300, 291, 10692, 437, 291, 434, 1228, 293, 4166, 309, 293, 294, 2115, 295, 27479, 428, 4455, 437, 486, 312, 3102, 294, 382, 264, 2158, 909, 294, 2115, 295, 437, 291, 630, 406, 437, 291, 434, 1075, 281, 5484, 490, 661, 561, 13], "temperature": 0.0, "avg_logprob": -0.07681471423098915, "compression_ratio": 1.7365853658536585, "no_speech_prob": 0.000421879900386557}, {"id": 131, "seek": 169200, "start": 1692.0, "end": 1717.0, "text": " So for the final project you can have teams of one to three in almost every case every member of the team gets the same score but we do ask for a group statement of the work done by each team may and if it's clear that there was sort of some egregious imbalance in sort of one in a hundred cases we do do something about that.", "tokens": [407, 337, 264, 2572, 1716, 291, 393, 362, 5491, 295, 472, 281, 1045, 294, 1920, 633, 1389, 633, 4006, 295, 264, 1469, 2170, 264, 912, 6175, 457, 321, 360, 1029, 337, 257, 1594, 5629, 295, 264, 589, 1096, 538, 1184, 1469, 815, 293, 498, 309, 311, 1850, 300, 456, 390, 1333, 295, 512, 308, 11027, 851, 43007, 294, 1333, 295, 472, 294, 257, 3262, 3331, 321, 360, 360, 746, 466, 300, 13], "temperature": 0.0, "avg_logprob": -0.15089282236601176, "compression_ratio": 1.6381909547738693, "no_speech_prob": 0.00022297493705991656}, {"id": 132, "seek": 171700, "start": 1717.0, "end": 1743.0, "text": " Okay so for the final project you've essentially got two choikers you can either do our default final project where we give you the scaffolding and send you pointed in some direction or you can propose a custom final project which we then need to approve as a suitable final project for the course and i'm going to talk a bit about both of those in this class.", "tokens": [1033, 370, 337, 264, 2572, 1716, 291, 600, 4476, 658, 732, 1586, 1035, 433, 291, 393, 2139, 360, 527, 7576, 2572, 1716, 689, 321, 976, 291, 264, 44094, 278, 293, 2845, 291, 10932, 294, 512, 3513, 420, 291, 393, 17421, 257, 2375, 2572, 1716, 597, 321, 550, 643, 281, 18827, 382, 257, 12873, 2572, 1716, 337, 264, 1164, 293, 741, 478, 516, 281, 751, 257, 857, 466, 1293, 295, 729, 294, 341, 1508, 13], "temperature": 0.0, "avg_logprob": -0.16701321724133614, "compression_ratio": 1.7142857142857142, "no_speech_prob": 9.143235365627334e-05}, {"id": 133, "seek": 174300, "start": 1743.0, "end": 1758.0, "text": " So you can work in teams of one to three if you have a bigger team we expect you to do more sometimes people use the same project for multiple classes so that it might also use others.", "tokens": [407, 291, 393, 589, 294, 5491, 295, 472, 281, 1045, 498, 291, 362, 257, 3801, 1469, 321, 2066, 291, 281, 360, 544, 2171, 561, 764, 264, 912, 1716, 337, 3866, 5359, 370, 300, 309, 1062, 611, 764, 2357, 13], "temperature": 0.0, "avg_logprob": -0.09694977693779525, "compression_ratio": 1.4375, "no_speech_prob": 0.00012261891970410943}, {"id": 134, "seek": 175800, "start": 1758.0, "end": 1787.0, "text": " So it's sort of the same general rule right so that they have two of you and you're using the project for two classes each that's sort of like it should be four persons worth of work that is being done and so we expect you know projects that are bigger that you know if you just one of you we can be totally satisfied with something compact and small you know it sort of has to be done.", "tokens": [407, 309, 311, 1333, 295, 264, 912, 2674, 4978, 558, 370, 300, 436, 362, 732, 295, 291, 293, 291, 434, 1228, 264, 1716, 337, 732, 5359, 1184, 300, 311, 1333, 295, 411, 309, 820, 312, 1451, 14453, 3163, 295, 589, 300, 307, 885, 1096, 293, 370, 321, 2066, 291, 458, 4455, 300, 366, 3801, 300, 291, 458, 498, 291, 445, 472, 295, 291, 321, 393, 312, 3879, 11239, 365, 746, 14679, 293, 1359, 291, 458, 309, 1333, 295, 575, 281, 312, 1096, 13], "temperature": 0.0, "avg_logprob": -0.21499953872856054, "compression_ratio": 1.746606334841629, "no_speech_prob": 9.09431473701261e-05}, {"id": 135, "seek": 178700, "start": 1787.0, "end": 1802.0, "text": " But it can be compact and small whereas if there are three of you we sort of feel like well you really sort of have enough time to actually implement a variant model and see if that works better.", "tokens": [583, 309, 393, 312, 14679, 293, 1359, 9735, 498, 456, 366, 1045, 295, 291, 321, 1333, 295, 841, 411, 731, 291, 534, 1333, 295, 362, 1547, 565, 281, 767, 4445, 257, 17501, 2316, 293, 536, 498, 300, 1985, 1101, 13], "temperature": 0.0, "avg_logprob": -0.06460423361171376, "compression_ratio": 1.455223880597015, "no_speech_prob": 0.00013291457435116172}, {"id": 136, "seek": 180200, "start": 1802.0, "end": 1827.0, "text": " You can use any framework the language you want the final project but in practice basically people go on using high torch and then finally i've got to mention on the default final project i'll get back to this in a minute but actually this year new thing we've got two some variants of the default final project and you can choose one or the other.", "tokens": [509, 393, 764, 604, 8388, 264, 2856, 291, 528, 264, 2572, 1716, 457, 294, 3124, 1936, 561, 352, 322, 1228, 1090, 27822, 293, 550, 2721, 741, 600, 658, 281, 2152, 322, 264, 7576, 2572, 1716, 741, 603, 483, 646, 281, 341, 294, 257, 3456, 457, 767, 341, 1064, 777, 551, 321, 600, 658, 732, 512, 21669, 295, 264, 7576, 2572, 1716, 293, 291, 393, 2826, 472, 420, 264, 661, 13], "temperature": 0.0, "avg_logprob": -0.17121544399776975, "compression_ratio": 1.7227722772277227, "no_speech_prob": 5.8948371588485315e-05}, {"id": 137, "seek": 182700, "start": 1827.0, "end": 1856.0, "text": " So for custom final projects i'm really happy to talk to people about final projects that this is problem and and you'll encourage us to sign up for an office hours slide but this is problem that there's only one of me so also encourage you to talk to the TAs about final project many of the TAs have experience for all sorts of things and we tried to sort of summarize some of what they have experience.", "tokens": [407, 337, 2375, 2572, 4455, 741, 478, 534, 2055, 281, 751, 281, 561, 466, 2572, 4455, 300, 341, 307, 1154, 293, 293, 291, 603, 5373, 505, 281, 1465, 493, 337, 364, 3398, 2496, 4137, 457, 341, 307, 1154, 300, 456, 311, 787, 472, 295, 385, 370, 611, 5373, 291, 281, 751, 281, 264, 314, 10884, 466, 2572, 1716, 867, 295, 264, 314, 10884, 362, 1752, 337, 439, 7527, 295, 721, 293, 321, 3031, 281, 1333, 295, 20858, 512, 295, 437, 436, 362, 1752, 13], "temperature": 0.0, "avg_logprob": -0.16593330556696112, "compression_ratio": 1.8790697674418604, "no_speech_prob": 5.176062404643744e-05}, {"id": 138, "seek": 185600, "start": 1856.0, "end": 1885.0, "text": " So we're going to talk about the final projects we make sure everyone has some kind of mentor and the mentor can either be TIO instructor in this class or it could be somebody else and for somebody else option well you know if there's someone you know it's standard and there's some cool", "tokens": [407, 321, 434, 516, 281, 751, 466, 264, 2572, 4455, 321, 652, 988, 1518, 575, 512, 733, 295, 14478, 293, 264, 14478, 393, 2139, 312, 314, 15167, 18499, 294, 341, 1508, 420, 309, 727, 312, 2618, 1646, 293, 337, 2618, 1646, 3614, 731, 291, 458, 498, 456, 311, 1580, 291, 458, 309, 311, 3832, 293, 456, 311, 512, 1627], "temperature": 0.0, "avg_logprob": -0.4202695574079241, "compression_ratio": 1.6214689265536724, "no_speech_prob": 0.00022225639258977026}, {"id": 139, "seek": 188500, "start": 1885.0, "end": 1897.0, "text": " project they have you know whatever it is that's something you know in the political science of understanding documents or in the med school doing something.", "tokens": [1716, 436, 362, 291, 458, 2035, 309, 307, 300, 311, 746, 291, 458, 294, 264, 3905, 3497, 295, 3701, 8512, 420, 294, 264, 1205, 1395, 884, 746, 13], "temperature": 0.0, "avg_logprob": -0.2147541046142578, "compression_ratio": 1.4144144144144144, "no_speech_prob": 8.063208224484697e-05}, {"id": 140, "seek": 189700, "start": 1897.0, "end": 1925.0, "text": " So you can have them as your mentor or we then also collected some projects from people in the stamp and NLP group and community and we're going to be distributing a list of those so you can try and sort of sign up to be doing one of those projects and make them be a mentor so in that case the other person we expect to be the mentor that's keeping an eye on the project and telling you to do something sort of sensible but it's one of the.", "tokens": [407, 291, 393, 362, 552, 382, 428, 14478, 420, 321, 550, 611, 11087, 512, 4455, 490, 561, 294, 264, 9921, 293, 426, 45196, 1594, 293, 1768, 293, 321, 434, 516, 281, 312, 41406, 257, 1329, 295, 729, 370, 291, 393, 853, 293, 1333, 295, 1465, 493, 281, 312, 884, 472, 295, 729, 4455, 293, 652, 552, 312, 257, 14478, 370, 294, 300, 1389, 264, 661, 954, 321, 2066, 281, 312, 264, 14478, 300, 311, 5145, 364, 3313, 322, 264, 1716, 293, 3585, 291, 281, 360, 746, 1333, 295, 25380, 457, 309, 311, 472, 295, 264, 13], "temperature": 0.0, "avg_logprob": -0.16281856536865236, "compression_ratio": 1.8375, "no_speech_prob": 7.320475560845807e-05}, {"id": 141, "seek": 192500, "start": 1925.0, "end": 1931.0, "text": " The TAs in the class will be grading your various pieces of the work of class.", "tokens": [440, 314, 10884, 294, 264, 1508, 486, 312, 35540, 428, 3683, 3755, 295, 264, 589, 295, 1508, 13], "temperature": 0.0, "avg_logprob": -0.2942156298407193, "compression_ratio": 1.6486486486486487, "no_speech_prob": 5.535694435820915e-05}, {"id": 142, "seek": 192500, "start": 1931.0, "end": 1953.0, "text": " Okay, so these are the details of the two default final projects and the handouts for them that sort of can also pay to handouts, reach one out on the web now so there are so both of them involved question answering which I'll mention a bit at the end and there are sort of two variants.", "tokens": [1033, 11, 370, 613, 366, 264, 4365, 295, 264, 732, 7576, 2572, 4455, 293, 264, 1011, 7711, 337, 552, 300, 1333, 295, 393, 611, 1689, 281, 1011, 7711, 11, 2524, 472, 484, 322, 264, 3670, 586, 370, 456, 366, 370, 1293, 295, 552, 3288, 1168, 13430, 597, 286, 603, 2152, 257, 857, 412, 264, 917, 293, 456, 366, 1333, 295, 732, 21669, 13], "temperature": 0.0, "avg_logprob": -0.2942156298407193, "compression_ratio": 1.6486486486486487, "no_speech_prob": 5.535694435820915e-05}, {"id": 143, "seek": 195300, "start": 1953.0, "end": 1982.0, "text": " One is for you to actually build a question answering architecture by yourself and I describe this as as from scratch but it's not really from scratch because we give you a baseline question answering system and the start code but you're working doing all the work of what else could I add to the model how can I add extra layers different attention and other things to make it better using the squad data set.", "tokens": [1485, 307, 337, 291, 281, 767, 1322, 257, 1168, 13430, 9482, 538, 1803, 293, 286, 6786, 341, 382, 382, 490, 8459, 457, 309, 311, 406, 534, 490, 8459, 570, 321, 976, 291, 257, 20518, 1168, 13430, 1185, 293, 264, 722, 3089, 457, 291, 434, 1364, 884, 439, 264, 589, 295, 437, 1646, 727, 286, 909, 281, 264, 2316, 577, 393, 286, 909, 2857, 7914, 819, 3202, 293, 661, 721, 281, 652, 309, 1101, 1228, 264, 15310, 1412, 992, 13], "temperature": 0.0, "avg_logprob": -0.16039621973612223, "compression_ratio": 1.7012448132780082, "no_speech_prob": 0.0002562953741289675}, {"id": 144, "seek": 198200, "start": 1982.0, "end": 2003.0, "text": " But one of the things that's happened in NLP which is really then the topic of next week's classes in the last few years in NLP has been this revolution in using large pre trained language models with names like birth,", "tokens": [583, 472, 295, 264, 721, 300, 311, 2011, 294, 426, 45196, 597, 307, 534, 550, 264, 4829, 295, 958, 1243, 311, 5359, 294, 264, 1036, 1326, 924, 294, 426, 45196, 575, 668, 341, 8894, 294, 1228, 2416, 659, 8895, 2856, 5245, 365, 5288, 411, 3965, 11], "temperature": 0.0, "avg_logprob": -0.19679935455322264, "compression_ratio": 1.4155844155844155, "no_speech_prob": 0.00018775537319015712}, {"id": 145, "seek": 200300, "start": 2003.0, "end": 2024.0, "text": " and other, and other, which have just been sort of fantastically good for doing natural language problems so the other choice is to make use of those models and so then effectively the model and the model architecture as a starting point is given to you.", "tokens": [293, 661, 11, 293, 661, 11, 597, 362, 445, 668, 1333, 295, 4115, 22808, 665, 337, 884, 3303, 2856, 2740, 370, 264, 661, 3922, 307, 281, 652, 764, 295, 729, 5245, 293, 370, 550, 8659, 264, 2316, 293, 264, 2316, 9482, 382, 257, 2891, 935, 307, 2212, 281, 291, 13], "temperature": 0.2, "avg_logprob": -0.3778830281010381, "compression_ratio": 1.5776397515527951, "no_speech_prob": 9.736978972796351e-05}, {"id": 146, "seek": 202400, "start": 2024.0, "end": 2053.0, "text": " And what we're hoping to have people focus on is how to build a robust question answering system which works across different data sets and domains so a huge problem with a lot of NLP models is if you train them on say with the PDF data they work great on with the PDF data but then as soon as you try and use them on something else whether it's customer support questions or web questions that their performance.", "tokens": [400, 437, 321, 434, 7159, 281, 362, 561, 1879, 322, 307, 577, 281, 1322, 257, 13956, 1168, 13430, 1185, 597, 1985, 2108, 819, 1412, 6352, 293, 25514, 370, 257, 2603, 1154, 365, 257, 688, 295, 426, 45196, 5245, 307, 498, 291, 3847, 552, 322, 584, 365, 264, 17752, 1412, 436, 589, 869, 322, 365, 264, 17752, 1412, 457, 550, 382, 2321, 382, 291, 853, 293, 764, 552, 322, 746, 1646, 1968, 309, 311, 5474, 1406, 1651, 420, 3670, 1651, 300, 641, 3389, 13], "temperature": 0.0, "avg_logprob": -0.13997868285782036, "compression_ratio": 1.6720647773279351, "no_speech_prob": 0.0005578684504143894}, {"id": 147, "seek": 205300, "start": 2053.0, "end": 2062.0, "text": " He grades greatly despite the fact that the fact of the human being it seems like you're doing.", "tokens": [634, 18041, 14147, 7228, 264, 1186, 300, 264, 1186, 295, 264, 1952, 885, 309, 2544, 411, 291, 434, 884, 13], "temperature": 0.0, "avg_logprob": -0.3891363938649495, "compression_ratio": 1.1728395061728396, "no_speech_prob": 0.00021941478189546615}, {"id": 148, "seek": 206200, "start": 2062.0, "end": 2083.0, "text": " So the building or a bus QA system track we're then going to be sort of training or fine tuning free train language models on several data sets and your goal is to produce something that then forms well on different data sets.", "tokens": [407, 264, 2390, 420, 257, 1255, 1249, 32, 1185, 2837, 321, 434, 550, 516, 281, 312, 1333, 295, 3097, 420, 2489, 15164, 1737, 3847, 2856, 5245, 322, 2940, 1412, 6352, 293, 428, 3387, 307, 281, 5258, 746, 300, 550, 6422, 731, 322, 819, 1412, 6352, 13], "temperature": 0.0, "avg_logprob": -0.2556191635131836, "compression_ratio": 1.486842105263158, "no_speech_prob": 8.051039185374975e-05}, {"id": 149, "seek": 208300, "start": 2083.0, "end": 2100.0, "text": " So for this topic of question answering i'm going to say a few minutes on it at the end but on Tuesday of week six and the entire lecturers on question answering so there will be a lot of content there on the different kinds of models for really getting up to speed.", "tokens": [407, 337, 341, 4829, 295, 1168, 13430, 741, 478, 516, 281, 584, 257, 1326, 2077, 322, 309, 412, 264, 917, 457, 322, 10017, 295, 1243, 2309, 293, 264, 2302, 5899, 14198, 322, 1168, 13430, 370, 456, 486, 312, 257, 688, 295, 2701, 456, 322, 264, 819, 3685, 295, 5245, 337, 534, 1242, 493, 281, 3073, 13], "temperature": 0.0, "avg_logprob": -0.15032315254211426, "compression_ratio": 1.592814371257485, "no_speech_prob": 0.00030775388586334884}, {"id": 150, "seek": 210000, "start": 2100.0, "end": 2124.0, "text": " Good stuff to know even if you're not doing the final projects and some major application of NLP but even better stuff to know if you are doing the final project so look out for that but just to give you one example this is the kind of thing we have a question answering problem so question answering is taking paragraph of text but I only put one sentence in my slides short.", "tokens": [2205, 1507, 281, 458, 754, 498, 291, 434, 406, 884, 264, 2572, 4455, 293, 512, 2563, 3861, 295, 426, 45196, 457, 754, 1101, 1507, 281, 458, 498, 291, 366, 884, 264, 2572, 1716, 370, 574, 484, 337, 300, 457, 445, 281, 976, 291, 472, 1365, 341, 307, 264, 733, 295, 551, 321, 362, 257, 1168, 13430, 1154, 370, 1168, 13430, 307, 1940, 18865, 295, 2487, 457, 286, 787, 829, 472, 8174, 294, 452, 9788, 2099, 13], "temperature": 0.0, "avg_logprob": -0.16185773611068727, "compression_ratio": 1.7327188940092166, "no_speech_prob": 0.00012254607281647623}, {"id": 151, "seek": 212400, "start": 2124.0, "end": 2147.0, "text": " Bill Aiken adopted by mixed and movie actress and we've there my yoga grew up in the neighboring town of the dead Madera and his song chronicled up or what the question is in what town did Bill Aiken grew up this doesn't actually seem so hard I presume all of you could have done this when you're in sixth grade in school or something like that the answer should be Madera.", "tokens": [5477, 316, 19640, 12175, 538, 7467, 293, 3169, 15410, 293, 321, 600, 456, 452, 15128, 6109, 493, 294, 264, 31521, 3954, 295, 264, 3116, 5326, 1663, 293, 702, 2153, 14493, 1493, 493, 420, 437, 264, 1168, 307, 294, 437, 3954, 630, 5477, 316, 19640, 6109, 493, 341, 1177, 380, 767, 1643, 370, 1152, 286, 43283, 439, 295, 291, 727, 362, 1096, 341, 562, 291, 434, 294, 15102, 7204, 294, 1395, 420, 746, 411, 300, 264, 1867, 820, 312, 5326, 1663, 13], "temperature": 0.0, "avg_logprob": -0.338427734375, "compression_ratio": 1.6147186147186148, "no_speech_prob": 0.00048504615551792085}, {"id": 152, "seek": 214700, "start": 2147.0, "end": 2167.0, "text": " But somehow Google's book model fails to find that answer and have seen us partly because there's extra stuff in the middle there adopted by next to movie actress and so it says no this sentence doesn't answer the question so you can hope to do better than that.", "tokens": [583, 6063, 3329, 311, 1446, 2316, 18199, 281, 915, 300, 1867, 293, 362, 1612, 505, 17031, 570, 456, 311, 2857, 1507, 294, 264, 2808, 456, 12175, 538, 958, 281, 3169, 15410, 293, 370, 309, 1619, 572, 341, 8174, 1177, 380, 1867, 264, 1168, 370, 291, 393, 1454, 281, 360, 1101, 813, 300, 13], "temperature": 0.0, "avg_logprob": -0.24897704208106325, "compression_ratio": 1.497142857142857, "no_speech_prob": 0.00011208990326849744}, {"id": 153, "seek": 216700, "start": 2167.0, "end": 2196.0, "text": " Okay so this is choice about doing either the default or custom vinyl project and you know the overall stats have been that about half the people do each so there's no sort of clear winner of the choice in terms of thinking about what you should choose I mean I think the default final project is great if you have limited experience with doing these certain things.", "tokens": [1033, 370, 341, 307, 3922, 466, 884, 2139, 264, 7576, 420, 2375, 25226, 1716, 293, 291, 458, 264, 4787, 18152, 362, 668, 300, 466, 1922, 264, 561, 360, 1184, 370, 456, 311, 572, 1333, 295, 1850, 8507, 295, 264, 3922, 294, 2115, 295, 1953, 466, 437, 291, 820, 2826, 286, 914, 286, 519, 264, 7576, 2572, 1716, 307, 869, 498, 291, 362, 5567, 1752, 365, 884, 613, 1629, 721, 13], "temperature": 0.0, "avg_logprob": -0.20003369047835068, "compression_ratio": 1.6561085972850678, "no_speech_prob": 0.00025235136854462326}, {"id": 154, "seek": 219600, "start": 2196.0, "end": 2222.0, "text": " If you don't have any clear idea of what you would want to do as a custom final project if you think of be good have you know guidance and the clear goal towards work towards indeed we give you a leader board so you can compete against the other people doing the final project then you should do the default final project gives you guidance scaffolding clear goal post.", "tokens": [759, 291, 500, 380, 362, 604, 1850, 1558, 295, 437, 291, 576, 528, 281, 360, 382, 257, 2375, 2572, 1716, 498, 291, 519, 295, 312, 665, 362, 291, 458, 10056, 293, 264, 1850, 3387, 3030, 589, 3030, 6451, 321, 976, 291, 257, 5263, 3150, 370, 291, 393, 11831, 1970, 264, 661, 561, 884, 264, 2572, 1716, 550, 291, 820, 360, 264, 7576, 2572, 1716, 2709, 291, 10056, 44094, 278, 1850, 3387, 2183, 13], "temperature": 0.0, "avg_logprob": -0.21551550828017196, "compression_ratio": 1.7740384615384615, "no_speech_prob": 0.00027712792507372797}, {"id": 155, "seek": 222200, "start": 2222.0, "end": 2251.0, "text": " I mean and in particular just the sort of try and give us sharp edge to this I mean you know the fact of the matter is every year there are a few people who do a custom final project and when we're grading when we look at this custom final project and we say you know this just looks pretty lame compared to what people are doing in the default final project.", "tokens": [286, 914, 293, 294, 1729, 445, 264, 1333, 295, 853, 293, 976, 505, 8199, 4691, 281, 341, 286, 914, 291, 458, 264, 1186, 295, 264, 1871, 307, 633, 1064, 456, 366, 257, 1326, 561, 567, 360, 257, 2375, 2572, 1716, 293, 562, 321, 434, 35540, 562, 321, 574, 412, 341, 2375, 2572, 1716, 293, 321, 584, 291, 458, 341, 445, 1542, 1238, 27635, 5347, 281, 437, 561, 366, 884, 294, 264, 7576, 2572, 1716, 13], "temperature": 0.0, "avg_logprob": -0.1587962983529779, "compression_ratio": 1.7772277227722773, "no_speech_prob": 0.00024412386119365692}, {"id": 156, "seek": 225100, "start": 2251.0, "end": 2274.0, "text": " And that's a bad state to be in right if you're doing the custom final project you want to have a sort of a clear thing that you thought out that is interesting so it will seem has all more interesting and the default final project and if you don't think you've got such a thing you actually better off doing the default final project.", "tokens": [400, 300, 311, 257, 1578, 1785, 281, 312, 294, 558, 498, 291, 434, 884, 264, 2375, 2572, 1716, 291, 528, 281, 362, 257, 1333, 295, 257, 1850, 551, 300, 291, 1194, 484, 300, 307, 1880, 370, 309, 486, 1643, 575, 439, 544, 1880, 293, 264, 7576, 2572, 1716, 293, 498, 291, 500, 380, 519, 291, 600, 658, 1270, 257, 551, 291, 767, 1101, 766, 884, 264, 7576, 2572, 1716, 13], "temperature": 0.0, "avg_logprob": -0.11546562813423775, "compression_ratio": 1.7819148936170213, "no_speech_prob": 0.00020701535686384887}, {"id": 157, "seek": 227400, "start": 2274.0, "end": 2300.0, "text": " Why should you do the custom final project well if you have some research project possibly something you've already been working on or any rate something that you think all this would be great to do which there are two requirements for our project it has to supplement we involve human language and it has to subsequently involve your networks so that doesn't mean it has to be for without those if you want to do a language", "tokens": [1545, 820, 291, 360, 264, 2375, 2572, 1716, 731, 498, 291, 362, 512, 2132, 1716, 6264, 746, 291, 600, 1217, 668, 1364, 322, 420, 604, 3314, 746, 300, 291, 519, 439, 341, 576, 312, 869, 281, 360, 597, 456, 366, 732, 7728, 337, 527, 1716, 309, 575, 281, 15436, 321, 9494, 1952, 2856, 293, 309, 575, 281, 26514, 9494, 428, 9590, 370, 300, 1177, 380, 914, 309, 575, 281, 312, 337, 1553, 729, 498, 291, 528, 281, 360, 257, 2856], "temperature": 0.0, "avg_logprob": -0.20644321895781018, "compression_ratio": 1.781512605042017, "no_speech_prob": 0.0002679425524547696}, {"id": 158, "seek": 230000, "start": 2300.0, "end": 2316.0, "text": " division project that's fine or if you want to compare your networks versus other machine learning methods on some problem that's fine but you do have to in your project subsequently use both of those things.", "tokens": [10044, 1716, 300, 311, 2489, 420, 498, 291, 528, 281, 6794, 428, 9590, 5717, 661, 3479, 2539, 7150, 322, 512, 1154, 300, 311, 2489, 457, 291, 360, 362, 281, 294, 428, 1716, 26514, 764, 1293, 295, 729, 721, 13], "temperature": 0.0, "avg_logprob": -0.23246328220811002, "compression_ratio": 1.4857142857142858, "no_speech_prob": 0.002867513569071889}, {"id": 159, "seek": 231600, "start": 2316.0, "end": 2342.0, "text": " Yeah so if you'd like to sort of design your own thing and come up with something different on your own or just you don't like question answering or what if you basically want more experience of going through the whole process of trying to find a good research goal finding data and tools to explore it working out on your own then doing the custom final project is a great choice.", "tokens": [865, 370, 498, 291, 1116, 411, 281, 1333, 295, 1715, 428, 1065, 551, 293, 808, 493, 365, 746, 819, 322, 428, 1065, 420, 445, 291, 500, 380, 411, 1168, 13430, 420, 437, 498, 291, 1936, 528, 544, 1752, 295, 516, 807, 264, 1379, 1399, 295, 1382, 281, 915, 257, 665, 2132, 3387, 5006, 1412, 293, 3873, 281, 6839, 309, 1364, 484, 322, 428, 1065, 550, 884, 264, 2375, 2572, 1716, 307, 257, 869, 3922, 13], "temperature": 0.0, "avg_logprob": -0.09330684927445423, "compression_ratio": 1.7162162162162162, "no_speech_prob": 0.00010023626236943528}, {"id": 160, "seek": 234200, "start": 2342.0, "end": 2362.0, "text": " Either way the steps that you go through are the following so the first thing which you've gone to 516 or is to write a project proposal which is three.", "tokens": [13746, 636, 264, 4439, 300, 291, 352, 807, 366, 264, 3480, 370, 264, 700, 551, 597, 291, 600, 2780, 281, 1025, 6866, 420, 307, 281, 2464, 257, 1716, 11494, 597, 307, 1045, 13], "temperature": 0.0, "avg_logprob": -0.2916114652479017, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.00046152222785167396}, {"id": 161, "seek": 236200, "start": 2362.0, "end": 2390.0, "text": " So you know how some of the details vary on the kind of project so you need to decide on the research topic for your project which is kind of easy if you're doing the final project that's either a or b but we then want you to choose one research paper that's relevant to your final project read it and then learn some stuff from that that you can write about.", "tokens": [407, 291, 458, 577, 512, 295, 264, 4365, 10559, 322, 264, 733, 295, 1716, 370, 291, 643, 281, 4536, 322, 264, 2132, 4829, 337, 428, 1716, 597, 307, 733, 295, 1858, 498, 291, 434, 884, 264, 2572, 1716, 300, 311, 2139, 257, 420, 272, 457, 321, 550, 528, 291, 281, 2826, 472, 2132, 3035, 300, 311, 7340, 281, 428, 2572, 1716, 1401, 309, 293, 550, 1466, 512, 1507, 490, 300, 300, 291, 393, 2464, 466, 13], "temperature": 0.0, "avg_logprob": -0.1823766827583313, "compression_ratio": 1.7772277227722773, "no_speech_prob": 0.00032108716550283134}, {"id": 162, "seek": 239000, "start": 2390.0, "end": 2412.0, "text": " And we want you to write about what your plan is as to what you're going to do about the final project and that will include describing things as neither such as the data and the evaluation and again this is especially important for custom final projects might be kind of obvious if you're doing the final project.", "tokens": [400, 321, 528, 291, 281, 2464, 466, 437, 428, 1393, 307, 382, 281, 437, 291, 434, 516, 281, 360, 466, 264, 2572, 1716, 293, 300, 486, 4090, 16141, 721, 382, 9662, 1270, 382, 264, 1412, 293, 264, 13344, 293, 797, 341, 307, 2318, 1021, 337, 2375, 2572, 4455, 1062, 312, 733, 295, 6322, 498, 291, 434, 884, 264, 2572, 1716, 13], "temperature": 0.0, "avg_logprob": -0.14264523432804987, "compression_ratio": 1.6972972972972973, "no_speech_prob": 9.885599865810946e-05}, {"id": 163, "seek": 241200, "start": 2412.0, "end": 2426.0, "text": " And so typically if you're doing the final project this should be three pages and if you're doing a custom final project this should be four pages.", "tokens": [400, 370, 5850, 498, 291, 434, 884, 264, 2572, 1716, 341, 820, 312, 1045, 7183, 293, 498, 291, 434, 884, 257, 2375, 2572, 1716, 341, 820, 312, 1451, 7183, 13], "temperature": 0.0, "avg_logprob": -0.206207415636848, "compression_ratio": 1.5473684210526315, "no_speech_prob": 9.220447100233287e-05}, {"id": 164, "seek": 242600, "start": 2426.0, "end": 2452.0, "text": " And there are two parts of it the first part of it is writing about the paper you read and so that part is two pages and so we there are longer form of instructions but we want you to sort of read and think about this paper you know what are its novel contributions is that an idea to be employed in other ways are there things that didn't really do well.", "tokens": [400, 456, 366, 732, 3166, 295, 309, 264, 700, 644, 295, 309, 307, 3579, 466, 264, 3035, 291, 1401, 293, 370, 300, 644, 307, 732, 7183, 293, 370, 321, 456, 366, 2854, 1254, 295, 9415, 457, 321, 528, 291, 281, 1333, 295, 1401, 293, 519, 466, 341, 3035, 291, 458, 437, 366, 1080, 7613, 15725, 307, 300, 364, 1558, 281, 312, 20115, 294, 661, 2098, 366, 456, 721, 300, 994, 380, 534, 360, 731, 13], "temperature": 0.0, "avg_logprob": -0.1779213072378424, "compression_ratio": 1.8020304568527918, "no_speech_prob": 2.9983177228132263e-05}, {"id": 165, "seek": 245200, "start": 2452.0, "end": 2468.0, "text": " How does it compare to other ways that people have approached this problem does it sort of subject even though it did things one way does it actually suggest ideas that really could do things a different way that might even be better and so.", "tokens": [1012, 775, 309, 6794, 281, 661, 2098, 300, 561, 362, 17247, 341, 1154, 775, 309, 1333, 295, 3983, 754, 1673, 309, 630, 721, 472, 636, 775, 309, 767, 3402, 3487, 300, 534, 727, 360, 721, 257, 819, 636, 300, 1062, 754, 312, 1101, 293, 370, 13], "temperature": 0.0, "avg_logprob": -0.14625722885131837, "compression_ratio": 1.5751633986928104, "no_speech_prob": 0.000285187124973163}, {"id": 166, "seek": 246800, "start": 2468.0, "end": 2496.0, "text": " We want you to write this two page paper summary which we will grade and effectively we're going to grade that on how good a job you do at thinking about analyzing and having critical comments on this paper so then the other half which might be longer a shorter depending on its custom or the fold is to propose what you're going to do.", "tokens": [492, 528, 291, 281, 2464, 341, 732, 3028, 3035, 12691, 597, 321, 486, 7204, 293, 8659, 321, 434, 516, 281, 7204, 300, 322, 577, 665, 257, 1691, 291, 360, 412, 1953, 466, 23663, 293, 1419, 4924, 3053, 322, 341, 3035, 370, 550, 264, 661, 1922, 597, 1062, 312, 2854, 257, 11639, 5413, 322, 1080, 2375, 420, 264, 4860, 307, 281, 17421, 437, 291, 434, 516, 281, 360, 13], "temperature": 0.0, "avg_logprob": -0.11343370543585883, "compression_ratio": 1.6153846153846154, "no_speech_prob": 3.6306490073911846e-05}, {"id": 167, "seek": 249600, "start": 2496.0, "end": 2506.0, "text": " And really this part is formative so formative means we're not going to grade it harshly we want you to write it so we can help you.", "tokens": [400, 534, 341, 644, 307, 1254, 1166, 370, 1254, 1166, 1355, 321, 434, 406, 516, 281, 7204, 309, 14897, 356, 321, 528, 291, 281, 2464, 309, 370, 321, 393, 854, 291, 13], "temperature": 0.0, "avg_logprob": -0.11010711067601255, "compression_ratio": 1.7457627118644068, "no_speech_prob": 0.00025228390586562455}, {"id": 168, "seek": 249600, "start": 2506.0, "end": 2524.0, "text": " So we want you to sort of thought through what you're going to do and the past have an opportunity to say no that's unrealistically large or that sounds insufficiently ambitious or this isn't going to work unless you can get more data than you actually have and things like that.", "tokens": [407, 321, 528, 291, 281, 1333, 295, 1194, 807, 437, 291, 434, 516, 281, 360, 293, 264, 1791, 362, 364, 2650, 281, 584, 572, 300, 311, 25754, 20458, 2416, 420, 300, 3263, 41709, 356, 20239, 420, 341, 1943, 380, 516, 281, 589, 5969, 291, 393, 483, 544, 1412, 813, 291, 767, 362, 293, 721, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.11010711067601255, "compression_ratio": 1.7457627118644068, "no_speech_prob": 0.00025228390586562455}, {"id": 169, "seek": 252400, "start": 2524.0, "end": 2546.0, "text": " So this is mainly just a feedback but you know on the things to think about you know project plans that are lacking they're generally just lacking concreteness in nuts and bolts ways which are essential to being able to do a good final project and short amount of time so.", "tokens": [407, 341, 307, 8704, 445, 257, 5824, 457, 291, 458, 322, 264, 721, 281, 519, 466, 291, 458, 1716, 5482, 300, 366, 20889, 436, 434, 5101, 445, 20889, 9859, 1287, 294, 10483, 293, 18127, 2098, 597, 366, 7115, 281, 885, 1075, 281, 360, 257, 665, 2572, 1716, 293, 2099, 2372, 295, 565, 370, 13], "temperature": 0.0, "avg_logprob": -0.21833062994069066, "compression_ratio": 1.590643274853801, "no_speech_prob": 0.0001580184616614133}, {"id": 170, "seek": 254600, "start": 2546.0, "end": 2573.0, "text": " You need to have found good data or have a realistic plan so that should be planned a realistic plan to be able to collect that you need to have a realistic way that you can evaluate your work you need to have thought about what kinds of experiments you can run so you can show whether your model is working well or badly and will be sort of looking to see whether you've done those things.", "tokens": [509, 643, 281, 362, 1352, 665, 1412, 420, 362, 257, 12465, 1393, 370, 300, 820, 312, 8589, 257, 12465, 1393, 281, 312, 1075, 281, 2500, 300, 291, 643, 281, 362, 257, 12465, 636, 300, 291, 393, 13059, 428, 589, 291, 643, 281, 362, 1194, 466, 437, 3685, 295, 12050, 291, 393, 1190, 370, 291, 393, 855, 1968, 428, 2316, 307, 1364, 731, 420, 13425, 293, 486, 312, 1333, 295, 1237, 281, 536, 1968, 291, 600, 1096, 729, 721, 13], "temperature": 0.0, "avg_logprob": -0.1110903039036027, "compression_ratio": 1.9024390243902438, "no_speech_prob": 3.699849912663922e-05}, {"id": 171, "seek": 257300, "start": 2573.0, "end": 2589.0, "text": " Okay so then a couple of weeks after that is the project milestone which is again from everyone this is a progress report and this is again just meant to help keep you on track so you should be more and halfway done.", "tokens": [1033, 370, 550, 257, 1916, 295, 3259, 934, 300, 307, 264, 1716, 28048, 597, 307, 797, 490, 1518, 341, 307, 257, 4205, 2275, 293, 341, 307, 797, 445, 4140, 281, 854, 1066, 291, 322, 2837, 370, 291, 820, 312, 544, 293, 15461, 1096, 13], "temperature": 0.0, "avg_logprob": -0.14710510770479837, "compression_ratio": 1.4794520547945205, "no_speech_prob": 0.0005851726746186614}, {"id": 172, "seek": 258900, "start": 2589.0, "end": 2618.0, "text": " You should have been able to in nearly all cases I'll talk about more about this in a minute in nearly all cases you should already have been able to implement some baseline system and have some initial experimental results to show you know might still be working on your main model and have nothing to show for it but hopefully you've at least said and of this simple baseline to know how well it works is this thing and I've got that and I have some numbers and then we're watching update.", "tokens": [509, 820, 362, 668, 1075, 281, 294, 6217, 439, 3331, 286, 603, 751, 466, 544, 466, 341, 294, 257, 3456, 294, 6217, 439, 3331, 291, 820, 1217, 362, 668, 1075, 281, 4445, 512, 20518, 1185, 293, 362, 512, 5883, 17069, 3542, 281, 855, 291, 458, 1062, 920, 312, 1364, 322, 428, 2135, 2316, 293, 362, 1825, 281, 855, 337, 309, 457, 4696, 291, 600, 412, 1935, 848, 293, 295, 341, 2199, 20518, 281, 458, 577, 731, 309, 1985, 307, 341, 551, 293, 286, 600, 658, 300, 293, 286, 362, 512, 3547, 293, 550, 321, 434, 1976, 5623, 13], "temperature": 0.0, "avg_logprob": -0.2220467586143344, "compression_ratio": 1.8957528957528957, "no_speech_prob": 0.00012656960461754352}, {"id": 173, "seek": 261800, "start": 2618.0, "end": 2647.0, "text": " I'm how you plan to spend the rest of your time and again a lot of this is about us giving you more feedback as to what are the best things you can do for the final two weeks of a class and then at the end there's writing up the final project and so for this you know the quality of your right up is really really important to your grade right you know by and then you can do it.", "tokens": [286, 478, 577, 291, 1393, 281, 3496, 264, 1472, 295, 428, 565, 293, 797, 257, 688, 295, 341, 307, 466, 505, 2902, 291, 544, 5824, 382, 281, 437, 366, 264, 1151, 721, 291, 393, 360, 337, 264, 2572, 732, 3259, 295, 257, 1508, 293, 550, 412, 264, 917, 456, 311, 3579, 493, 264, 2572, 1716, 293, 370, 337, 341, 291, 458, 264, 3125, 295, 428, 558, 493, 307, 534, 534, 1021, 281, 428, 7204, 558, 291, 458, 538, 293, 550, 291, 393, 360, 309, 13], "temperature": 0.0, "avg_logprob": -0.2795513453108541, "compression_ratio": 1.7962085308056872, "no_speech_prob": 0.0002372924645897001}, {"id": 174, "seek": 264700, "start": 2647.0, "end": 2662.0, "text": " Right you know by and large going to evaluate how good your project is by reading the right up so make sure you budget sufficient time to actually do a good job.", "tokens": [1779, 291, 458, 538, 293, 2416, 516, 281, 13059, 577, 665, 428, 1716, 307, 538, 3760, 264, 558, 493, 370, 652, 988, 291, 4706, 11563, 565, 281, 767, 360, 257, 665, 1691, 13], "temperature": 0.0, "avg_logprob": -0.21275484239732897, "compression_ratio": 1.3529411764705883, "no_speech_prob": 0.0001776552526280284}, {"id": 175, "seek": 266200, "start": 2662.0, "end": 2691.0, "text": " Right now I do you could look at good projects from past years they're all up on the CF24N website 2020 was kind of a mess because of the start of the pandemic so possibly should look at 2019's is even better models of what you should do so you know the details very but this is sort of a picture to have in mind and normally what them right up looks like so you know eight pages you want to have an abstract.", "tokens": [1779, 586, 286, 360, 291, 727, 574, 412, 665, 4455, 490, 1791, 924, 436, 434, 439, 493, 322, 264, 21792, 7911, 45, 3144, 4808, 390, 733, 295, 257, 2082, 570, 295, 264, 722, 295, 264, 5388, 370, 6264, 820, 574, 412, 6071, 311, 307, 754, 1101, 5245, 295, 437, 291, 820, 360, 370, 291, 458, 264, 4365, 588, 457, 341, 307, 1333, 295, 257, 3036, 281, 362, 294, 1575, 293, 5646, 437, 552, 558, 493, 1542, 411, 370, 291, 458, 3180, 7183, 291, 528, 281, 362, 364, 12649, 13], "temperature": 0.0, "avg_logprob": -0.21532265857983662, "compression_ratio": 1.616600790513834, "no_speech_prob": 7.304851897060871e-05}, {"id": 176, "seek": 269100, "start": 2691.0, "end": 2719.0, "text": " Introductions of paper you want to talk about related prior work you want to present the model you're using you want to talk about the data you're using talk about your experiments what the results are what you learned about that you know the details may be very you know some papers there's less to say about model and there's more to say about the experiment so you can sort of move things around a bit but roughly something like this.", "tokens": [27193, 3916, 295, 3035, 291, 528, 281, 751, 466, 4077, 4059, 589, 291, 528, 281, 1974, 264, 2316, 291, 434, 1228, 291, 528, 281, 751, 466, 264, 1412, 291, 434, 1228, 751, 466, 428, 12050, 437, 264, 3542, 366, 437, 291, 3264, 466, 300, 291, 458, 264, 4365, 815, 312, 588, 291, 458, 512, 10577, 456, 311, 1570, 281, 584, 466, 2316, 293, 456, 311, 544, 281, 584, 466, 264, 5120, 370, 291, 393, 1333, 295, 1286, 721, 926, 257, 857, 457, 9810, 746, 411, 341, 13], "temperature": 0.0, "avg_logprob": -0.13654462583772428, "compression_ratio": 1.9684684684684686, "no_speech_prob": 4.960307705914602e-05}, {"id": 177, "seek": 271900, "start": 2719.0, "end": 2748.0, "text": " Okay so I now want to kind of go on and say a bit about research and practical things that we need to do a lot of these things are relevant to everybody at any rate there are things that you should know a little bit about the very first one is finding research topics which is sort of especially by all to custom final projects.", "tokens": [1033, 370, 286, 586, 528, 281, 733, 295, 352, 322, 293, 584, 257, 857, 466, 2132, 293, 8496, 721, 300, 321, 643, 281, 360, 257, 688, 295, 613, 721, 366, 7340, 281, 2201, 412, 604, 3314, 456, 366, 721, 300, 291, 820, 458, 257, 707, 857, 466, 264, 588, 700, 472, 307, 5006, 2132, 8378, 597, 307, 1333, 295, 2318, 538, 439, 281, 2375, 2572, 4455, 13], "temperature": 0.0, "avg_logprob": -0.1166161147641464, "compression_ratio": 1.6565656565656566, "no_speech_prob": 0.00018716946942731738}, {"id": 178, "seek": 274800, "start": 2748.0, "end": 2776.0, "text": " So really for all of science there's sort of only two ways that you can have a research project that one way is doing domain science where you start with a problem of interest in the domain such as how can I build a decent charity to an English machine translation system and you work on finding ways to be able to do it better than people currently know how to do.", "tokens": [407, 534, 337, 439, 295, 3497, 456, 311, 1333, 295, 787, 732, 2098, 300, 291, 393, 362, 257, 2132, 1716, 300, 472, 636, 307, 884, 9274, 3497, 689, 291, 722, 365, 257, 1154, 295, 1179, 294, 264, 9274, 1270, 382, 577, 393, 286, 1322, 257, 8681, 16863, 281, 364, 3669, 3479, 12853, 1185, 293, 291, 589, 322, 5006, 2098, 281, 312, 1075, 281, 360, 309, 1101, 813, 561, 4362, 458, 577, 281, 360, 13], "temperature": 0.0, "avg_logprob": -0.09473084180783002, "compression_ratio": 1.6150442477876106, "no_speech_prob": 0.0002564687456469983}, {"id": 179, "seek": 277600, "start": 2776.0, "end": 2804.0, "text": " Or to understand the problem better than people currently understand that and the other way is to take a methodological approach where you start off with some method or approach of interest and then you work out good ways to extend or improve that or you waste or fire and so basically you're doing one of those so there is effectively different kinds of projects you can do.", "tokens": [1610, 281, 1223, 264, 1154, 1101, 813, 561, 4362, 1223, 300, 293, 264, 661, 636, 307, 281, 747, 257, 3170, 4383, 3109, 689, 291, 722, 766, 365, 512, 3170, 420, 3109, 295, 1179, 293, 550, 291, 589, 484, 665, 2098, 281, 10101, 420, 3470, 300, 420, 291, 5964, 420, 2610, 293, 370, 1936, 291, 434, 884, 472, 295, 729, 370, 456, 307, 8659, 819, 3685, 295, 4455, 291, 393, 360, 13], "temperature": 0.0, "avg_logprob": -0.13674479166666667, "compression_ratio": 1.7045454545454546, "no_speech_prob": 0.0002031579933827743}, {"id": 180, "seek": 280400, "start": 2804.0, "end": 2831.0, "text": " This is non-explorced at list that most projects sort of fall into one of these buckets very non uniformly so the most common type as you find some application or task of interest and you explore how to approach and solve that as well as possible often that's using existing models and trying out different options and things like that.", "tokens": [639, 307, 2107, 12, 23040, 284, 1232, 412, 1329, 300, 881, 4455, 1333, 295, 2100, 666, 472, 295, 613, 32191, 588, 2107, 48806, 370, 264, 881, 2689, 2010, 382, 291, 915, 512, 3861, 420, 5633, 295, 1179, 293, 291, 6839, 577, 281, 3109, 293, 5039, 300, 382, 731, 382, 1944, 2049, 300, 311, 1228, 6741, 5245, 293, 1382, 484, 819, 3956, 293, 721, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.17845266887119837, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.00024830311303958297}, {"id": 181, "seek": 283100, "start": 2831.0, "end": 2850.0, "text": " So the kind is you can take some relatively complex neural architecture i.e. it has to be something more complex than we built for assignments one through five you implement it and get something that works on some data.", "tokens": [407, 264, 733, 307, 291, 393, 747, 512, 7226, 3997, 18161, 9482, 741, 13, 68, 13, 309, 575, 281, 312, 746, 544, 3997, 813, 321, 3094, 337, 22546, 472, 807, 1732, 291, 4445, 309, 293, 483, 746, 300, 1985, 322, 512, 1412, 13], "temperature": 0.0, "avg_logprob": -0.1541540876347968, "compression_ratio": 1.5103448275862068, "no_speech_prob": 0.0014501820551231503}, {"id": 182, "seek": 285000, "start": 2850.0, "end": 2870.0, "text": " And you know by you're doing something fairly complex it's fine just to implement it and get it to work. But you know if there's some way that you can tweak it and try and do something different and see if that makes it even better or maybe it makes it worse and you can do experiments either way that sort of even better.", "tokens": [400, 291, 458, 538, 291, 434, 884, 746, 6457, 3997, 309, 311, 2489, 445, 281, 4445, 309, 293, 483, 309, 281, 589, 13, 583, 291, 458, 498, 456, 311, 512, 636, 300, 291, 393, 29879, 309, 293, 853, 293, 360, 746, 819, 293, 536, 498, 300, 1669, 309, 754, 1101, 420, 1310, 309, 1669, 309, 5324, 293, 291, 393, 360, 12050, 2139, 636, 300, 1333, 295, 754, 1101, 13], "temperature": 0.0, "avg_logprob": -0.1324225517168437, "compression_ratio": 1.7595628415300546, "no_speech_prob": 4.820372851099819e-05}, {"id": 183, "seek": 287000, "start": 2870.0, "end": 2897.0, "text": " There are then other kinds of projects that you can do so another kind of project is an analysis project so you can take some model that's an existing model and you can put at it and find out things about what it knows so you can take anything even as simple as word vectors and put at them and you can find out things like well how much the word vectors know about word sensors.", "tokens": [821, 366, 550, 661, 3685, 295, 4455, 300, 291, 393, 360, 370, 1071, 733, 295, 1716, 307, 364, 5215, 1716, 370, 291, 393, 747, 512, 2316, 300, 311, 364, 6741, 2316, 293, 291, 393, 829, 412, 309, 293, 915, 484, 721, 466, 437, 309, 3255, 370, 291, 393, 747, 1340, 754, 382, 2199, 382, 1349, 18875, 293, 829, 412, 552, 293, 291, 393, 915, 484, 721, 411, 731, 577, 709, 264, 1349, 18875, 458, 466, 1349, 14840, 13], "temperature": 0.0, "avg_logprob": -0.16023725416602158, "compression_ratio": 1.9842931937172774, "no_speech_prob": 6.703265535179526e-05}, {"id": 184, "seek": 289700, "start": 2897.0, "end": 2919.0, "text": " And sometimes the same words both are now and a verb can you tell those are can you sort of get that different similarities out of the word vectors so analysis projects are perfectly fine often interesting and then all these five times the rareest kind of project we have a couple is a theoretical project.", "tokens": [400, 2171, 264, 912, 2283, 1293, 366, 586, 293, 257, 9595, 393, 291, 980, 729, 366, 393, 291, 1333, 295, 483, 300, 819, 24197, 484, 295, 264, 1349, 18875, 370, 5215, 4455, 366, 6239, 2489, 2049, 1880, 293, 550, 439, 613, 1732, 1413, 264, 5892, 377, 733, 295, 1716, 321, 362, 257, 1916, 307, 257, 20864, 1716, 13], "temperature": 0.0, "avg_logprob": -0.2987024553360478, "compression_ratio": 1.6363636363636365, "no_speech_prob": 0.00034018067526631057}, {"id": 185, "seek": 291900, "start": 2919.0, "end": 2928.0, "text": " You know there's a lot of interesting deep learning theory is that how do these things work and why and what would it take to make it work better.", "tokens": [509, 458, 456, 311, 257, 688, 295, 1880, 2452, 2539, 5261, 307, 300, 577, 360, 613, 721, 589, 293, 983, 293, 437, 576, 309, 747, 281, 652, 309, 589, 1101, 13], "temperature": 0.0, "avg_logprob": -0.06586248477300008, "compression_ratio": 1.562874251497006, "no_speech_prob": 4.396542863105424e-05}, {"id": 186, "seek": 291900, "start": 2928.0, "end": 2939.0, "text": " And so you can work on sort of getting any kind of non trivial property or understanding of a deep learning model.", "tokens": [400, 370, 291, 393, 589, 322, 1333, 295, 1242, 604, 733, 295, 2107, 26703, 4707, 420, 3701, 295, 257, 2452, 2539, 2316, 13], "temperature": 0.0, "avg_logprob": -0.06586248477300008, "compression_ratio": 1.562874251497006, "no_speech_prob": 4.396542863105424e-05}, {"id": 187, "seek": 293900, "start": 2939.0, "end": 2952.0, "text": " And here are just quickly a couple of examples of some projects from class years of 2 24 and just give you a couple of examples of things like there so deep poetry.", "tokens": [400, 510, 366, 445, 2661, 257, 1916, 295, 5110, 295, 512, 4455, 490, 1508, 924, 295, 568, 4022, 293, 445, 976, 291, 257, 1916, 295, 5110, 295, 721, 411, 456, 370, 2452, 15155, 13], "temperature": 0.0, "avg_logprob": -0.28055113240292195, "compression_ratio": 1.4137931034482758, "no_speech_prob": 9.899536235025153e-05}, {"id": 188, "seek": 295200, "start": 2952.0, "end": 2980.0, "text": " This was doing generation of Shakespearean sonnets so the way it was being generated was with the kind of last work with now for machine translation but have interest in differences because if you wanted to generate poetry you need to know about metrical structure and rhyme and so they were working out how to add components to a model that could do that.", "tokens": [639, 390, 884, 5125, 295, 22825, 282, 1872, 77, 1385, 370, 264, 636, 309, 390, 885, 10833, 390, 365, 264, 733, 295, 1036, 589, 365, 586, 337, 3479, 12853, 457, 362, 1179, 294, 7300, 570, 498, 291, 1415, 281, 8460, 15155, 291, 643, 281, 458, 466, 1131, 15888, 3877, 293, 34753, 293, 370, 436, 645, 1364, 484, 577, 281, 909, 6677, 281, 257, 2316, 300, 727, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.25474328864110657, "compression_ratio": 1.6872037914691944, "no_speech_prob": 2.6674906621337868e-05}, {"id": 189, "seek": 298000, "start": 2980.0, "end": 3003.0, "text": " Here's someone who was implementing a complex new model so there's been a line of work at deep mind on trying to build general purpose computers of neural architectures and it's first of all new or chewing machines and then a subsequent model for the differential wall neural computer.", "tokens": [1692, 311, 1580, 567, 390, 18114, 257, 3997, 777, 2316, 370, 456, 311, 668, 257, 1622, 295, 589, 412, 2452, 1575, 322, 1382, 281, 1322, 2674, 4334, 10807, 295, 18161, 6331, 1303, 293, 309, 311, 700, 295, 439, 777, 420, 31444, 8379, 293, 550, 257, 19962, 2316, 337, 264, 15756, 2929, 18161, 3820, 13], "temperature": 0.0, "avg_logprob": -0.3096153325047986, "compression_ratio": 1.574585635359116, "no_speech_prob": 0.0004775947018060833}, {"id": 190, "seek": 300300, "start": 3003.0, "end": 3015.0, "text": " They haven't released the code of those open source so Carol decided that she was going to implement your computers and get them to work.", "tokens": [814, 2378, 380, 4736, 264, 3089, 295, 729, 1269, 4009, 370, 7925, 3047, 300, 750, 390, 516, 281, 4445, 428, 10807, 293, 483, 552, 281, 589, 13], "temperature": 0.0, "avg_logprob": -0.19454544468929894, "compression_ratio": 1.683794466403162, "no_speech_prob": 0.0003229841240681708}, {"id": 191, "seek": 300300, "start": 3015.0, "end": 3032.0, "text": " This was a very dangerous idea because you know we were in week 10 of the class and she still hadn't gone to work at all but luckily she got it together at the last moment and actually got her model working and it was able to run it and get results on some of the problems that deep mind.", "tokens": [639, 390, 257, 588, 5795, 1558, 570, 291, 458, 321, 645, 294, 1243, 1266, 295, 264, 1508, 293, 750, 920, 8782, 380, 2780, 281, 589, 412, 439, 457, 22880, 750, 658, 309, 1214, 412, 264, 1036, 1623, 293, 767, 658, 720, 2316, 1364, 293, 309, 390, 1075, 281, 1190, 309, 293, 483, 3542, 322, 512, 295, 264, 2740, 300, 2452, 1575, 13], "temperature": 0.0, "avg_logprob": -0.19454544468929894, "compression_ratio": 1.683794466403162, "no_speech_prob": 0.0003229841240681708}, {"id": 192, "seek": 303200, "start": 3032.0, "end": 3044.0, "text": " She was also shown results on and so she pulled the rabbit out of the hat and had an enormous success and we were very impressed that she managed to do that.", "tokens": [1240, 390, 611, 4898, 3542, 322, 293, 370, 750, 7373, 264, 19509, 484, 295, 264, 2385, 293, 632, 364, 11322, 2245, 293, 321, 645, 588, 11679, 300, 750, 6453, 281, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.23092437434840846, "compression_ratio": 1.4017857142857142, "no_speech_prob": 0.0003672834427561611}, {"id": 193, "seek": 304400, "start": 3044.0, "end": 3059.0, "text": " So sometimes final projects have become papers. Here's a final project that became paper published at the top machine learning conference this is more a few years ago in 2017.", "tokens": [407, 2171, 2572, 4455, 362, 1813, 10577, 13, 1692, 311, 257, 2572, 1716, 300, 3062, 3035, 6572, 412, 264, 1192, 3479, 2539, 7586, 341, 307, 544, 257, 1326, 924, 2057, 294, 6591, 13], "temperature": 0.0, "avg_logprob": -0.31090983828982793, "compression_ratio": 1.3671875, "no_speech_prob": 0.00012687122216448188}, {"id": 194, "seek": 305900, "start": 3059.0, "end": 3077.0, "text": " It actually has a couple of fairly simple ideas but you know there are ideas that at that time people weren't using and these two people proved work to improve things and they got the conference paper out of it so I'll just mention one of them now.", "tokens": [467, 767, 575, 257, 1916, 295, 6457, 2199, 3487, 457, 291, 458, 456, 366, 3487, 300, 412, 300, 565, 561, 4999, 380, 1228, 293, 613, 732, 561, 14617, 589, 281, 3470, 721, 293, 436, 658, 264, 7586, 3035, 484, 295, 309, 370, 286, 603, 445, 2152, 472, 295, 552, 586, 13], "temperature": 0.0, "avg_logprob": -0.12014720223166726, "compression_ratio": 1.5403726708074534, "no_speech_prob": 0.00011923555575776845}, {"id": 195, "seek": 307700, "start": 3077.0, "end": 3101.0, "text": " So if you think about our current neural network language models they have both and for words and encoding into distributed vectors that the other end you know the softmax matrix basically hides inside it just like for our word vectors a word vector for each word and then you're sort of.", "tokens": [407, 498, 291, 519, 466, 527, 2190, 18161, 3209, 2856, 5245, 436, 362, 1293, 293, 337, 2283, 293, 43430, 666, 12631, 18875, 300, 264, 661, 917, 291, 458, 264, 2787, 41167, 8141, 1936, 35953, 1854, 309, 445, 411, 337, 527, 1349, 18875, 257, 1349, 8062, 337, 1184, 1349, 293, 550, 291, 434, 1333, 295, 13], "temperature": 0.0, "avg_logprob": -0.21705102112333655, "compression_ratio": 1.5824175824175823, "no_speech_prob": 0.00013101488002575934}, {"id": 196, "seek": 310100, "start": 3101.0, "end": 3126.0, "text": " The siging the probabilities of generating different words based on similarities between the query vector in each of those words so their idea was look maybe we're actually able to build better language models if we tied together the word of that in matrix and the matrix used to project the RNN output.", "tokens": [440, 4556, 278, 264, 33783, 295, 17746, 819, 2283, 2361, 322, 24197, 1296, 264, 14581, 8062, 294, 1184, 295, 729, 2283, 370, 641, 1558, 390, 574, 1310, 321, 434, 767, 1075, 281, 1322, 1101, 2856, 5245, 498, 321, 9601, 1214, 264, 1349, 295, 300, 294, 8141, 293, 264, 8141, 1143, 281, 1716, 264, 45702, 45, 5598, 13], "temperature": 0.0, "avg_logprob": -0.24492959507176135, "compression_ratio": 1.5538461538461539, "no_speech_prob": 6.577392196049914e-05}, {"id": 197, "seek": 312600, "start": 3126.0, "end": 3146.0, "text": " And actually they showed that you can get significant gains by doing that and so now you know it's basically sort of now become standard if you're wanting to build strong neural language models that you want to tie those two sets of parameters together so that was pretty cool.", "tokens": [400, 767, 436, 4712, 300, 291, 393, 483, 4776, 16823, 538, 884, 300, 293, 370, 586, 291, 458, 309, 311, 1936, 1333, 295, 586, 1813, 3832, 498, 291, 434, 7935, 281, 1322, 2068, 18161, 2856, 5245, 300, 291, 528, 281, 7582, 729, 732, 6352, 295, 9834, 1214, 370, 300, 390, 1238, 1627, 13], "temperature": 0.0, "avg_logprob": -0.08356875704045881, "compression_ratio": 1.5649717514124293, "no_speech_prob": 0.00019695631635840982}, {"id": 198, "seek": 314600, "start": 3146.0, "end": 3175.0, "text": " Here's a more systems the project so I'll mention this again later but you know something people have been interested in is how can you just wish your nets and make them small so you can run them on you know a regular laptop or a smaller device like a mobile phone and so these people worked on how could you do quantization of neural networks down sort of.", "tokens": [1692, 311, 257, 544, 3652, 264, 1716, 370, 286, 603, 2152, 341, 797, 1780, 457, 291, 458, 746, 561, 362, 668, 3102, 294, 307, 577, 393, 291, 445, 3172, 428, 36170, 293, 652, 552, 1359, 370, 291, 393, 1190, 552, 322, 291, 458, 257, 3890, 10732, 420, 257, 4356, 4302, 411, 257, 6013, 2593, 293, 370, 613, 561, 2732, 322, 577, 727, 291, 360, 4426, 2144, 295, 18161, 9590, 760, 1333, 295, 13], "temperature": 0.0, "avg_logprob": -0.2227568936038327, "compression_ratio": 1.6153846153846154, "no_speech_prob": 7.83442665124312e-05}, {"id": 199, "seek": 317500, "start": 3175.0, "end": 3203.0, "text": " One or two bits per parameter and still get good results so this is sort of an example has to involve neural nets and human language is sort of a way of which you could say this didn't involve human language at all because this was sort of really about quantizing neural nets but you know effectively where we draw the line is we say you will be allowed to do this for buying the task that you.", "tokens": [1485, 420, 732, 9239, 680, 13075, 293, 920, 483, 665, 3542, 370, 341, 307, 1333, 295, 364, 1365, 575, 281, 9494, 18161, 36170, 293, 1952, 2856, 307, 1333, 295, 257, 636, 295, 597, 291, 727, 584, 341, 994, 380, 9494, 1952, 2856, 412, 439, 570, 341, 390, 1333, 295, 534, 466, 4426, 3319, 18161, 36170, 457, 291, 458, 8659, 689, 321, 2642, 264, 1622, 307, 321, 584, 291, 486, 312, 4350, 281, 360, 341, 337, 6382, 264, 5633, 300, 291, 13], "temperature": 0.0, "avg_logprob": -0.21024172165814567, "compression_ratio": 1.7589285714285714, "no_speech_prob": 0.0002822148962877691}, {"id": 200, "seek": 320300, "start": 3203.0, "end": 3225.0, "text": " The model you use to demonstrate success or failure is a natural language task and so they did both words similarity tasks and question answering tasks of seeing how all the system performed after doing the compression by quantization.", "tokens": [440, 2316, 291, 764, 281, 11698, 2245, 420, 7763, 307, 257, 3303, 2856, 5633, 293, 370, 436, 630, 1293, 2283, 32194, 9608, 293, 1168, 13430, 9608, 295, 2577, 577, 439, 264, 1185, 10332, 934, 884, 264, 19355, 538, 4426, 2144, 13], "temperature": 0.0, "avg_logprob": -0.2270494884914822, "compression_ratio": 1.4873417721518987, "no_speech_prob": 0.00017932058835867792}, {"id": 201, "seek": 322500, "start": 3225.0, "end": 3251.0, "text": " How can you find a good place for a project if you don't have a good idea one place is the sort of look at recent papers so for most NLP papers they're here in the ACL and apology also look at major machine learning conferences most past two twenty four in projects up on the class website you can look through them there's just general archive dot or pre print.", "tokens": [1012, 393, 291, 915, 257, 665, 1081, 337, 257, 1716, 498, 291, 500, 380, 362, 257, 665, 1558, 472, 1081, 307, 264, 1333, 295, 574, 412, 5162, 10577, 370, 337, 881, 426, 45196, 10577, 436, 434, 510, 294, 264, 43873, 293, 28006, 611, 574, 412, 2563, 3479, 2539, 22032, 881, 1791, 732, 7699, 1451, 294, 4455, 493, 322, 264, 1508, 3144, 291, 393, 574, 807, 552, 456, 311, 445, 2674, 23507, 5893, 420, 659, 4482, 13], "temperature": 0.0, "avg_logprob": -0.25057523250579833, "compression_ratio": 1.5947136563876652, "no_speech_prob": 0.0001463725056964904}, {"id": 202, "seek": 325100, "start": 3251.0, "end": 3264.0, "text": " And so that's even better is looking for an interesting problem in the world so how very and as an economist was it.", "tokens": [400, 370, 300, 311, 754, 1101, 307, 1237, 337, 364, 1880, 1154, 294, 264, 1002, 370, 577, 588, 293, 382, 364, 36696, 390, 309, 13], "temperature": 0.0, "avg_logprob": -0.5673618974356816, "compression_ratio": 1.2083333333333333, "no_speech_prob": 0.0014986781170591712}, {"id": 203, "seek": 326400, "start": 3264.0, "end": 3288.0, "text": " And he wrote this call paper that I often recommend to students of how to build an economic model in your spare time and the paper isn't really that economic models is about how to do research and what he says right at the beginning section one of the paper is called getting ideas and he writes.", "tokens": [400, 415, 4114, 341, 818, 3035, 300, 286, 2049, 2748, 281, 1731, 295, 577, 281, 1322, 364, 4836, 2316, 294, 428, 13798, 565, 293, 264, 3035, 1943, 380, 534, 300, 4836, 5245, 307, 466, 577, 281, 360, 2132, 293, 437, 415, 1619, 558, 412, 264, 2863, 3541, 472, 295, 264, 3035, 307, 1219, 1242, 3487, 293, 415, 13657, 13], "temperature": 0.0, "avg_logprob": -0.16770243266272167, "compression_ratio": 1.6444444444444444, "no_speech_prob": 0.0005020577227696776}, {"id": 204, "seek": 328800, "start": 3288.0, "end": 3311.0, "text": " But where to get ideas that's the question most graduate students are convinced that the way you get ideas is to read journal papers that in my experience journals really have a good very good source of original ideas you can get lots of things from journal papers technique inside even true but most of the time you only get somebody else's ideas.", "tokens": [583, 689, 281, 483, 3487, 300, 311, 264, 1168, 881, 8080, 1731, 366, 12561, 300, 264, 636, 291, 483, 3487, 307, 281, 1401, 6708, 10577, 300, 294, 452, 1752, 29621, 534, 362, 257, 665, 588, 665, 4009, 295, 3380, 3487, 291, 393, 483, 3195, 295, 721, 490, 6708, 10577, 6532, 1854, 754, 2074, 457, 881, 295, 264, 565, 291, 787, 483, 2618, 1646, 311, 3487, 13], "temperature": 0.0, "avg_logprob": -0.16346800667898995, "compression_ratio": 1.681159420289855, "no_speech_prob": 0.00011050375906052068}, {"id": 205, "seek": 331100, "start": 3311.0, "end": 3321.0, "text": " And so he sort of talks about further about better ways of getting ideas by thinking about problems in the world.", "tokens": [400, 370, 415, 1333, 295, 6686, 466, 3052, 466, 1101, 2098, 295, 1242, 3487, 538, 1953, 466, 2740, 294, 264, 1002, 13], "temperature": 0.0, "avg_logprob": -0.21327835531795727, "compression_ratio": 1.631578947368421, "no_speech_prob": 8.727361273486167e-05}, {"id": 206, "seek": 331100, "start": 3321.0, "end": 3340.0, "text": " So for archivists this huge repository of papers it's hard to navigate there are various tools that can make it easier to navigate one of them is archive sanity preserver which is a website that was written by Andre Kapati who is the original person who constructed and taught the Seattle.", "tokens": [407, 337, 3912, 592, 1751, 341, 2603, 25841, 295, 10577, 309, 311, 1152, 281, 12350, 456, 366, 3683, 3873, 300, 393, 652, 309, 3571, 281, 12350, 472, 295, 552, 307, 23507, 47892, 1183, 38241, 597, 307, 257, 3144, 300, 390, 3720, 538, 20667, 21216, 6908, 567, 307, 264, 3380, 954, 567, 17083, 293, 5928, 264, 15721, 13], "temperature": 0.0, "avg_logprob": -0.21327835531795727, "compression_ratio": 1.631578947368421, "no_speech_prob": 8.727361273486167e-05}, {"id": 207, "seek": 334000, "start": 3340.0, "end": 3346.0, "text": " The CS231 and costs still a good thing to use.", "tokens": [440, 9460, 9356, 16, 293, 5497, 920, 257, 665, 551, 281, 764, 13], "temperature": 0.0, "avg_logprob": -0.24963261187076569, "compression_ratio": 1.5411764705882354, "no_speech_prob": 0.0003120082837995142}, {"id": 208, "seek": 334000, "start": 3346.0, "end": 3364.0, "text": " There are lots of leaderboards for different tasks in NLP so a place you can find tasks and work on tasks is looking at leaderboards so papers with code and NLP progress are two good general sources of leaderboards.", "tokens": [821, 366, 3195, 295, 5263, 17228, 337, 819, 9608, 294, 426, 45196, 370, 257, 1081, 291, 393, 915, 9608, 293, 589, 322, 9608, 307, 1237, 412, 5263, 17228, 370, 10577, 365, 3089, 293, 426, 45196, 4205, 366, 732, 665, 2674, 7139, 295, 5263, 17228, 13], "temperature": 0.0, "avg_logprob": -0.24963261187076569, "compression_ratio": 1.5411764705882354, "no_speech_prob": 0.0003120082837995142}, {"id": 209, "seek": 336400, "start": 3364.0, "end": 3370.0, "text": " There are also then lots of more specialized ones for particular tasks.", "tokens": [821, 366, 611, 550, 3195, 295, 544, 19813, 2306, 337, 1729, 9608, 13], "temperature": 0.0, "avg_logprob": -0.20980920791625976, "compression_ratio": 1.3828125, "no_speech_prob": 0.00010533448948990554}, {"id": 210, "seek": 336400, "start": 3370.0, "end": 3379.0, "text": " I wanted to then for research topics this material of these next four slides are brand new for this year.", "tokens": [286, 1415, 281, 550, 337, 2132, 8378, 341, 2527, 295, 613, 958, 1451, 9788, 366, 3360, 777, 337, 341, 1064, 13], "temperature": 0.0, "avg_logprob": -0.20980920791625976, "compression_ratio": 1.3828125, "no_speech_prob": 0.00010533448948990554}, {"id": 211, "seek": 337900, "start": 3379.0, "end": 3396.0, "text": " I wanted to sort of just say a few words about the kind of the funny somewhat different time that we're in where there's sort of all deep learning NLP and new deep learning and LP.", "tokens": [286, 1415, 281, 1333, 295, 445, 584, 257, 1326, 2283, 466, 264, 733, 295, 264, 4074, 8344, 819, 565, 300, 321, 434, 294, 689, 456, 311, 1333, 295, 439, 2452, 2539, 426, 45196, 293, 777, 2452, 2539, 293, 38095, 13], "temperature": 0.0, "avg_logprob": -0.1513793251731179, "compression_ratio": 1.40625, "no_speech_prob": 0.0001555673370603472}, {"id": 212, "seek": 339600, "start": 3396.0, "end": 3414.0, "text": " In the early days of the deep learning revival which are called 2010 to 2018 because 2010's the year I started doing deep learning for NLP most of the work was in defining and exploring better deep learning architectures.", "tokens": [682, 264, 2440, 1708, 295, 264, 2452, 2539, 33207, 597, 366, 1219, 9657, 281, 6096, 570, 9657, 311, 264, 1064, 286, 1409, 884, 2452, 2539, 337, 426, 45196, 881, 295, 264, 589, 390, 294, 17827, 293, 12736, 1101, 2452, 2539, 6331, 1303, 13], "temperature": 0.0, "avg_logprob": -0.10989233788023604, "compression_ratio": 1.483221476510067, "no_speech_prob": 0.00010348141222493723}, {"id": 213, "seek": 341400, "start": 3414.0, "end": 3428.0, "text": " The typical paper was I can improve a summarization system but not by not only using the kind of attention I just explained but I can add an extra kind of attention which I'll use as a copying mechanism.", "tokens": [440, 7476, 3035, 390, 286, 393, 3470, 257, 14611, 2144, 1185, 457, 406, 538, 406, 787, 1228, 264, 733, 295, 3202, 286, 445, 8825, 457, 286, 393, 909, 364, 2857, 733, 295, 3202, 597, 286, 603, 764, 382, 257, 27976, 7513, 13], "temperature": 0.0, "avg_logprob": -0.14686033000116763, "compression_ratio": 1.45, "no_speech_prob": 0.00019317353144288063}, {"id": 214, "seek": 342800, "start": 3428.0, "end": 3449.0, "text": " So I'll do additional attention calculations to work out source words which I could copy of a bait into the output rather than having to regenerate them through the stand and kind of softmax that's just one example of a millions but you are changing the architecture of the model and make things better.", "tokens": [407, 286, 603, 360, 4497, 3202, 20448, 281, 589, 484, 4009, 2283, 597, 286, 727, 5055, 295, 257, 16865, 666, 264, 5598, 2831, 813, 1419, 281, 26358, 473, 552, 807, 264, 1463, 293, 733, 295, 2787, 41167, 300, 311, 445, 472, 1365, 295, 257, 6803, 457, 291, 366, 4473, 264, 9482, 295, 264, 2316, 293, 652, 721, 1101, 13], "temperature": 0.0, "avg_logprob": -0.19412239014156282, "compression_ratio": 1.5538461538461539, "no_speech_prob": 5.288736429065466e-05}, {"id": 215, "seek": 344900, "start": 3449.0, "end": 3475.0, "text": " You know that's what a lot of good CS 224 in projects did to and in particular you know for one branch of the default final project the one where you start with the baseline squad question answering system and work out ways to make it better by adding more new architecture it's essentially doing this.", "tokens": [509, 458, 300, 311, 437, 257, 688, 295, 665, 9460, 568, 7911, 294, 4455, 630, 281, 293, 294, 1729, 291, 458, 337, 472, 9819, 295, 264, 7576, 2572, 1716, 264, 472, 689, 291, 722, 365, 264, 20518, 15310, 1168, 13430, 1185, 293, 589, 484, 2098, 281, 652, 309, 1101, 538, 5127, 544, 777, 9482, 309, 311, 4476, 884, 341, 13], "temperature": 0.0, "avg_logprob": -0.14540064334869385, "compression_ratio": 1.5024875621890548, "no_speech_prob": 0.0001996626378968358}, {"id": 216, "seek": 347500, "start": 3475.0, "end": 3499.0, "text": " But actually if you look out in the research world of the last couple of years the sad truth is that approach is dead love it's not actually dead I mean that's too strong but that's now much more difficult and rarer to do.", "tokens": [583, 767, 498, 291, 574, 484, 294, 264, 2132, 1002, 295, 264, 1036, 1916, 295, 924, 264, 4227, 3494, 307, 300, 3109, 307, 3116, 959, 309, 311, 406, 767, 3116, 286, 914, 300, 311, 886, 2068, 457, 300, 311, 586, 709, 544, 2252, 293, 367, 289, 260, 281, 360, 13], "temperature": 0.0, "avg_logprob": -0.1461801705537019, "compression_ratio": 1.510204081632653, "no_speech_prob": 0.00012292960309423506}, {"id": 217, "seek": 349900, "start": 3499.0, "end": 3520.0, "text": " So we look at the sort of last three years of NLP and this is true both for people who are implementing production NLP systems of companies and for people who are doing research and NLP that most work is more like this.", "tokens": [407, 321, 574, 412, 264, 1333, 295, 1036, 1045, 924, 295, 426, 45196, 293, 341, 307, 2074, 1293, 337, 561, 567, 366, 18114, 4265, 426, 45196, 3652, 295, 3431, 293, 337, 561, 567, 366, 884, 2132, 293, 426, 45196, 300, 881, 589, 307, 544, 411, 341, 13], "temperature": 0.0, "avg_logprob": -0.15148383495854398, "compression_ratio": 1.5208333333333333, "no_speech_prob": 0.000838031352031976}, {"id": 218, "seek": 352000, "start": 3520.0, "end": 3547.0, "text": " There are these enormous enormously good big pre trained language models but gpt 2 reberta excel net t5 they exist on the web and you can download them with one python command and they give you a great basis for doing most NLP task will learn all about the next week.", "tokens": [821, 366, 613, 11322, 39669, 665, 955, 659, 8895, 2856, 5245, 457, 290, 662, 568, 319, 607, 1328, 24015, 2533, 256, 20, 436, 2514, 322, 264, 3670, 293, 291, 393, 5484, 552, 365, 472, 38797, 5622, 293, 436, 976, 291, 257, 869, 5143, 337, 884, 881, 426, 45196, 5633, 486, 1466, 439, 466, 264, 958, 1243, 13], "temperature": 0.0, "avg_logprob": -0.25269423938188396, "compression_ratio": 1.467032967032967, "no_speech_prob": 0.00035073034814558923}, {"id": 219, "seek": 354700, "start": 3547.0, "end": 3560.0, "text": " So you're not actually starting from scratch to find your own model architecture and playing with it variance you're saying I'm going to be using reberta.", "tokens": [407, 291, 434, 406, 767, 2891, 490, 8459, 281, 915, 428, 1065, 2316, 9482, 293, 2433, 365, 309, 21977, 291, 434, 1566, 286, 478, 516, 281, 312, 1228, 319, 607, 1328, 13], "temperature": 0.0, "avg_logprob": -0.20381421513027614, "compression_ratio": 1.3162393162393162, "no_speech_prob": 0.0012805415317416191}, {"id": 220, "seek": 356000, "start": 3560.0, "end": 3585.0, "text": " So this is like find further fine tuning it for your task doing domain adaptation and things like that. So you know this is sort of very quickly for 2021 NLP for all of your practical projects and industry needs this is basically the formula that which you should probably use.", "tokens": [407, 341, 307, 411, 915, 3052, 2489, 15164, 309, 337, 428, 5633, 884, 9274, 21549, 293, 721, 411, 300, 13, 407, 291, 458, 341, 307, 1333, 295, 588, 2661, 337, 7201, 426, 45196, 337, 439, 295, 428, 8496, 4455, 293, 3518, 2203, 341, 307, 1936, 264, 8513, 300, 597, 291, 820, 1391, 764, 13], "temperature": 0.0, "avg_logprob": -0.21321873829282564, "compression_ratio": 1.5136612021857923, "no_speech_prob": 6.648536509601399e-05}, {"id": 221, "seek": 358500, "start": 3585.0, "end": 3602.0, "text": " There's this enormously great library by the company hugging face you install it pip install transformers and then that gives you a great implementation of the transformers we learn about next week and then effectively what you're doing is something like my code below.", "tokens": [821, 311, 341, 39669, 869, 6405, 538, 264, 2237, 41706, 1851, 291, 3625, 309, 8489, 3625, 4088, 433, 293, 550, 300, 2709, 291, 257, 869, 11420, 295, 264, 4088, 433, 321, 1466, 466, 958, 1243, 293, 550, 8659, 437, 291, 434, 884, 307, 746, 411, 452, 3089, 2507, 13], "temperature": 0.0, "avg_logprob": -0.1772751178381578, "compression_ratio": 1.5371428571428571, "no_speech_prob": 0.0003755681391339749}, {"id": 222, "seek": 360200, "start": 3602.0, "end": 3625.0, "text": " This code doesn't quite run it's missing some pieces if you try it but you know sort of pieces are you load a bit pre trained language model so here I'm way loading the work based on case model turns out these models all hats have very special tokenizers you'll hear about those next week as well so we grab the tokenizer for it.", "tokens": [639, 3089, 1177, 380, 1596, 1190, 309, 311, 5361, 512, 3755, 498, 291, 853, 309, 457, 291, 458, 1333, 295, 3755, 366, 291, 3677, 257, 857, 659, 8895, 2856, 2316, 370, 510, 286, 478, 636, 15114, 264, 589, 2361, 322, 1389, 2316, 4523, 484, 613, 5245, 439, 20549, 362, 588, 2121, 14862, 22525, 291, 603, 1568, 466, 729, 958, 1243, 382, 731, 370, 321, 4444, 264, 14862, 6545, 337, 309, 13], "temperature": 0.0, "avg_logprob": -0.17440176645914712, "compression_ratio": 1.5893719806763285, "no_speech_prob": 7.119562360458076e-05}, {"id": 223, "seek": 362500, "start": 3625.0, "end": 3637.0, "text": " Then we're going to find tune it for our task like maybe I'm going to be working with legal data so I want to take the general model and find tune it to understand legal data better.", "tokens": [1396, 321, 434, 516, 281, 915, 10864, 309, 337, 527, 5633, 411, 1310, 286, 478, 516, 281, 312, 1364, 365, 5089, 1412, 370, 286, 528, 281, 747, 264, 2674, 2316, 293, 915, 10864, 309, 281, 1223, 5089, 1412, 1101, 13], "temperature": 0.0, "avg_logprob": -0.17969323288310657, "compression_ratio": 1.4796747967479675, "no_speech_prob": 8.050814358284697e-05}, {"id": 224, "seek": 363700, "start": 3637.0, "end": 3664.0, "text": " And then I've got something I want to do like question answering or perhaps here where I'm using birth for sequence classification maybe the task I want to do is label mentions of sections of legal code so at that point I'm then going to sort of find tune for that particular task and then run on that task.", "tokens": [400, 550, 286, 600, 658, 746, 286, 528, 281, 360, 411, 1168, 13430, 420, 4317, 510, 689, 286, 478, 1228, 3965, 337, 8310, 21538, 1310, 264, 5633, 286, 528, 281, 360, 307, 7645, 23844, 295, 10863, 295, 5089, 3089, 370, 412, 300, 935, 286, 478, 550, 516, 281, 1333, 295, 915, 10864, 337, 300, 1729, 5633, 293, 550, 1190, 322, 300, 5633, 13], "temperature": 0.0, "avg_logprob": -0.11066963423543902, "compression_ratio": 1.6073298429319371, "no_speech_prob": 3.162751818308607e-05}, {"id": 225, "seek": 366400, "start": 3664.0, "end": 3682.0, "text": " And so this is kind of what we're doing and we're just sort of doing stuff on top of a pre existing model so a lot of what is exciting now is problems that work within or around that world.", "tokens": [400, 370, 341, 307, 733, 295, 437, 321, 434, 884, 293, 321, 434, 445, 1333, 295, 884, 1507, 322, 1192, 295, 257, 659, 6741, 2316, 370, 257, 688, 295, 437, 307, 4670, 586, 307, 2740, 300, 589, 1951, 420, 926, 300, 1002, 13], "temperature": 0.0, "avg_logprob": -0.05766163988316313, "compression_ratio": 1.4881889763779528, "no_speech_prob": 0.0001373460836475715}, {"id": 226, "seek": 368200, "start": 3682.0, "end": 3711.0, "text": " So and you might sort of think about that and look at recent papers and things that could be done about that world well one of them and this is the other half of the default final project is we still have this problem of robustness to domain shift that these models are trained on normally one kind of text but we often want to use it for different kinds of text including often when you're talking about problem or application specific.", "tokens": [407, 293, 291, 1062, 1333, 295, 519, 466, 300, 293, 574, 412, 5162, 10577, 293, 721, 300, 727, 312, 1096, 466, 300, 1002, 731, 472, 295, 552, 293, 341, 307, 264, 661, 1922, 295, 264, 7576, 2572, 1716, 307, 321, 920, 362, 341, 1154, 295, 13956, 1287, 281, 9274, 5513, 300, 613, 5245, 366, 8895, 322, 5646, 472, 733, 295, 2487, 457, 321, 2049, 528, 281, 764, 309, 337, 819, 3685, 295, 2487, 3009, 2049, 562, 291, 434, 1417, 466, 1154, 420, 3861, 2685, 13], "temperature": 0.0, "avg_logprob": -0.1055666891376624, "compression_ratio": 1.7410358565737052, "no_speech_prob": 2.419787779217586e-05}, {"id": 227, "seek": 371100, "start": 3711.0, "end": 3719.0, "text": " Questions that are mains for you don't have much data how can you do that well.", "tokens": [27738, 300, 366, 32519, 337, 291, 500, 380, 362, 709, 1412, 577, 393, 291, 360, 300, 731, 13], "temperature": 0.0, "avg_logprob": -0.1807480748494466, "compression_ratio": 1.6515151515151516, "no_speech_prob": 0.00036492652725428343}, {"id": 228, "seek": 371100, "start": 3719.0, "end": 3736.0, "text": " If you've got one of these big models on some sense they're good but are they actually you know robust that they work for all of the different things in the space should like them to work on so not only interested in basic accuracy but robustness.", "tokens": [759, 291, 600, 658, 472, 295, 613, 955, 5245, 322, 512, 2020, 436, 434, 665, 457, 366, 436, 767, 291, 458, 13956, 300, 436, 589, 337, 439, 295, 264, 819, 721, 294, 264, 1901, 820, 411, 552, 281, 589, 322, 370, 406, 787, 3102, 294, 3875, 14170, 457, 13956, 1287, 13], "temperature": 0.0, "avg_logprob": -0.1807480748494466, "compression_ratio": 1.6515151515151516, "no_speech_prob": 0.00036492652725428343}, {"id": 229, "seek": 373600, "start": 3736.0, "end": 3765.0, "text": " So this robustness gym was a very recently announced project by a PhD student Stanford current girl it's actually testing the robustness of NLP models and they've got some stuff built into it but there's lots of stuff that isn't built into it if someone would like to sort of choose some NLP problem whether it's dependency parsing or something else like summarization and build out robustness test for that could be kind of interesting to do.", "tokens": [407, 341, 13956, 1287, 9222, 390, 257, 588, 3938, 7548, 1716, 538, 257, 14476, 3107, 20374, 2190, 2013, 309, 311, 767, 4997, 264, 13956, 1287, 295, 426, 45196, 5245, 293, 436, 600, 658, 512, 1507, 3094, 666, 309, 457, 456, 311, 3195, 295, 1507, 300, 1943, 380, 3094, 666, 309, 498, 1580, 576, 411, 281, 1333, 295, 2826, 512, 426, 45196, 1154, 1968, 309, 311, 33621, 21156, 278, 420, 746, 1646, 411, 14611, 2144, 293, 1322, 484, 13956, 1287, 1500, 337, 300, 727, 312, 733, 295, 1880, 281, 360, 13], "temperature": 0.0, "avg_logprob": -0.09706377475819689, "compression_ratio": 1.7104247104247103, "no_speech_prob": 5.513493306352757e-05}, {"id": 230, "seek": 376500, "start": 3765.0, "end": 3788.0, "text": " You know a bunch of other things you can look at issues whether there's bias embedding these models how can you explain what they're doing how can you use data augmentation has been an enormous amount of work on using data augmentation to improve model resources lots of different areas.", "tokens": [509, 458, 257, 3840, 295, 661, 721, 291, 393, 574, 412, 2663, 1968, 456, 311, 12577, 12240, 3584, 613, 5245, 577, 393, 291, 2903, 437, 436, 434, 884, 577, 393, 291, 764, 1412, 14501, 19631, 575, 668, 364, 11322, 2372, 295, 589, 322, 1228, 1412, 14501, 19631, 281, 3470, 2316, 3593, 3195, 295, 819, 3179, 13], "temperature": 0.0, "avg_logprob": -0.1355453650156657, "compression_ratio": 1.6306818181818181, "no_speech_prob": 0.00020794683950953186}, {"id": 231, "seek": 378800, "start": 3788.0, "end": 3816.0, "text": " I'll just mention two other things and then I'll go on so it's been a ton of work on scaling models up and down so these big pre train language models are already big so the fact of the matter is it's just not possible for the time and resources that you have in 224 and to be thinking I'm going to be.", "tokens": [286, 603, 445, 2152, 732, 661, 721, 293, 550, 286, 603, 352, 322, 370, 309, 311, 668, 257, 2952, 295, 589, 322, 21589, 5245, 493, 293, 760, 370, 613, 955, 659, 3847, 2856, 5245, 366, 1217, 955, 370, 264, 1186, 295, 264, 1871, 307, 309, 311, 445, 406, 1944, 337, 264, 565, 293, 3593, 300, 291, 362, 294, 5853, 19, 293, 281, 312, 1953, 286, 478, 516, 281, 312, 13], "temperature": 0.0, "avg_logprob": -0.11957935384801917, "compression_ratio": 1.6063829787234043, "no_speech_prob": 0.0002463722485117614}, {"id": 232, "seek": 381600, "start": 3816.0, "end": 3844.0, "text": " I'm going to apply myself big pre train models all you can do is use ones that already exist but you know on the other hand people are actually interested in can you but build very small models that still work pretty well and you know there are lots of examples but actually one that was done recently for question answering was that there was a bake off competition at the last", "tokens": [286, 478, 516, 281, 3079, 2059, 955, 659, 3847, 5245, 439, 291, 393, 360, 307, 764, 2306, 300, 1217, 2514, 457, 291, 458, 322, 264, 661, 1011, 561, 366, 767, 3102, 294, 393, 291, 457, 1322, 588, 1359, 5245, 300, 920, 589, 1238, 731, 293, 291, 458, 456, 366, 3195, 295, 5110, 457, 767, 472, 300, 390, 1096, 3938, 337, 1168, 13430, 390, 300, 456, 390, 257, 16562, 766, 6211, 412, 264, 1036], "temperature": 0.0, "avg_logprob": -0.186540294003177, "compression_ratio": 1.695067264573991, "no_speech_prob": 0.0028562790248543024}, {"id": 233, "seek": 384400, "start": 3844.0, "end": 3860.0, "text": " Europe's which was called efficient QA and one of the divisions of this bake off was can you can you build a performance question answering system that will run in", "tokens": [3315, 311, 597, 390, 1219, 7148, 1249, 32, 293, 472, 295, 264, 24328, 295, 341, 16562, 766, 390, 393, 291, 393, 291, 1322, 257, 3389, 1168, 13430, 1185, 300, 486, 1190, 294], "temperature": 0.0, "avg_logprob": -0.24612943331400552, "compression_ratio": 1.314516129032258, "no_speech_prob": 0.0007405448704957962}, {"id": 234, "seek": 386000, "start": 3860.0, "end": 3888.0, "text": " B and well you know that's actually a reasonable thing that you could attempt for a final project. Another thing people are being very interested in is wanting to explore more advanced learning capabilities in neural networks ideas like compositionality systematic generalization fast learning such as metal learning work and a lot of the time people have investigated these", "tokens": [363, 293, 731, 291, 458, 300, 311, 767, 257, 10585, 551, 300, 291, 727, 5217, 337, 257, 2572, 1716, 13, 3996, 551, 561, 366, 885, 588, 3102, 294, 307, 7935, 281, 6839, 544, 7339, 2539, 10862, 294, 18161, 9590, 3487, 411, 12686, 1860, 27249, 2674, 2144, 2370, 2539, 1270, 382, 5760, 2539, 589, 293, 257, 688, 295, 264, 565, 561, 362, 30070, 613], "temperature": 0.0, "avg_logprob": -0.19865757671754752, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.00012794265057891607}, {"id": 235, "seek": 388800, "start": 3888.0, "end": 3902.0, "text": " in small remains so here's a couple of examples that you go look at baby AI and G scan so those could be kind of interesting places you can look for a final project.", "tokens": [294, 1359, 7023, 370, 510, 311, 257, 1916, 295, 5110, 300, 291, 352, 574, 412, 3186, 7318, 293, 460, 11049, 370, 729, 727, 312, 733, 295, 1880, 3190, 291, 393, 574, 337, 257, 2572, 1716, 13], "temperature": 0.0, "avg_logprob": -0.15162165323893229, "compression_ratio": 1.5507246376811594, "no_speech_prob": 0.00036338172503747046}, {"id": 236, "seek": 388800, "start": 3902.0, "end": 3915.0, "text": " Okay other stuff to know quickly probably I can't quite go through all of these slides and some of them you could just take home and look at you need data.", "tokens": [1033, 661, 1507, 281, 458, 2661, 1391, 286, 393, 380, 1596, 352, 807, 439, 295, 613, 9788, 293, 512, 295, 552, 291, 727, 445, 747, 1280, 293, 574, 412, 291, 643, 1412, 13], "temperature": 0.0, "avg_logprob": -0.15162165323893229, "compression_ratio": 1.5507246376811594, "no_speech_prob": 0.00036338172503747046}, {"id": 237, "seek": 391500, "start": 3915.0, "end": 3944.0, "text": " Now we actually love it if people feel like they can collect their own data and sometimes a good ways to collect your own data and but you know the reality is a lot of the time the easiest way to get a fast start on a final project when you have a few weeks is to make use of an existing data set and there are lots of pre existing data sets so there's data from the linguistic data consortium which is licensed data we have licenses that stand there.", "tokens": [823, 321, 767, 959, 309, 498, 561, 841, 411, 436, 393, 2500, 641, 1065, 1412, 293, 2171, 257, 665, 2098, 281, 2500, 428, 1065, 1412, 293, 457, 291, 458, 264, 4103, 307, 257, 688, 295, 264, 565, 264, 12889, 636, 281, 483, 257, 2370, 722, 322, 257, 2572, 1716, 562, 291, 362, 257, 1326, 3259, 307, 281, 652, 764, 295, 364, 6741, 1412, 992, 293, 456, 366, 3195, 295, 659, 6741, 1412, 6352, 370, 456, 311, 1412, 490, 264, 43002, 1412, 38343, 2197, 597, 307, 25225, 1412, 321, 362, 32821, 300, 1463, 456, 13], "temperature": 0.0, "avg_logprob": -0.1916097524214764, "compression_ratio": 1.8112449799196788, "no_speech_prob": 0.00049407291226089}, {"id": 238, "seek": 394400, "start": 3944.0, "end": 3973.0, "text": " You can look through their catalog and find all the things they have there are websites that have lots of data so if you want to machine translation tasks you can find lots of machine translation data on this website dependency parsing if you're keen on assignment three lots of data on the universal dependencies website there are now several websites that are collecting a lot of data sets so hugging faces also just recently actually now it's hugging the web site.", "tokens": [509, 393, 574, 807, 641, 19746, 293, 915, 439, 264, 721, 436, 362, 456, 366, 12891, 300, 362, 3195, 295, 1412, 370, 498, 291, 528, 281, 3479, 12853, 9608, 291, 393, 915, 3195, 295, 3479, 12853, 1412, 322, 341, 3144, 33621, 21156, 278, 498, 291, 434, 20297, 322, 15187, 1045, 3195, 295, 1412, 322, 264, 11455, 36606, 3144, 456, 366, 586, 2940, 12891, 300, 366, 12510, 257, 688, 295, 1412, 6352, 370, 41706, 8475, 611, 445, 3938, 767, 586, 309, 311, 41706, 264, 3670, 3621, 13], "temperature": 0.0, "avg_logprob": -0.23936360677083332, "compression_ratio": 1.9297520661157024, "no_speech_prob": 0.00017826964904088527}, {"id": 239, "seek": 397300, "start": 3973.0, "end": 3987.0, "text": " And we actually now hugging face data sets which is sort of an index of data sets and the people with code people also have people with code data sets so you can look at those there are many more.", "tokens": [400, 321, 767, 586, 41706, 1851, 1412, 6352, 597, 307, 1333, 295, 364, 8186, 295, 1412, 6352, 293, 264, 561, 365, 3089, 561, 611, 362, 561, 365, 3089, 1412, 6352, 370, 291, 393, 574, 412, 729, 456, 366, 867, 544, 13], "temperature": 0.0, "avg_logprob": -0.2709062537368463, "compression_ratio": 1.5419847328244274, "no_speech_prob": 0.00023597168910782784}, {"id": 240, "seek": 397300, "start": 3987.0, "end": 3989.0, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.2709062537368463, "compression_ratio": 1.5419847328244274, "no_speech_prob": 0.00023597168910782784}, {"id": 241, "seek": 398900, "start": 3989.0, "end": 4018.0, "text": " Here's just a quick summary of thinking about a research project so you know this is just one example right that's post you think summarization so that's sort of going from a longer piece of text or short summary of that so you know what you have to do you need to you know find the data set and well probably easiest thing to do is to sort of use an existing text summarization data set.", "tokens": [1692, 311, 445, 257, 1702, 12691, 295, 1953, 466, 257, 2132, 1716, 370, 291, 458, 341, 307, 445, 472, 1365, 558, 300, 311, 2183, 291, 519, 14611, 2144, 370, 300, 311, 1333, 295, 516, 490, 257, 2854, 2522, 295, 2487, 420, 2099, 12691, 295, 300, 370, 291, 458, 437, 291, 362, 281, 360, 291, 643, 281, 291, 458, 915, 264, 1412, 992, 293, 731, 1391, 12889, 551, 281, 360, 307, 281, 1333, 295, 764, 364, 6741, 2487, 14611, 2144, 1412, 992, 13], "temperature": 0.0, "avg_logprob": -0.1492550206738849, "compression_ratio": 1.8215962441314555, "no_speech_prob": 3.529395689838566e-05}, {"id": 242, "seek": 401800, "start": 4018.0, "end": 4046.0, "text": " You can find several online but you know this is where you can think of interesting ways to create your own data so something that you might have noticed if you look at Twitter is the journalist often promote their own stories by or their their newspaper or TV station does by putting out a tweet and so that's sort of like found data which is sort of self summaries could you collect some of those and try and learn to generate tweets for a new story.", "tokens": [509, 393, 915, 2940, 2950, 457, 291, 458, 341, 307, 689, 291, 393, 519, 295, 1880, 2098, 281, 1884, 428, 1065, 1412, 370, 746, 300, 291, 1062, 362, 5694, 498, 291, 574, 412, 5794, 307, 264, 17277, 2049, 9773, 641, 1065, 3676, 538, 420, 641, 641, 13669, 420, 3558, 5214, 775, 538, 3372, 484, 257, 15258, 293, 370, 300, 311, 1333, 295, 411, 1352, 1412, 597, 307, 1333, 295, 2698, 8367, 4889, 727, 291, 2500, 512, 295, 729, 293, 853, 293, 1466, 281, 8460, 25671, 337, 257, 777, 1657, 13], "temperature": 0.0, "avg_logprob": -0.08360600471496582, "compression_ratio": 1.7121212121212122, "no_speech_prob": 0.00011383664968889207}, {"id": 243, "seek": 404600, "start": 4046.0, "end": 4075.0, "text": " So I'll say a bit about data set hygiene you want to be careful about working things out so you have trains sets and test sets I'll say that in a minute you want some way to evaluate whether you're doing well as you build models and you pretty much need to have an automatic evaluation metric even though human evaluation is great since you want to train a bunch of models and see whether they're better or worse you normally want an automatic metric.", "tokens": [407, 286, 603, 584, 257, 857, 466, 1412, 992, 29541, 291, 528, 281, 312, 5026, 466, 1364, 721, 484, 370, 291, 362, 16329, 6352, 293, 1500, 6352, 286, 603, 584, 300, 294, 257, 3456, 291, 528, 512, 636, 281, 13059, 1968, 291, 434, 884, 731, 382, 291, 1322, 5245, 293, 291, 1238, 709, 643, 281, 362, 364, 12509, 13344, 20678, 754, 1673, 1952, 13344, 307, 869, 1670, 291, 528, 281, 3847, 257, 3840, 295, 5245, 293, 536, 1968, 436, 434, 1101, 420, 5324, 291, 5646, 528, 364, 12509, 20678, 13], "temperature": 0.0, "avg_logprob": -0.1270214040228661, "compression_ratio": 1.8636363636363635, "no_speech_prob": 0.0001878253824543208}, {"id": 244, "seek": 407500, "start": 4075.0, "end": 4103.0, "text": " You should make sure you have some kind of baseline that you want to have some sense of whether you're doing well and so commonly you first off want to implement some simple model like a logistic regression or just averaging word vectors or something and see how well that works because then you know if you're not doing better than that that you're actually making no progress whatsoever.", "tokens": [509, 820, 652, 988, 291, 362, 512, 733, 295, 20518, 300, 291, 528, 281, 362, 512, 2020, 295, 1968, 291, 434, 884, 731, 293, 370, 12719, 291, 700, 766, 528, 281, 4445, 512, 2199, 2316, 411, 257, 3565, 3142, 24590, 420, 445, 47308, 1349, 18875, 420, 746, 293, 536, 577, 731, 300, 1985, 570, 550, 291, 458, 498, 291, 434, 406, 884, 1101, 813, 300, 300, 291, 434, 767, 1455, 572, 4205, 17076, 13], "temperature": 0.0, "avg_logprob": -0.09686107513232109, "compression_ratio": 1.728888888888889, "no_speech_prob": 0.0002292834542458877}, {"id": 245, "seek": 410300, "start": 4103.0, "end": 4113.0, "text": " So you can make some neural net model and see if you can that you think might be good and see if you can get that to work and have that work well.", "tokens": [407, 291, 393, 652, 512, 18161, 2533, 2316, 293, 536, 498, 291, 393, 300, 291, 519, 1062, 312, 665, 293, 536, 498, 291, 393, 483, 300, 281, 589, 293, 362, 300, 589, 731, 13], "temperature": 0.0, "avg_logprob": -0.1293895929166586, "compression_ratio": 1.8291666666666666, "no_speech_prob": 0.0002997452684212476}, {"id": 246, "seek": 410300, "start": 4113.0, "end": 4132.0, "text": " Make sure you keep looking at your data to see what kind of errors you're making and think about how you could change the model to avoid them and then hopefully you've got time to try out some model variance and see if they're better or worse and then that will help in having a good project.", "tokens": [4387, 988, 291, 1066, 1237, 412, 428, 1412, 281, 536, 437, 733, 295, 13603, 291, 434, 1455, 293, 519, 466, 577, 291, 727, 1319, 264, 2316, 281, 5042, 552, 293, 550, 4696, 291, 600, 658, 565, 281, 853, 484, 512, 2316, 21977, 293, 536, 498, 436, 434, 1101, 420, 5324, 293, 550, 300, 486, 854, 294, 1419, 257, 665, 1716, 13], "temperature": 0.0, "avg_logprob": -0.1293895929166586, "compression_ratio": 1.8291666666666666, "no_speech_prob": 0.0002997452684212476}, {"id": 247, "seek": 413200, "start": 4132.0, "end": 4158.0, "text": " Yeah, so quickly what I call here pots of data so many public data sense come with a structure where they have trained dead and test and the idea is that you keep your test data until the end and you only sort of do test runs when development is complete or at least almost complete.", "tokens": [865, 11, 370, 2661, 437, 286, 818, 510, 22022, 295, 1412, 370, 867, 1908, 1412, 2020, 808, 365, 257, 3877, 689, 436, 362, 8895, 3116, 293, 1500, 293, 264, 1558, 307, 300, 291, 1066, 428, 1500, 1412, 1826, 264, 917, 293, 291, 787, 1333, 295, 360, 1500, 6676, 562, 3250, 307, 3566, 420, 412, 1935, 1920, 3566, 13], "temperature": 0.0, "avg_logprob": -0.14204543636691186, "compression_ratio": 1.5898876404494382, "no_speech_prob": 0.00019378485740162432}, {"id": 248, "seek": 415800, "start": 4158.0, "end": 4175.0, "text": " And the thing you're more trained on the train data and you evaluate on the dev data sometimes you need even more data sets is sometimes you want to tune your parameters and you might need a train set a tune set a depth set and a test set.", "tokens": [400, 264, 551, 291, 434, 544, 8895, 322, 264, 3847, 1412, 293, 291, 13059, 322, 264, 1905, 1412, 2171, 291, 643, 754, 544, 1412, 6352, 307, 2171, 291, 528, 281, 10864, 428, 9834, 293, 291, 1062, 643, 257, 3847, 992, 257, 10864, 992, 257, 7161, 992, 293, 257, 1500, 992, 13], "temperature": 0.0, "avg_logprob": -0.326712382923473, "compression_ratio": 1.7573529411764706, "no_speech_prob": 8.475116919726133e-05}, {"id": 249, "seek": 417500, "start": 4175.0, "end": 4196.0, "text": " If the data set if doesn't come pre splitter it doesn't have enough pieces it's sort of your job to work out how to cut it into pieces and to get things working and the reason why you need to do this is.", "tokens": [759, 264, 1412, 992, 498, 1177, 380, 808, 659, 4732, 3904, 309, 1177, 380, 362, 1547, 3755, 309, 311, 1333, 295, 428, 1691, 281, 589, 484, 577, 281, 1723, 309, 666, 3755, 293, 281, 483, 721, 1364, 293, 264, 1778, 983, 291, 643, 281, 360, 341, 307, 13], "temperature": 0.0, "avg_logprob": -0.12402572081639217, "compression_ratio": 1.4817518248175183, "no_speech_prob": 1.8040602299151942e-05}, {"id": 250, "seek": 419600, "start": 4196.0, "end": 4222.0, "text": " That it's necessary to have these different sets to get realistic measures of performance in fact ideally you're only actually testing on the test set once and at any rate very few times so if you're doing the default final project we limits you to three runs on the test set so remember that and save your three runs.", "tokens": [663, 309, 311, 4818, 281, 362, 613, 819, 6352, 281, 483, 12465, 8000, 295, 3389, 294, 1186, 22915, 291, 434, 787, 767, 4997, 322, 264, 1500, 992, 1564, 293, 412, 604, 3314, 588, 1326, 1413, 370, 498, 291, 434, 884, 264, 7576, 2572, 1716, 321, 10406, 291, 281, 1045, 6676, 322, 264, 1500, 992, 370, 1604, 300, 293, 3155, 428, 1045, 6676, 13], "temperature": 0.0, "avg_logprob": -0.09338313430102903, "compression_ratio": 1.6391752577319587, "no_speech_prob": 5.053767017670907e-05}, {"id": 251, "seek": 422200, "start": 4222.0, "end": 4240.0, "text": " The reason that we do that is that if you sort of mix up and over use these data sets the results just become invalid so you know when you train on data well you always build a model what does well on the training data so that's not exciting.", "tokens": [440, 1778, 300, 321, 360, 300, 307, 300, 498, 291, 1333, 295, 2890, 493, 293, 670, 764, 613, 1412, 6352, 264, 3542, 445, 1813, 34702, 370, 291, 458, 562, 291, 3847, 322, 1412, 731, 291, 1009, 1322, 257, 2316, 437, 775, 731, 322, 264, 3097, 1412, 370, 300, 311, 406, 4670, 13], "temperature": 0.0, "avg_logprob": -0.08089032343455724, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.0001818281743908301}, {"id": 252, "seek": 424000, "start": 4240.0, "end": 4255.0, "text": " And well if you want to tune hyper parameters if you tune them on the training data set you won't get good valid values for them because they're not tuned to good values for something that would work on different test data.", "tokens": [400, 731, 498, 291, 528, 281, 10864, 9848, 9834, 498, 291, 10864, 552, 322, 264, 3097, 1412, 992, 291, 1582, 380, 483, 665, 7363, 4190, 337, 552, 570, 436, 434, 406, 10870, 281, 665, 4190, 337, 746, 300, 576, 589, 322, 819, 1500, 1412, 13], "temperature": 0.0, "avg_logprob": -0.07903197346901407, "compression_ratio": 1.5594405594405594, "no_speech_prob": 6.330825999611989e-05}, {"id": 253, "seek": 425500, "start": 4255.0, "end": 4284.0, "text": " But the subtlest part of it is you know I think a lot of people starting off think oh there's no harm in just keeping on testing on the test set every time I you know try out some variant I'll just see how it's going on the test set it's a really compelling thing that you want to do right you change your model you'd like to know whether they've the score on the test set go up or down but you know the truth is that if you do that.", "tokens": [583, 264, 7257, 35745, 644, 295, 309, 307, 291, 458, 286, 519, 257, 688, 295, 561, 2891, 766, 519, 1954, 456, 311, 572, 6491, 294, 445, 5145, 322, 4997, 322, 264, 1500, 992, 633, 565, 286, 291, 458, 853, 484, 512, 17501, 286, 603, 445, 536, 577, 309, 311, 516, 322, 264, 1500, 992, 309, 311, 257, 534, 20050, 551, 300, 291, 528, 281, 360, 558, 291, 1319, 428, 2316, 291, 1116, 411, 281, 458, 1968, 436, 600, 264, 6175, 322, 264, 1500, 992, 352, 493, 420, 760, 457, 291, 458, 264, 3494, 307, 300, 498, 291, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.1360299403850849, "compression_ratio": 1.8270042194092826, "no_speech_prob": 2.2380669179256074e-05}, {"id": 254, "seek": 428400, "start": 4284.0, "end": 4313.0, "text": " You're cheating because what you do is you're sort of slowly training on the test set because you keep every change that helps on the test set and you throw away every change that doesn't help on the test set all makes it worse and so you're learning about the test set and what things happen by chance to work on that particular test set so you're effectively slowly training on the test set and you get biased unrealistically high.", "tokens": [509, 434, 18309, 570, 437, 291, 360, 307, 291, 434, 1333, 295, 5692, 3097, 322, 264, 1500, 992, 570, 291, 1066, 633, 1319, 300, 3665, 322, 264, 1500, 992, 293, 291, 3507, 1314, 633, 1319, 300, 1177, 380, 854, 322, 264, 1500, 992, 439, 1669, 309, 5324, 293, 370, 291, 434, 2539, 466, 264, 1500, 992, 293, 437, 721, 1051, 538, 2931, 281, 589, 322, 300, 1729, 1500, 992, 370, 291, 434, 8659, 5692, 3097, 322, 264, 1500, 992, 293, 291, 483, 28035, 25754, 20458, 1090, 13], "temperature": 0.0, "avg_logprob": -0.08624361373566009, "compression_ratio": 2.052132701421801, "no_speech_prob": 0.00041598602547310293}, {"id": 255, "seek": 431300, "start": 4313.0, "end": 4316.0, "text": " Play at levels of performance.", "tokens": [5506, 412, 4358, 295, 3389, 13], "temperature": 0.0, "avg_logprob": -0.304591799539233, "compression_ratio": 1.4746835443037976, "no_speech_prob": 0.00023962983686942607}, {"id": 256, "seek": 431300, "start": 4316.0, "end": 4319.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.304591799539233, "compression_ratio": 1.4746835443037976, "no_speech_prob": 0.00023962983686942607}, {"id": 257, "seek": 431300, "start": 4319.0, "end": 4323.0, "text": " Let's see.", "tokens": [961, 311, 536, 13], "temperature": 0.0, "avg_logprob": -0.304591799539233, "compression_ratio": 1.4746835443037976, "no_speech_prob": 0.00023962983686942607}, {"id": 258, "seek": 431300, "start": 4323.0, "end": 4341.0, "text": " I think there then sort of a bunch more slides on neural nets that I think I'm going to just skip for the moment but I think in general they use forward of scene maybe I've just sort of", "tokens": [286, 519, 456, 550, 1333, 295, 257, 3840, 544, 9788, 322, 18161, 36170, 300, 286, 519, 286, 478, 516, 281, 445, 10023, 337, 264, 1623, 457, 286, 519, 294, 2674, 436, 764, 2128, 295, 4145, 1310, 286, 600, 445, 1333, 295], "temperature": 0.0, "avg_logprob": -0.304591799539233, "compression_ratio": 1.4746835443037976, "no_speech_prob": 0.00023962983686942607}, {"id": 259, "seek": 434100, "start": 4341.0, "end": 4346.0, "text": " mentioned this one.", "tokens": [2835, 341, 472, 13], "temperature": 0.0, "avg_logprob": -0.13082460256723258, "compression_ratio": 1.3944954128440368, "no_speech_prob": 0.0003144595248159021}, {"id": 260, "seek": 434100, "start": 4346.0, "end": 4359.0, "text": " So for the final projects you're much more on your own and you have to work out for yourself how to get your neural network to work.", "tokens": [407, 337, 264, 2572, 4455, 291, 434, 709, 544, 322, 428, 1065, 293, 291, 362, 281, 589, 484, 337, 1803, 577, 281, 483, 428, 18161, 3209, 281, 589, 13], "temperature": 0.0, "avg_logprob": -0.13082460256723258, "compression_ratio": 1.3944954128440368, "no_speech_prob": 0.0003144595248159021}, {"id": 261, "seek": 435900, "start": 4359.0, "end": 4371.0, "text": " The first thing is you want to start with a positive attitude you know these neural nets are amazing they really want to learn they want to find any pattern they can anywhere and data.", "tokens": [440, 700, 551, 307, 291, 528, 281, 722, 365, 257, 3353, 10157, 291, 458, 613, 18161, 36170, 366, 2243, 436, 534, 528, 281, 1466, 436, 528, 281, 915, 604, 5102, 436, 393, 4992, 293, 1412, 13], "temperature": 0.0, "avg_logprob": -0.07846179326375326, "compression_ratio": 1.6904761904761905, "no_speech_prob": 1.6166020941454917e-05}, {"id": 262, "seek": 435900, "start": 4371.0, "end": 4383.0, "text": " They really just do that it's in their DNA so if your neural network isn't learning it means you're doing something wrong that's preventing it from learning successfully.", "tokens": [814, 534, 445, 360, 300, 309, 311, 294, 641, 8272, 370, 498, 428, 18161, 3209, 1943, 380, 2539, 309, 1355, 291, 434, 884, 746, 2085, 300, 311, 19965, 309, 490, 2539, 10727, 13], "temperature": 0.0, "avg_logprob": -0.07846179326375326, "compression_ratio": 1.6904761904761905, "no_speech_prob": 1.6166020941454917e-05}, {"id": 263, "seek": 438300, "start": 4383.0, "end": 4402.0, "text": " But you know at that point there's a grim reality there are all sorts of things that cause neural nets to not learn at all or more common case actually is they sort of learn a bit that they don't learn very well you know there are bugs in the code you're", "tokens": [583, 291, 458, 412, 300, 935, 456, 311, 257, 36010, 4103, 456, 366, 439, 7527, 295, 721, 300, 3082, 18161, 36170, 281, 406, 1466, 412, 439, 420, 544, 2689, 1389, 767, 307, 436, 1333, 295, 1466, 257, 857, 300, 436, 500, 380, 1466, 588, 731, 291, 458, 456, 366, 15120, 294, 264, 3089, 291, 434], "temperature": 0.0, "avg_logprob": -0.137886386806682, "compression_ratio": 1.6493506493506493, "no_speech_prob": 7.70440383348614e-05}, {"id": 264, "seek": 440200, "start": 4402.0, "end": 4419.0, "text": " doing through by the wrong thing you've missing some connections in your network so nothing information is flowing from one place to another place you're calculating the gradients wrong and some layer there are all sorts of things that can go wrong.", "tokens": [884, 807, 538, 264, 2085, 551, 291, 600, 5361, 512, 9271, 294, 428, 3209, 370, 1825, 1589, 307, 13974, 490, 472, 1081, 281, 1071, 1081, 291, 434, 28258, 264, 2771, 2448, 2085, 293, 512, 4583, 456, 366, 439, 7527, 295, 721, 300, 393, 352, 2085, 13], "temperature": 0.0, "avg_logprob": -0.2247610092163086, "compression_ratio": 1.6064516129032258, "no_speech_prob": 0.00011198283755220473}, {"id": 265, "seek": 441900, "start": 4419.0, "end": 4440.0, "text": " So you need to then work out how to find and fix them and the truth is that this debugging and tuning can often take way more time than I'm going to implement the model so in terms of thinking about how much you could get through you should be thinking okay I've coded up my model that doesn't mean that you're 75%", "tokens": [407, 291, 643, 281, 550, 589, 484, 577, 281, 915, 293, 3191, 552, 293, 264, 3494, 307, 300, 341, 45592, 293, 15164, 393, 2049, 747, 636, 544, 565, 813, 286, 478, 516, 281, 4445, 264, 2316, 370, 294, 2115, 295, 1953, 466, 577, 709, 291, 727, 483, 807, 291, 820, 312, 1953, 1392, 286, 600, 34874, 493, 452, 2316, 300, 1177, 380, 914, 300, 291, 434, 9562, 4], "temperature": 0.0, "avg_logprob": -0.1540073421266344, "compression_ratio": 1.5939086294416243, "no_speech_prob": 5.639676965074614e-05}, {"id": 266, "seek": 444000, "start": 4440.0, "end": 4450.0, "text": " and it's pretty frequent it means that you're only 20% done and there's still a lot of work to go to get things working.", "tokens": [293, 309, 311, 1238, 18004, 309, 1355, 300, 291, 434, 787, 945, 4, 1096, 293, 456, 311, 920, 257, 688, 295, 589, 281, 352, 281, 483, 721, 1364, 13], "temperature": 0.0, "avg_logprob": -0.18444112321020853, "compression_ratio": 1.4736842105263157, "no_speech_prob": 4.0669594454811886e-05}, {"id": 267, "seek": 444000, "start": 4450.0, "end": 4469.0, "text": " Okay so for the last minutes I just want to say a few minutes about the final projects and I've read like some idea about what this is about as an NLP problem.", "tokens": [1033, 370, 337, 264, 1036, 2077, 286, 445, 528, 281, 584, 257, 1326, 2077, 466, 264, 2572, 4455, 293, 286, 600, 1401, 411, 512, 1558, 466, 437, 341, 307, 466, 382, 364, 426, 45196, 1154, 13], "temperature": 0.0, "avg_logprob": -0.18444112321020853, "compression_ratio": 1.4736842105263157, "no_speech_prob": 4.0669594454811886e-05}, {"id": 268, "seek": 446900, "start": 4469.0, "end": 4492.0, "text": " Okay so the problem is most commonly called question answering over documents but really what the part that we're doing is perhaps better called reading comprehension and so the idea of this is that you want to actually be able to answer questions based on documents.", "tokens": [1033, 370, 264, 1154, 307, 881, 12719, 1219, 1168, 13430, 670, 8512, 457, 534, 437, 264, 644, 300, 321, 434, 884, 307, 4317, 1101, 1219, 3760, 44991, 293, 370, 264, 1558, 295, 341, 307, 300, 291, 528, 281, 767, 312, 1075, 281, 1867, 1651, 2361, 322, 8512, 13], "temperature": 0.0, "avg_logprob": -0.05918246507644653, "compression_ratio": 1.598802395209581, "no_speech_prob": 0.00016033346764743328}, {"id": 269, "seek": 449200, "start": 4492.0, "end": 4515.0, "text": " So here's an example of the question who was Australia's third prime minister and you know once upon a time when if you typed a question into Google all you got was web search and it returned to you list of pages with the implied promise that some of the ones right near the top probably had the answer the question.", "tokens": [407, 510, 311, 364, 1365, 295, 264, 1168, 567, 390, 7060, 311, 2636, 5835, 10563, 293, 291, 458, 1564, 3564, 257, 565, 562, 498, 291, 33941, 257, 1168, 666, 3329, 439, 291, 658, 390, 3670, 3164, 293, 309, 8752, 281, 291, 1329, 295, 7183, 365, 264, 32614, 6228, 300, 512, 295, 264, 2306, 558, 2651, 264, 1192, 1391, 632, 264, 1867, 264, 1168, 13], "temperature": 0.0, "avg_logprob": -0.1370693094590131, "compression_ratio": 1.6040609137055837, "no_speech_prob": 6.983935600146651e-05}, {"id": 270, "seek": 451500, "start": 4515.0, "end": 4544.0, "text": " But if you do this now it gives you back an answer and so here's the answer John Christian Watson and the important thing to realize is that this kind of featured snippet you know Google has 101 or maybe a thousand one different pieces inside it but you know this feature snippet isn't coming from the Google knowledge graph structured data it's coming straight from a web page", "tokens": [583, 498, 291, 360, 341, 586, 309, 2709, 291, 646, 364, 1867, 293, 370, 510, 311, 264, 1867, 2619, 5778, 25640, 293, 264, 1021, 551, 281, 4325, 307, 300, 341, 733, 295, 13822, 35623, 302, 291, 458, 3329, 575, 21055, 420, 1310, 257, 4714, 472, 819, 3755, 1854, 309, 457, 291, 458, 341, 4111, 35623, 302, 1943, 380, 1348, 490, 264, 3329, 3601, 4295, 18519, 1412, 309, 311, 1348, 2997, 490, 257, 3670, 3028], "temperature": 0.0, "avg_logprob": -0.11109756812071189, "compression_ratio": 1.6391304347826088, "no_speech_prob": 0.00011948023166041821}, {"id": 271, "seek": 454400, "start": 4544.0, "end": 4554.0, "text": " where some part of the Google search system has actually read this web page and decided what the answer is.", "tokens": [689, 512, 644, 295, 264, 3329, 3164, 1185, 575, 767, 1401, 341, 3670, 3028, 293, 3047, 437, 264, 1867, 307, 13], "temperature": 0.0, "avg_logprob": -0.11036129939703294, "compression_ratio": 1.8046511627906976, "no_speech_prob": 0.00017352518625557423}, {"id": 272, "seek": 454400, "start": 4554.0, "end": 4573.0, "text": " So for this kind of system the most straightforward way to do it is you have two parts first you have a web search system that finds a page that probably has the answer and then you have a reading comprehension system that actually looks inside the text and works to extract this.", "tokens": [407, 337, 341, 733, 295, 1185, 264, 881, 15325, 636, 281, 360, 309, 307, 291, 362, 732, 3166, 700, 291, 362, 257, 3670, 3164, 1185, 300, 10704, 257, 3028, 300, 1391, 575, 264, 1867, 293, 550, 291, 362, 257, 3760, 44991, 1185, 300, 767, 1542, 1854, 264, 2487, 293, 1985, 281, 8947, 341, 13], "temperature": 0.0, "avg_logprob": -0.11036129939703294, "compression_ratio": 1.8046511627906976, "no_speech_prob": 0.00017352518625557423}, {"id": 273, "seek": 457300, "start": 4573.0, "end": 4591.0, "text": " And so it's looked through this piece of text and this sentence says was an Australian politician who served as the third prime minister of Australia that's why I'm asking for and slightly different wording Australia's third prime minister.", "tokens": [400, 370, 309, 311, 2956, 807, 341, 2522, 295, 2487, 293, 341, 8174, 1619, 390, 364, 13337, 26453, 567, 7584, 382, 264, 2636, 5835, 10563, 295, 7060, 300, 311, 983, 286, 478, 3365, 337, 293, 4748, 819, 47602, 7060, 311, 2636, 5835, 10563, 13], "temperature": 0.0, "avg_logprob": -0.19228647152582803, "compression_ratio": 1.5789473684210527, "no_speech_prob": 0.0009393572108820081}, {"id": 274, "seek": 459100, "start": 4591.0, "end": 4611.0, "text": " So this answers the question and so it correctly says that the answer is John Christian Watson and so what we want to build in the default final project is systems that do that second part that given a piece of text and a question they can give the answer.", "tokens": [407, 341, 6338, 264, 1168, 293, 370, 309, 8944, 1619, 300, 264, 1867, 307, 2619, 5778, 25640, 293, 370, 437, 321, 528, 281, 1322, 294, 264, 7576, 2572, 1716, 307, 3652, 300, 360, 300, 1150, 644, 300, 2212, 257, 2522, 295, 2487, 293, 257, 1168, 436, 393, 976, 264, 1867, 13], "temperature": 0.0, "avg_logprob": -0.09618264111605558, "compression_ratio": 1.5900621118012421, "no_speech_prob": 0.00010918416955973953}, {"id": 275, "seek": 461100, "start": 4611.0, "end": 4630.0, "text": " So the simple motivation for why this is important is once we have massive full text document collections that you know simply we're saying here's a list of maybe relevant documents is of limited use that we really much prefer to get answers to our questions.", "tokens": [407, 264, 2199, 12335, 337, 983, 341, 307, 1021, 307, 1564, 321, 362, 5994, 1577, 2487, 4166, 16641, 300, 291, 458, 2935, 321, 434, 1566, 510, 311, 257, 1329, 295, 1310, 7340, 8512, 307, 295, 5567, 764, 300, 321, 534, 709, 4382, 281, 483, 6338, 281, 527, 1651, 13], "temperature": 0.0, "avg_logprob": -0.18103207282300265, "compression_ratio": 1.4971098265895955, "no_speech_prob": 0.00021160741744097322}, {"id": 276, "seek": 463000, "start": 4630.0, "end": 4649.0, "text": " And you know that's true in general but you know it's especially true if you're using your phone to try and look for information rather than sitting in front of a 27 inch monitor it's especially true if you're using a virtual assistant device like Alexa or Google assistant.", "tokens": [400, 291, 458, 300, 311, 2074, 294, 2674, 457, 291, 458, 309, 311, 2318, 2074, 498, 291, 434, 1228, 428, 2593, 281, 853, 293, 574, 337, 1589, 2831, 813, 3798, 294, 1868, 295, 257, 7634, 7227, 6002, 309, 311, 2318, 2074, 498, 291, 434, 1228, 257, 6374, 10994, 4302, 411, 22595, 420, 3329, 10994, 13], "temperature": 0.0, "avg_logprob": -0.06800385652962378, "compression_ratio": 1.670731707317073, "no_speech_prob": 5.812697418150492e-05}, {"id": 277, "seek": 464900, "start": 4649.0, "end": 4675.0, "text": " That's the problem that's been worked on reading comprehension or question answering and so the squad data set which was built by front of Rajperker and personally and consists of passages taken from Wikipedia and questions which team one super bowl 50 and what you're meant to be able to do is read through this passage.", "tokens": [663, 311, 264, 1154, 300, 311, 668, 2732, 322, 3760, 44991, 420, 1168, 13430, 293, 370, 264, 15310, 1412, 992, 597, 390, 3094, 538, 1868, 295, 16745, 610, 5767, 293, 5665, 293, 14689, 295, 31589, 2726, 490, 28999, 293, 1651, 597, 1469, 472, 1687, 6571, 2625, 293, 437, 291, 434, 4140, 281, 312, 1075, 281, 360, 307, 1401, 807, 341, 11497, 13], "temperature": 0.0, "avg_logprob": -0.23191236727165454, "compression_ratio": 1.558252427184466, "no_speech_prob": 0.00021104438928887248}, {"id": 278, "seek": 467500, "start": 4675.0, "end": 4683.0, "text": " And so the answer is the dead and the bonkers.", "tokens": [400, 370, 264, 1867, 307, 264, 3116, 293, 264, 4428, 24259, 13], "temperature": 0.0, "avg_logprob": -0.2509413305318581, "compression_ratio": 1.5035971223021583, "no_speech_prob": 0.00048334503662772477}, {"id": 279, "seek": 467500, "start": 4683.0, "end": 4697.0, "text": " And so there are 100,000 such examples and so the answer is always just taken to be a span of the passage and that's referred to as extractive question answering.", "tokens": [400, 370, 456, 366, 2319, 11, 1360, 1270, 5110, 293, 370, 264, 1867, 307, 1009, 445, 2726, 281, 312, 257, 16174, 295, 264, 11497, 293, 300, 311, 10839, 281, 382, 8947, 488, 1168, 13430, 13], "temperature": 0.0, "avg_logprob": -0.2509413305318581, "compression_ratio": 1.5035971223021583, "no_speech_prob": 0.00048334503662772477}, {"id": 280, "seek": 469700, "start": 4697.0, "end": 4715.0, "text": " So to let this data what was done was that people were shown passages asked several questions just like reading comprehension at school perhaps slightly simple questions and they're asked to choose a span that answered it.", "tokens": [407, 281, 718, 341, 1412, 437, 390, 1096, 390, 300, 561, 645, 4898, 31589, 2351, 2940, 1651, 445, 411, 3760, 44991, 412, 1395, 4317, 4748, 2199, 1651, 293, 436, 434, 2351, 281, 2826, 257, 16174, 300, 10103, 309, 13], "temperature": 0.0, "avg_logprob": -0.20308982494265534, "compression_ratio": 1.4899328859060403, "no_speech_prob": 0.00020899630908388644}, {"id": 281, "seek": 471500, "start": 4715.0, "end": 4730.0, "text": " You know as in these examples show the they showed it to three human beings and they didn't always choose exactly the same span because sort of there's summer uncertainty as to how many words to include but roughly.", "tokens": [509, 458, 382, 294, 613, 5110, 855, 264, 436, 4712, 309, 281, 1045, 1952, 8958, 293, 436, 994, 380, 1009, 2826, 2293, 264, 912, 16174, 570, 1333, 295, 456, 311, 4266, 15697, 382, 281, 577, 867, 2283, 281, 4090, 457, 9810, 13], "temperature": 0.0, "avg_logprob": -0.16284739452859628, "compression_ratio": 1.4726027397260273, "no_speech_prob": 4.5989203499630094e-05}, {"id": 282, "seek": 473000, "start": 4730.0, "end": 4749.0, "text": " They're answering the question in that way and so then we have a valuation measures and so there are two evaluation measures one is exact match whether you return exactly what one of the humans returned and the other one is the F1 measure which is.", "tokens": [814, 434, 13430, 264, 1168, 294, 300, 636, 293, 370, 550, 321, 362, 257, 38546, 8000, 293, 370, 456, 366, 732, 13344, 8000, 472, 307, 1900, 2995, 1968, 291, 2736, 2293, 437, 472, 295, 264, 6255, 8752, 293, 264, 661, 472, 307, 264, 479, 16, 3481, 597, 307, 13], "temperature": 0.0, "avg_logprob": -0.1011408140074532, "compression_ratio": 1.6423841059602649, "no_speech_prob": 3.314742571092211e-05}, {"id": 283, "seek": 474900, "start": 4749.0, "end": 4762.0, "text": " Is the overlap in words of your span to one of the humans roughly so for squad the initial.", "tokens": [1119, 264, 19959, 294, 2283, 295, 428, 16174, 281, 472, 295, 264, 6255, 9810, 370, 337, 15310, 264, 5883, 13], "temperature": 0.0, "avg_logprob": -0.3160242438316345, "compression_ratio": 1.1375, "no_speech_prob": 6.886170012876391e-05}, {"id": 284, "seek": 476200, "start": 4762.0, "end": 4785.0, "text": " So we're going to do squad 2.0 which is just a little bit more complex because they make it a little bit trickier that some of the questions have no answers in the text so here's a piece of text about genghis Khan and the question is when did genghis Khan kill great Khan.", "tokens": [407, 321, 434, 516, 281, 360, 15310, 568, 13, 15, 597, 307, 445, 257, 707, 857, 544, 3997, 570, 436, 652, 309, 257, 707, 857, 4282, 811, 300, 512, 295, 264, 1651, 362, 572, 6338, 294, 264, 2487, 370, 510, 311, 257, 2522, 295, 2487, 466, 290, 1501, 18300, 18136, 293, 264, 1168, 307, 562, 630, 290, 1501, 18300, 18136, 1961, 869, 18136, 13], "temperature": 0.0, "avg_logprob": -0.16695767290451946, "compression_ratio": 1.5722543352601157, "no_speech_prob": 7.236319652292877e-05}, {"id": 285, "seek": 478500, "start": 4785.0, "end": 4806.0, "text": " Well if we sort of read through this text there's genghis Khan at the beginning and there's talk about different kinds and there's the person down here who became great Khan in 1251 then genghis Khan didn't kill great Khan it doesn't say that at all.", "tokens": [1042, 498, 321, 1333, 295, 1401, 807, 341, 2487, 456, 311, 290, 1501, 18300, 18136, 412, 264, 2863, 293, 456, 311, 751, 466, 819, 3685, 293, 456, 311, 264, 954, 760, 510, 567, 3062, 869, 18136, 294, 2272, 18682, 550, 290, 1501, 18300, 18136, 994, 380, 1961, 869, 18136, 309, 1177, 380, 584, 300, 412, 439, 13], "temperature": 0.0, "avg_logprob": -0.11023443253313908, "compression_ratio": 1.5923566878980893, "no_speech_prob": 9.434080857317895e-05}, {"id": 286, "seek": 480600, "start": 4806.0, "end": 4833.0, "text": " But you know actually here's Microsoft and L net which is another strong question answering system and if you ask at this question it says 1234 so the reality is that a lot of these models have effectively heuristically behave like okay well this is asking for a year let me look for a year in this passage this near discussion of genghis Khan.", "tokens": [583, 291, 458, 767, 510, 311, 8116, 293, 441, 2533, 597, 307, 1071, 2068, 1168, 13430, 1185, 293, 498, 291, 1029, 412, 341, 1168, 309, 1619, 2272, 12249, 370, 264, 4103, 307, 300, 257, 688, 295, 613, 5245, 362, 8659, 415, 374, 20458, 15158, 411, 1392, 731, 341, 307, 3365, 337, 257, 1064, 718, 385, 574, 337, 257, 1064, 294, 341, 11497, 341, 2651, 5017, 295, 290, 1501, 18300, 18136, 13], "temperature": 0.0, "avg_logprob": -0.15743092854817708, "compression_ratio": 1.6, "no_speech_prob": 0.00019918332691304386}, {"id": 287, "seek": 483300, "start": 4833.0, "end": 4847.0, "text": " And maybe weakening is somehow similar to killing i'm going to guess 1234 and that's sort of the wrong thing to have done here so this is a good reliability test for question answering models so that's an interesting add on problem to look at.", "tokens": [400, 1310, 5336, 4559, 307, 6063, 2531, 281, 8011, 741, 478, 516, 281, 2041, 2272, 12249, 293, 300, 311, 1333, 295, 264, 2085, 551, 281, 362, 1096, 510, 370, 341, 307, 257, 665, 24550, 1500, 337, 1168, 13430, 5245, 370, 300, 311, 364, 1880, 909, 322, 1154, 281, 574, 412, 13], "temperature": 0.0, "avg_logprob": -0.1371628934686834, "compression_ratio": 1.4817073170731707, "no_speech_prob": 0.0018279791111126542}, {"id": 288, "seek": 484700, "start": 4847.0, "end": 4873.0, "text": " Okay i'm going to stop there today good luck with your projects.", "tokens": [1033, 741, 478, 516, 281, 1590, 456, 965, 665, 3668, 365, 428, 4455, 13], "temperature": 0.0, "avg_logprob": -0.17266876167721218, "compression_ratio": 0.9411764705882353, "no_speech_prob": 5.6899771152529866e-05}], "language": "en"}